
SAMI_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016e8  08011264  08011264  00021264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801294c  0801294c  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  0801294c  0801294c  0002294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012954  08012954  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012954  08012954  00022954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012958  08012958  00022958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0801295c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039b0  2000009c  080129f8  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00005804  20003a4c  080129f8  00033a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035b19  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005936  00000000  00000000  00065be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d30  00000000  00000000  0006b520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001af8  00000000  00000000  0006d250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002db1c  00000000  00000000  0006ed48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c49d  00000000  00000000  0009c864  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa5bb  00000000  00000000  000b8d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b32bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e80  00000000  00000000  001b3338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801124c 	.word	0x0801124c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0801124c 	.word	0x0801124c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BUFFER_Init>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "buffer.h"

uint8_t BUFFER_Init(BUFFER_t* Buffer, uint32_t Size, uint8_t* BufferPtr) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
	if (Buffer == NULL) {											/* Check buffer structure */
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d101      	bne.n	80005b6 <BUFFER_Init+0x16>
		return 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e030      	b.n	8000618 <BUFFER_Init+0x78>
	}
	memset(Buffer, 0, sizeof(BUFFER_t));        			/* Set buffer values to all zeros */
 80005b6:	2218      	movs	r2, #24
 80005b8:	2100      	movs	r1, #0
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f010 f9c2 	bl	8010944 <memset>
    
	Buffer->Size = Size;                        			/* Set default values */
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	601a      	str	r2, [r3, #0]
	Buffer->Buffer = BufferPtr;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	60da      	str	r2, [r3, #12]
	Buffer->StringDelimiter = '\n';
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	220a      	movs	r2, #10
 80005d0:	745a      	strb	r2, [r3, #17]
	
	if (!Buffer->Buffer) {                      			/* Check if malloc should be used */
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d116      	bne.n	8000608 <BUFFER_Init+0x68>
		Buffer->Buffer = (uint8_t *) LIB_ALLOC_FUNC(Size * sizeof(uint8_t));    /* Try to allocate */
 80005da:	68b8      	ldr	r0, [r7, #8]
 80005dc:	f010 f988 	bl	80108f0 <malloc>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	60da      	str	r2, [r3, #12]
		if (!Buffer->Buffer) {                  			/* Check if allocated */    
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d104      	bne.n	80005fa <BUFFER_Init+0x5a>
			Buffer->Size = 0;                   			/* Reset size */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
			return 1;                           			/* Return error */
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00e      	b.n	8000618 <BUFFER_Init+0x78>
		} else {
			Buffer->Flags |= BUFFER_MALLOC;     			/* Set flag for malloc */
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	7c1b      	ldrb	r3, [r3, #16]
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	b2da      	uxtb	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	741a      	strb	r2, [r3, #16]
		}
	}
	Buffer->Flags |= BUFFER_INITIALIZED;					/* We are initialized */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	7c1b      	ldrb	r3, [r3, #16]
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	741a      	strb	r2, [r3, #16]
	
	return 0;												/* Initialized OK */
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <BUFFER_Write>:
	}
	Buffer->Flags = 0;
	Buffer->Size = 0;
}

uint32_t BUFFER_Write(BUFFER_t* Buffer, uint8_t* Data, uint32_t count) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
	uint32_t free;
#if BUFFER_FAST
	uint32_t tocopy;
#endif

	if (Buffer == NULL || count == 0) {						/* Check buffer structure */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <BUFFER_Write+0x1c>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d101      	bne.n	8000640 <BUFFER_Write+0x20>
		return 0;
 800063c:	2300      	movs	r3, #0
 800063e:	e056      	b.n	80006ee <BUFFER_Write+0xce>
	}
	if (Buffer->In >= Buffer->Size) {						/* Check input pointer */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	685a      	ldr	r2, [r3, #4]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	429a      	cmp	r2, r3
 800064a:	d302      	bcc.n	8000652 <BUFFER_Write+0x32>
		Buffer->In = 0;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
	}
	free = BUFFER_GetFree(Buffer);							/* Get free memory */
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f000 f917 	bl	8000886 <BUFFER_GetFree>
 8000658:	6178      	str	r0, [r7, #20]
	if (free < count) {										/* Check available memory */	
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	429a      	cmp	r2, r3
 8000660:	d206      	bcs.n	8000670 <BUFFER_Write+0x50>
		if (free == 0) {									/* If no memory, stop execution */
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d101      	bne.n	800066c <BUFFER_Write+0x4c>
			return 0;
 8000668:	2300      	movs	r3, #0
 800066a:	e040      	b.n	80006ee <BUFFER_Write+0xce>
		}
		count = free;										/* Set values for write */
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	607b      	str	r3, [r7, #4]
	}

	/* We have calculated memory for write */
#if BUFFER_FAST
	tocopy = Buffer->Size - Buffer->In;						/* Calculate number of elements we can put at the end of buffer */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	61fb      	str	r3, [r7, #28]
	if (tocopy > count) {									/* Check for copy count */
 800067c:	69fa      	ldr	r2, [r7, #28]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	429a      	cmp	r2, r3
 8000682:	d901      	bls.n	8000688 <BUFFER_Write+0x68>
		tocopy = count;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	61fb      	str	r3, [r7, #28]
	}
	memcpy(&Buffer->Buffer[Buffer->In], Data, tocopy);		/* Copy content to buffer */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	68da      	ldr	r2, [r3, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4413      	add	r3, r2
 8000692:	69fa      	ldr	r2, [r7, #28]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	4618      	mov	r0, r3
 8000698:	f010 f949 	bl	801092e <memcpy>
	i += tocopy;											/* Increase number of bytes we copied already */
 800069c:	69ba      	ldr	r2, [r7, #24]
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	4413      	add	r3, r2
 80006a2:	61bb      	str	r3, [r7, #24]
	Buffer->In += tocopy;	
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	441a      	add	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	605a      	str	r2, [r3, #4]
	count -= tocopy;
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	607b      	str	r3, [r7, #4]
	if (count > 0) {										/* Check if anything to write */	
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00b      	beq.n	80006d6 <BUFFER_Write+0xb6>
		memcpy(Buffer->Buffer, &Data[i], count);			/* Copy content */
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	68d8      	ldr	r0, [r3, #12]
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	4413      	add	r3, r2
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	f010 f92f 	bl	801092e <memcpy>
		Buffer->In = count;									/* Set input pointer */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	605a      	str	r2, [r3, #4]
	}
	if (Buffer->In >= Buffer->Size) {						/* Check input overflow */
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d302      	bcc.n	80006e8 <BUFFER_Write+0xc8>
		Buffer->In = 0;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
	}
	return (i + count);										/* Return number of elements stored in memory */
 80006e8:	69ba      	ldr	r2, [r7, #24]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
			Buffer->In = 0;
		}
	}
	return i;												/* Return number of elements written */
#endif
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3720      	adds	r7, #32
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <BUFFER_WriteToTop>:

uint32_t BUFFER_WriteToTop(BUFFER_t* Buffer, uint8_t* Data, uint32_t count) {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b086      	sub	sp, #24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
	uint32_t free;

	if (Buffer == NULL || count == 0) {						/* Check buffer structure */
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <BUFFER_WriteToTop+0x1c>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <BUFFER_WriteToTop+0x20>
		return 0;
 8000712:	2300      	movs	r3, #0
 8000714:	e048      	b.n	80007a8 <BUFFER_WriteToTop+0xb2>
	}
	if (Buffer->In >= Buffer->Size) {						/* Check input pointer */
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	429a      	cmp	r2, r3
 8000720:	d302      	bcc.n	8000728 <BUFFER_WriteToTop+0x32>
		Buffer->In = 0;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
	}
	if (Buffer->Out >= Buffer->Size) {						/* Check output pointer */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	689a      	ldr	r2, [r3, #8]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d302      	bcc.n	800073a <BUFFER_WriteToTop+0x44>
		Buffer->Out = 0;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
	}
	free = BUFFER_GetFree(Buffer);							/* Get free memory */
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f000 f8a3 	bl	8000886 <BUFFER_GetFree>
 8000740:	6138      	str	r0, [r7, #16]
	if (free < count) {										/* Check available memory */
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d206      	bcs.n	8000758 <BUFFER_WriteToTop+0x62>
		if (free == 0) {									/* If no memory, stop execution */
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <BUFFER_WriteToTop+0x5e>
			return 0;
 8000750:	2300      	movs	r3, #0
 8000752:	e029      	b.n	80007a8 <BUFFER_WriteToTop+0xb2>
		}
		count = free;										/* Set values for write */
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	607b      	str	r3, [r7, #4]
	}
	Data += count - 1;										/* Start on bottom */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	4413      	add	r3, r2
 8000760:	60bb      	str	r3, [r7, #8]
	while (count--) {										/* Go through all elements */
 8000762:	e01b      	b.n	800079c <BUFFER_WriteToTop+0xa6>
		if (Buffer->Out == 0) {								/* Check output pointer */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d105      	bne.n	8000778 <BUFFER_WriteToTop+0x82>
			Buffer->Out = Buffer->Size - 1;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	e004      	b.n	8000782 <BUFFER_WriteToTop+0x8c>
		} else {
			Buffer->Out--;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	609a      	str	r2, [r3, #8]
		}
		Buffer->Buffer[Buffer->Out] = *Data--;				/* Add to buffer */
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	60ba      	str	r2, [r7, #8]
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	68d1      	ldr	r1, [r2, #12]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	6892      	ldr	r2, [r2, #8]
 8000790:	440a      	add	r2, r1
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	7013      	strb	r3, [r2, #0]
		i++;												/* Increase pointers */
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	3301      	adds	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
	while (count--) {										/* Go through all elements */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	1e5a      	subs	r2, r3, #1
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1de      	bne.n	8000764 <BUFFER_WriteToTop+0x6e>
	}
	return i;												/* Return number of elements written */
 80007a6:	697b      	ldr	r3, [r7, #20]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <BUFFER_Read>:

uint32_t BUFFER_Read(BUFFER_t* Buffer, uint8_t* Data, uint32_t count) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	uint32_t i = 0, full;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
#if BUFFER_FAST
	uint32_t tocopy;
#endif
	
	if (Buffer == NULL || count == 0) {						/* Check buffer structure */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <BUFFER_Read+0x1c>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <BUFFER_Read+0x20>
		return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e056      	b.n	800087e <BUFFER_Read+0xce>
	}
	if (Buffer->Out >= Buffer->Size) {						/* Check output pointer */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	689a      	ldr	r2, [r3, #8]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d302      	bcc.n	80007e2 <BUFFER_Read+0x32>
		Buffer->Out = 0;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
	}
	full = BUFFER_GetFull(Buffer);							/* Get free memory */
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f000 f882 	bl	80008ec <BUFFER_GetFull>
 80007e8:	6178      	str	r0, [r7, #20]
	if (full < count) {										/* Check available memory */
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d206      	bcs.n	8000800 <BUFFER_Read+0x50>
		if (full == 0) {									/* If no memory, stop execution */
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <BUFFER_Read+0x4c>
			return 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e040      	b.n	800087e <BUFFER_Read+0xce>
		}
		count = full;										/* Set values for write */
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	607b      	str	r3, [r7, #4]
	}
#if BUFFER_FAST
	tocopy = Buffer->Size - Buffer->Out;					/* Calculate number of elements we can read from end of buffer */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	61fb      	str	r3, [r7, #28]
	if (tocopy > count) {									/* Check for copy count */
 800080c:	69fa      	ldr	r2, [r7, #28]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	d901      	bls.n	8000818 <BUFFER_Read+0x68>
		tocopy = count;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	61fb      	str	r3, [r7, #28]
	}
	memcpy(Data, &Buffer->Buffer[Buffer->Out], tocopy);		/* Copy content from buffer */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	4413      	add	r3, r2
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	4619      	mov	r1, r3
 8000826:	68b8      	ldr	r0, [r7, #8]
 8000828:	f010 f881 	bl	801092e <memcpy>
	i += tocopy;											/* Increase number of bytes we copied already */
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	4413      	add	r3, r2
 8000832:	61bb      	str	r3, [r7, #24]
	Buffer->Out += tocopy;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	689a      	ldr	r2, [r3, #8]
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	441a      	add	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	609a      	str	r2, [r3, #8]
	count -= tocopy;
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	607b      	str	r3, [r7, #4]
	if (count > 0) {										/* Check if anything to read */
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00b      	beq.n	8000866 <BUFFER_Read+0xb6>
		memcpy(&Data[i], Buffer->Buffer, count);			/* Copy content */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	18d0      	adds	r0, r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4619      	mov	r1, r3
 800085c:	f010 f867 	bl	801092e <memcpy>
		Buffer->Out = count;								/* Set input pointer */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	609a      	str	r2, [r3, #8]
	}
	if (Buffer->Out >= Buffer->Size) {						/* Check output overflow */
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	429a      	cmp	r2, r3
 8000870:	d302      	bcc.n	8000878 <BUFFER_Read+0xc8>
		Buffer->Out = 0;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
	}
	return (i + count);										/* Return number of elements stored in memory */
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
			Buffer->Out = 0;
		}
	}
	return i;												/* Return number of elements stored in memory */
#endif
}
 800087e:	4618      	mov	r0, r3
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <BUFFER_GetFree>:

uint32_t BUFFER_GetFree(BUFFER_t* Buffer) {
 8000886:	b480      	push	{r7}
 8000888:	b087      	sub	sp, #28
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	uint32_t size = 0, in, out;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
	
	if (Buffer == NULL) {									/* Check buffer structure */
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d101      	bne.n	800089c <BUFFER_GetFree+0x16>
		return 0;
 8000898:	2300      	movs	r3, #0
 800089a:	e021      	b.n	80008e0 <BUFFER_GetFree+0x5a>
	}
	in = Buffer->In;										/* Save values */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	613b      	str	r3, [r7, #16]
	out = Buffer->Out;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	60fb      	str	r3, [r7, #12]
	if (in == out) {										/* Check if the same */
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d102      	bne.n	80008b6 <BUFFER_GetFree+0x30>
		size = Buffer->Size;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	617b      	str	r3, [r7, #20]
	}	
	if (out > in) {											/* Check normal mode */
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d903      	bls.n	80008c6 <BUFFER_GetFree+0x40>
		size = out - in;
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	617b      	str	r3, [r7, #20]
	}
	if (in > out) {											/* Check if overflow mode */
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d906      	bls.n	80008dc <BUFFER_GetFree+0x56>
		size = Buffer->Size - (in - out);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	68f9      	ldr	r1, [r7, #12]
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	1acb      	subs	r3, r1, r3
 80008d8:	4413      	add	r3, r2
 80008da:	617b      	str	r3, [r7, #20]
	}
	return size - 1;										/* Return free memory */
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	3b01      	subs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	371c      	adds	r7, #28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <BUFFER_GetFull>:

uint32_t BUFFER_GetFull(BUFFER_t* Buffer) {
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	uint32_t in, out, size;
	
	if (Buffer == NULL) {									/* Check buffer structure */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d101      	bne.n	80008fe <BUFFER_GetFull+0x12>
		return 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e01f      	b.n	800093e <BUFFER_GetFull+0x52>
	}
	in = Buffer->In;										/* Save values */
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	613b      	str	r3, [r7, #16]
	out = Buffer->Out;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	60fb      	str	r3, [r7, #12]
	if (in == out) {										/* Pointer are same? */
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	429a      	cmp	r2, r3
 8000910:	d101      	bne.n	8000916 <BUFFER_GetFull+0x2a>
		size = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
	}
	if (in > out) {											/* Buffer is not in overflow mode */
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	429a      	cmp	r2, r3
 800091c:	d903      	bls.n	8000926 <BUFFER_GetFull+0x3a>
		size = in - out;
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	617b      	str	r3, [r7, #20]
	}
	if (out > in) {											/* Buffer is in overflow mode */
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	429a      	cmp	r2, r3
 800092c:	d906      	bls.n	800093c <BUFFER_GetFull+0x50>
		size = Buffer->Size - (out - in);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	6939      	ldr	r1, [r7, #16]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	1acb      	subs	r3, r1, r3
 8000938:	4413      	add	r3, r2
 800093a:	617b      	str	r3, [r7, #20]
	}
	return size;											/* Return number of elements in buffer */
 800093c:	697b      	ldr	r3, [r7, #20]
}
 800093e:	4618      	mov	r0, r3
 8000940:	371c      	adds	r7, #28
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <BUFFER_Reset>:
	in = Buffer->In;										/* Save values */
	out = Buffer->Out;
	return (Buffer->Size + in - out) % Buffer->Size;
}

void BUFFER_Reset(BUFFER_t* Buffer) {
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	if (Buffer == NULL) {									/* Check buffer structure */
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d006      	beq.n	8000966 <BUFFER_Reset+0x1c>
		return;
	}
	Buffer->In = 0;											/* Reset values */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
	Buffer->Out = 0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	e000      	b.n	8000968 <BUFFER_Reset+0x1e>
		return;
 8000966:	bf00      	nop
}
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <BUFFER_FindElement>:

int32_t BUFFER_FindElement(BUFFER_t* Buffer, uint8_t Element) {
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	460b      	mov	r3, r1
 800097c:	70fb      	strb	r3, [r7, #3]
	uint32_t Num, Out, retval = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
	
	if (Buffer == NULL) {									/* Check buffer structure */
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <BUFFER_FindElement+0x1c>
		return -1;
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
 800098c:	e026      	b.n	80009dc <BUFFER_FindElement+0x6a>
	}
	
	Num = BUFFER_GetFull(Buffer);							/* Create temporary variables */
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ffac 	bl	80008ec <BUFFER_GetFull>
 8000994:	6178      	str	r0, [r7, #20]
	Out = Buffer->Out;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	613b      	str	r3, [r7, #16]
	while (Num > 0) {										/* Go through input elements */
 800099c:	e019      	b.n	80009d2 <BUFFER_FindElement+0x60>
		if (Out >= Buffer->Size) {							/* Check output overflow */
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d301      	bcc.n	80009ac <BUFFER_FindElement+0x3a>
			Out = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
		}
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Element) {	/* Check for element */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68da      	ldr	r2, [r3, #12]
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	4413      	add	r3, r2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	78fa      	ldrb	r2, [r7, #3]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d101      	bne.n	80009c0 <BUFFER_FindElement+0x4e>
			return retval;									/* Element found, return position in buffer */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	e00d      	b.n	80009dc <BUFFER_FindElement+0x6a>
		}
		Out++;												/* Set new variables */
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	3301      	adds	r3, #1
 80009c4:	613b      	str	r3, [r7, #16]
		Num--;
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
		retval++;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60fb      	str	r3, [r7, #12]
	while (Num > 0) {										/* Go through input elements */
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1e2      	bne.n	800099e <BUFFER_FindElement+0x2c>
	}
	return -1;												/* Element is not in buffer */
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <BUFFER_Find>:

int32_t BUFFER_Find(BUFFER_t* Buffer, uint8_t* Data, uint32_t Size) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
	uint32_t Num, Out, i, retval = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
	uint8_t found = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	75fb      	strb	r3, [r7, #23]

	if (Buffer == NULL || (Num = BUFFER_GetFull(Buffer)) < Size) {	/* Check buffer structure and number of elements in buffer */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d007      	beq.n	8000a0e <BUFFER_Find+0x2a>
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff74 	bl	80008ec <BUFFER_GetFull>
 8000a04:	6278      	str	r0, [r7, #36]	; 0x24
 8000a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d202      	bcs.n	8000a14 <BUFFER_Find+0x30>
		return -1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e058      	b.n	8000ac6 <BUFFER_Find+0xe2>
	}
	Out = Buffer->Out;										/* Create temporary variables */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	623b      	str	r3, [r7, #32]
	while (Num > 0) {										/* Go through input elements in buffer */
 8000a1a:	e04f      	b.n	8000abc <BUFFER_Find+0xd8>
		if (Out >= Buffer->Size) {							/* Check output overflow */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6a3a      	ldr	r2, [r7, #32]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d301      	bcc.n	8000a2a <BUFFER_Find+0x46>
			Out = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
		}
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Data[0]) {	/* Check if current element in buffer matches first element in data array */
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	4413      	add	r3, r2
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d101      	bne.n	8000a40 <BUFFER_Find+0x5c>
			found = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	75fb      	strb	r3, [r7, #23]
		}
		
		Out++;												/* Set new variables */
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	3301      	adds	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
		Num--;
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
		retval++;
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
		if (found) {										/* We have found first element */
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d031      	beq.n	8000abc <BUFFER_Find+0xd8>
			i = 1;											/* First character found */
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
			while (i < Size && Num > 0) {					/* Check others */	
 8000a5c:	e020      	b.n	8000aa0 <BUFFER_Find+0xbc>
				if (Out >= Buffer->Size) {					/* Check output overflow */
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6a3a      	ldr	r2, [r7, #32]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d301      	bcc.n	8000a6c <BUFFER_Find+0x88>
					Out = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
				}
				if ((uint8_t)Buffer->Buffer[Out] != (uint8_t)Data[i]) {	/* Check if current character in buffer matches character in string */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	6a3b      	ldr	r3, [r7, #32]
 8000a72:	4413      	add	r3, r2
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	440b      	add	r3, r1
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d005      	beq.n	8000a8e <BUFFER_Find+0xaa>
					retval += i - 1;
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	4413      	add	r3, r2
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
					break;
 8000a8c:	e00f      	b.n	8000aae <BUFFER_Find+0xca>
				}
				Out++;										/* Set new variables */
 8000a8e:	6a3b      	ldr	r3, [r7, #32]
 8000a90:	3301      	adds	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
				Num--;
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	3b01      	subs	r3, #1
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
				i++;
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
			while (i < Size && Num > 0) {					/* Check others */	
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d202      	bcs.n	8000aae <BUFFER_Find+0xca>
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1d7      	bne.n	8000a5e <BUFFER_Find+0x7a>
			}
			if (i == Size) {								/* We have found data sequence in buffer */
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d102      	bne.n	8000abc <BUFFER_Find+0xd8>
				return retval - 1;
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	e004      	b.n	8000ac6 <BUFFER_Find+0xe2>
	while (Num > 0) {										/* Go through input elements in buffer */
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1ac      	bne.n	8000a1c <BUFFER_Find+0x38>
			}
		}
	}
	return -1;												/* Data sequence is not in buffer */
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <BUFFER_WriteString>:

uint32_t BUFFER_WriteString(BUFFER_t* Buffer, char* buff) {
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
	return BUFFER_Write(Buffer, (uint8_t *)buff, strlen(buff));	/* Write string to buffer */
 8000ad8:	6838      	ldr	r0, [r7, #0]
 8000ada:	f7ff fb83 	bl	80001e4 <strlen>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	6839      	ldr	r1, [r7, #0]
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fd9b 	bl	8000620 <BUFFER_Write>
 8000aea:	4603      	mov	r3, r0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <BUFFER_ReadString>:

uint32_t BUFFER_ReadString(BUFFER_t* Buffer, char* buff, uint32_t buffsize) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	uint32_t i = 0, freeMem, fullMem;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
	uint8_t ch;
	if (Buffer == NULL) {
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <BUFFER_ReadString+0x1a>
		return 0;											/* Check value buffer */
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e04e      	b.n	8000bac <BUFFER_ReadString+0xb8>
	}
	
	freeMem = BUFFER_GetFree(Buffer);						/* Get free memory */
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff feb9 	bl	8000886 <BUFFER_GetFree>
 8000b14:	61b8      	str	r0, [r7, #24]
	fullMem = BUFFER_GetFull(Buffer);						/* Get full memory */
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff fee8 	bl	80008ec <BUFFER_GetFull>
 8000b1c:	6178      	str	r0, [r7, #20]
	if (													/* Check for any data in buffer */
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00f      	beq.n	8000b44 <BUFFER_ReadString+0x50>
		fullMem == 0 ||                                 	/* Buffer empty */
		(
			BUFFER_FindElement(Buffer, Buffer->StringDelimiter) < 0 && 	/* String delimiter is not in buffer */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	7c5b      	ldrb	r3, [r3, #17]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f7ff ff21 	bl	8000972 <BUFFER_FindElement>
 8000b30:	4603      	mov	r3, r0
		fullMem == 0 ||                                 	/* Buffer empty */
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da1f      	bge.n	8000b76 <BUFFER_ReadString+0x82>
			BUFFER_FindElement(Buffer, Buffer->StringDelimiter) < 0 && 	/* String delimiter is not in buffer */
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d01c      	beq.n	8000b76 <BUFFER_ReadString+0x82>
			freeMem != 0 &&                                            	/* Buffer is not full */
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d218      	bcs.n	8000b76 <BUFFER_ReadString+0x82>
			fullMem < buffsize                                         	/* User buffer size is larger than number of elements in buffer */
		)
	) {
		return 0;											/* Return with no elements read */
 8000b44:	2300      	movs	r3, #0
 8000b46:	e031      	b.n	8000bac <BUFFER_ReadString+0xb8>
	}
	while (i < (buffsize - 1)) {							/* If available buffer size is more than 0 characters */
		BUFFER_Read(Buffer, &ch, 1);						/* We have available data */
 8000b48:	f107 0313 	add.w	r3, r7, #19
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4619      	mov	r1, r3
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff fe2d 	bl	80007b0 <BUFFER_Read>
		buff[i] = (char)ch;									/* Save character */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	7cfa      	ldrb	r2, [r7, #19]
 8000b5e:	701a      	strb	r2, [r3, #0]
		if ((char)buff[i] == (char)Buffer->StringDelimiter) {	/* Check for end of string */
 8000b60:	68ba      	ldr	r2, [r7, #8]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	4413      	add	r3, r2
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	7c5b      	ldrb	r3, [r3, #17]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d008      	beq.n	8000b82 <BUFFER_ReadString+0x8e>
			break;											/* Done */
		}
		i++;												/* Increase */
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	3301      	adds	r3, #1
 8000b74:	61fb      	str	r3, [r7, #28]
	while (i < (buffsize - 1)) {							/* If available buffer size is more than 0 characters */
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	69fa      	ldr	r2, [r7, #28]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d3e3      	bcc.n	8000b48 <BUFFER_ReadString+0x54>
 8000b80:	e000      	b.n	8000b84 <BUFFER_ReadString+0x90>
			break;											/* Done */
 8000b82:	bf00      	nop
	}
	if (i == (buffsize - 1)) {								/* Add zero to the end of string */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d105      	bne.n	8000b9a <BUFFER_ReadString+0xa6>
		buff[i] = 0;
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	4413      	add	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e007      	b.n	8000baa <BUFFER_ReadString+0xb6>
	} else {
		buff[++i] = 0;
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
	}
	return i;												/* Return number of characters in buffer */
 8000baa:	69fb      	ldr	r3, [r7, #28]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <mem_mem>:

/******************************************/
/*           PRIVATE FUNCTIONS            */
/******************************************/
static                                                 		/* Check if needle exists in haystack memory */
void* mem_mem(void* haystack, size_t haystacksize, void* needle, size_t needlesize) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
    unsigned char* hptr = (unsigned char *)haystack;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	61bb      	str	r3, [r7, #24]
    unsigned char* nptr = (unsigned char *)needle;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	617b      	str	r3, [r7, #20]
    unsigned int i;

    if (needlesize > haystacksize) {                		/* Check sizes */
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d901      	bls.n	8000bd6 <mem_mem+0x22>
        return 0;                                   		/* Needle is greater than haystack = nothing in memory */
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e02b      	b.n	8000c2e <mem_mem+0x7a>
    }
    if (haystacksize == needlesize) {                		/* Check if same length */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d109      	bne.n	8000bf2 <mem_mem+0x3e>
        if (memcmp(hptr, nptr, needlesize) == 0) {
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	6979      	ldr	r1, [r7, #20]
 8000be2:	69b8      	ldr	r0, [r7, #24]
 8000be4:	f00f fe94 	bl	8010910 <memcmp>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <mem_mem+0x3e>
            return hptr;
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	e01d      	b.n	8000c2e <mem_mem+0x7a>
        }
    }
    haystacksize -= needlesize;                        		/* Set haystack size pointers */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < haystacksize; i++) {            		/* Go through entire memory */
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	e011      	b.n	8000c24 <mem_mem+0x70>
        if (memcmp(&hptr[i], nptr, needlesize) == 0) {      /* Check memory match */
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	4413      	add	r3, r2
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	6979      	ldr	r1, [r7, #20]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f00f fe80 	bl	8010910 <memcmp>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <mem_mem+0x6a>
            return &hptr[i];
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	e007      	b.n	8000c2e <mem_mem+0x7a>
    for (i = 0; i < haystacksize; i++) {            		/* Go through entire memory */
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3301      	adds	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	69fa      	ldr	r2, [r7, #28]
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d3e9      	bcc.n	8000c00 <mem_mem+0x4c>
        }
    }
    return 0;                                        		/* Not found */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <Int2String>:

static                                                		/* Converts integer number to string format */
void Int2String(char* ptr, long int num) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
    sprintf(ptr, "%d", num);
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	4903      	ldr	r1, [pc, #12]	; (8000c54 <Int2String+0x1c>)
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f00f ff3c 	bl	8010ac4 <siprintf>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08011264 	.word	0x08011264

08000c58 <Hex2Num>:

static                                                		/* Returns number from hex value */
uint8_t Hex2Num(char a) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b2f      	cmp	r3, #47	; 0x2f
 8000c66:	d906      	bls.n	8000c76 <Hex2Num+0x1e>
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b39      	cmp	r3, #57	; 0x39
 8000c6c:	d803      	bhi.n	8000c76 <Hex2Num+0x1e>
        return a - '0';
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	3b30      	subs	r3, #48	; 0x30
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	e014      	b.n	8000ca0 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b60      	cmp	r3, #96	; 0x60
 8000c7a:	d906      	bls.n	8000c8a <Hex2Num+0x32>
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b66      	cmp	r3, #102	; 0x66
 8000c80:	d803      	bhi.n	8000c8a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	3b57      	subs	r3, #87	; 0x57
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	e00a      	b.n	8000ca0 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b40      	cmp	r3, #64	; 0x40
 8000c8e:	d906      	bls.n	8000c9e <Hex2Num+0x46>
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b46      	cmp	r3, #70	; 0x46
 8000c94:	d803      	bhi.n	8000c9e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	3b37      	subs	r3, #55	; 0x37
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	e000      	b.n	8000ca0 <Hex2Num+0x48>
    }
    
    return 0;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <ParseNumber>:

static                                                		/* Parses and returns number from string */
int32_t ParseNumber(char* ptr, uint8_t* cnt) {
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
    
    if (*ptr == '-') {                                		/* Check for minus character */
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b2d      	cmp	r3, #45	; 0x2d
 8000cc8:	d119      	bne.n	8000cfe <ParseNumber+0x52>
        minus = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
        i++;
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000cda:	e010      	b.n	8000cfe <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	3b30      	subs	r3, #48	; 0x30
 8000cee:	4413      	add	r3, r2
 8000cf0:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
        i++;
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b2f      	cmp	r3, #47	; 0x2f
 8000d04:	d903      	bls.n	8000d0e <ParseNumber+0x62>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b39      	cmp	r3, #57	; 0x39
 8000d0c:	d9e6      	bls.n	8000cdc <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <ParseNumber+0x6e>
        *cnt = i;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	7bba      	ldrb	r2, [r7, #14]
 8000d18:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <ParseNumber+0x7a>
        return 0 - sum;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	425b      	negs	r3, r3
 8000d24:	e000      	b.n	8000d28 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000d26:	68bb      	ldr	r3, [r7, #8]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <ParseHexNumber>:

static                                                		/* Parses and returns HEX number from string */
uint32_t ParseHexNumber(char* ptr, uint8_t* cnt) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	72fb      	strb	r3, [r7, #11]
    
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000d46:	e012      	b.n	8000d6e <ParseHexNumber+0x3a>
        sum <<= 4;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff80 	bl	8000c58 <Hex2Num>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3301      	adds	r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
        i++;
 8000d68:	7afb      	ldrb	r3, [r7, #11]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b2f      	cmp	r3, #47	; 0x2f
 8000d74:	d903      	bls.n	8000d7e <ParseHexNumber+0x4a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b39      	cmp	r3, #57	; 0x39
 8000d7c:	d9e4      	bls.n	8000d48 <ParseHexNumber+0x14>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b60      	cmp	r3, #96	; 0x60
 8000d84:	d903      	bls.n	8000d8e <ParseHexNumber+0x5a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b66      	cmp	r3, #102	; 0x66
 8000d8c:	d9dc      	bls.n	8000d48 <ParseHexNumber+0x14>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b40      	cmp	r3, #64	; 0x40
 8000d94:	d903      	bls.n	8000d9e <ParseHexNumber+0x6a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b46      	cmp	r3, #70	; 0x46
 8000d9c:	d9d4      	bls.n	8000d48 <ParseHexNumber+0x14>
    }
    
    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <ParseHexNumber+0x76>
        *cnt = i;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	7afa      	ldrb	r2, [r7, #11]
 8000da8:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <ParseIP>:

static                                                		/* Parses IP string */
void ParseIP(char* ip_str, uint8_t* arr, uint8_t* cnt) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
    char* token;
    uint8_t i = 0, x = 0, c;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    char Data[16];
    
    memcpy(Data, ip_str, sizeof(Data) - 1);           		/* Make a string copy first */
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	68f9      	ldr	r1, [r7, #12]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f00f fdaa 	bl	801092e <memcpy>
    Data[sizeof(Data) - 1] = 0;    
 8000dda:	2300      	movs	r3, #0
 8000ddc:	77fb      	strb	r3, [r7, #31]
    token = strtok(Data, ".");                        		/* Parse numbers, skip :" */
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	491e      	ldr	r1, [pc, #120]	; (8000e5c <ParseIP+0xa8>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f00f feb9 	bl	8010b5c <strtok>
 8000dea:	6278      	str	r0, [r7, #36]	; 0x24
    while (token != NULL) {
 8000dec:	e025      	b.n	8000e3a <ParseIP+0x86>
        arr[x++] = ParseNumber(token, &c);
 8000dee:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8000df2:	4619      	mov	r1, r3
 8000df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000df6:	f7ff ff59 	bl	8000cac <ParseNumber>
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
 8000e06:	461a      	mov	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2ca      	uxtb	r2, r1
 8000e0e:	701a      	strb	r2, [r3, #0]
        i += c;
 8000e10:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e18:	4413      	add	r3, r2
 8000e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (x >= 4) {
 8000e1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d80d      	bhi.n	8000e42 <ParseIP+0x8e>
            break;
        }
        i++;
 8000e26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        token = strtok(NULL, ".");
 8000e30:	490a      	ldr	r1, [pc, #40]	; (8000e5c <ParseIP+0xa8>)
 8000e32:	2000      	movs	r0, #0
 8000e34:	f00f fe92 	bl	8010b5c <strtok>
 8000e38:	6278      	str	r0, [r7, #36]	; 0x24
    while (token != NULL) {
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1d6      	bne.n	8000dee <ParseIP+0x3a>
 8000e40:	e000      	b.n	8000e44 <ParseIP+0x90>
            break;
 8000e42:	bf00      	nop
    }
    
    if (cnt != NULL) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <ParseIP+0x9e>
        *cnt = i;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e50:	701a      	strb	r2, [r3, #0]
    }
}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	08011268 	.word	0x08011268

08000e60 <ParseMAC>:

static                                                		/* Parses MAC string */
void ParseMAC(char* ptr, uint8_t* arr, uint8_t* cnt) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
    char* hexptr;
    uint8_t hexnum = 0, tmpcnt = 0, sum = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	74fb      	strb	r3, [r7, #19]
 8000e70:	2300      	movs	r3, #0
 8000e72:	747b      	strb	r3, [r7, #17]
 8000e74:	2300      	movs	r3, #0
 8000e76:	74bb      	strb	r3, [r7, #18]
    
    hexptr = strtok(ptr, ":");                        		/* Get token */
 8000e78:	4919      	ldr	r1, [pc, #100]	; (8000ee0 <ParseMAC+0x80>)
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f00f fe6e 	bl	8010b5c <strtok>
 8000e80:	6178      	str	r0, [r7, #20]
    while (hexptr != NULL) {                        		/* Do it till NULL */
 8000e82:	e01d      	b.n	8000ec0 <ParseMAC+0x60>
        arr[hexnum++] = ParseHexNumber(hexptr, &tmpcnt);
 8000e84:	f107 0311 	add.w	r3, r7, #17
 8000e88:	4619      	mov	r1, r3
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff52 	bl	8000d34 <ParseHexNumber>
 8000e90:	4601      	mov	r1, r0
 8000e92:	7cfb      	ldrb	r3, [r7, #19]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	74fa      	strb	r2, [r7, #19]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
        sum += tmpcnt;
 8000ea2:	7c7a      	ldrb	r2, [r7, #17]
 8000ea4:	7cbb      	ldrb	r3, [r7, #18]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	74bb      	strb	r3, [r7, #18]
        if (hexnum >= 6) {
 8000eaa:	7cfb      	ldrb	r3, [r7, #19]
 8000eac:	2b05      	cmp	r3, #5
 8000eae:	d80b      	bhi.n	8000ec8 <ParseMAC+0x68>
            break;
        }
        sum++;
 8000eb0:	7cbb      	ldrb	r3, [r7, #18]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	74bb      	strb	r3, [r7, #18]
        hexptr = strtok(NULL, ":");
 8000eb6:	490a      	ldr	r1, [pc, #40]	; (8000ee0 <ParseMAC+0x80>)
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f00f fe4f 	bl	8010b5c <strtok>
 8000ebe:	6178      	str	r0, [r7, #20]
    while (hexptr != NULL) {                        		/* Do it till NULL */
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1de      	bne.n	8000e84 <ParseMAC+0x24>
 8000ec6:	e000      	b.n	8000eca <ParseMAC+0x6a>
            break;
 8000ec8:	bf00      	nop
    }
    
    if (cnt) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <ParseMAC+0x76>
        *cnt = sum;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7cba      	ldrb	r2, [r7, #18]
 8000ed4:	701a      	strb	r2, [r3, #0]
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	0801126c 	.word	0x0801126c

08000ee4 <ParseCWSAP>:

static                                                		/* Parses +CWSAP statement */
void ParseCWSAP(ESP8266_t* ESP8266, char* Buffer) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    char* ptr;
    uint8_t i, cnt;
    
    ptr = Buffer;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
    while (*ptr) {                                   		/* Find : in string */
 8000ef2:	e006      	b.n	8000f02 <ParseCWSAP+0x1e>
        if (*ptr == ':') {
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b3a      	cmp	r3, #58	; 0x3a
 8000efa:	d007      	beq.n	8000f0c <ParseCWSAP+0x28>
            break;
        }
        ptr++;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
    while (*ptr) {                                   		/* Find : in string */
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f4      	bne.n	8000ef4 <ParseCWSAP+0x10>
 8000f0a:	e000      	b.n	8000f0e <ParseCWSAP+0x2a>
            break;
 8000f0c:	bf00      	nop
    }
    
    if (*ptr == 0) {                                		/* Check if exists */
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 809f 	beq.w	8001056 <ParseCWSAP+0x172>
        return;
    }
    ptr++;                                            		/* Go to '"' character */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
    
    /**** NEEDS IMPROVEMENT ****/
    /* If '"' character is inside SSID or password part, parser will fail */
    
    /***** SSID ****/
    ESP8266->AP.SSID[0] = 0;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
    if (*ptr == '"') {
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b22      	cmp	r3, #34	; 0x22
 8000f2c:	d102      	bne.n	8000f34 <ParseCWSAP+0x50>
        ptr++;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
    }

    i = 0;                                            		/* Copy till "," which indicates end of SSID string and start of password part */
 8000f34:	2300      	movs	r3, #0
 8000f36:	72fb      	strb	r3, [r7, #11]
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',' || *(ptr + 2) != '"')) {
 8000f38:	e00b      	b.n	8000f52 <ParseCWSAP+0x6e>
        ESP8266->AP.SSID[i++] = *ptr++;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	60fa      	str	r2, [r7, #12]
 8000f40:	7afa      	ldrb	r2, [r7, #11]
 8000f42:	1c51      	adds	r1, r2, #1
 8000f44:	72f9      	strb	r1, [r7, #11]
 8000f46:	4611      	mov	r1, r2
 8000f48:	781a      	ldrb	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',' || *(ptr + 2) != '"')) {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00d      	beq.n	8000f76 <ParseCWSAP+0x92>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b22      	cmp	r3, #34	; 0x22
 8000f60:	d1eb      	bne.n	8000f3a <ParseCWSAP+0x56>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b2c      	cmp	r3, #44	; 0x2c
 8000f6a:	d1e6      	bne.n	8000f3a <ParseCWSAP+0x56>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b22      	cmp	r3, #34	; 0x22
 8000f74:	d1e1      	bne.n	8000f3a <ParseCWSAP+0x56>
    }
    ESP8266->AP.SSID[i++] = 0;
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	72fa      	strb	r2, [r7, #11]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
    ptr += 3;                                        		/* Increase pointer by 3, ignore "," part */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3303      	adds	r3, #3
 8000f8c:	60fb      	str	r3, [r7, #12]
    i = 0;                                            		/* Copy till ", which indicates end of password string and start of number */
 8000f8e:	2300      	movs	r3, #0
 8000f90:	72fb      	strb	r3, [r7, #11]
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',')) {
 8000f92:	e00b      	b.n	8000fac <ParseCWSAP+0xc8>
        ESP8266->AP.Pass[i++] = *ptr++;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60fa      	str	r2, [r7, #12]
 8000f9a:	7afa      	ldrb	r2, [r7, #11]
 8000f9c:	1c51      	adds	r1, r2, #1
 8000f9e:	72f9      	strb	r1, [r7, #11]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',')) {
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d008      	beq.n	8000fc6 <ParseCWSAP+0xe2>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b22      	cmp	r3, #34	; 0x22
 8000fba:	d1eb      	bne.n	8000f94 <ParseCWSAP+0xb0>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b2c      	cmp	r3, #44	; 0x2c
 8000fc4:	d1e6      	bne.n	8000f94 <ParseCWSAP+0xb0>
    }
    ESP8266->AP.Pass[i++] = 0;
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	72fa      	strb	r2, [r7, #11]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    ptr += 2;                                        		/* Increase pointer by 2 */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	60fb      	str	r3, [r7, #12]
    ESP8266->AP.Channel = ParseNumber(ptr, &cnt);    		/* Get channel number */
 8000fde:	f107 030a 	add.w	r3, r7, #10
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff fe61 	bl	8000cac <ParseNumber>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    ptr += cnt + 1;                                    		/* Increase pointer and comma */
 8000ff4:	7abb      	ldrb	r3, [r7, #10]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
    ESP8266->AP.Ecn = (ESP8266_Ecn_t)ParseNumber(ptr, &cnt);    /* Get ECN value */
 8000ffe:	f107 030a 	add.w	r3, r7, #10
 8001002:	4619      	mov	r1, r3
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff fe51 	bl	8000cac <ParseNumber>
 800100a:	4603      	mov	r3, r0
 800100c:	b2da      	uxtb	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    ptr += cnt + 1;                                    		/* Increase pointer and comma */
 8001014:	7abb      	ldrb	r3, [r7, #10]
 8001016:	3301      	adds	r3, #1
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
    ESP8266->AP.MaxConnections = ParseNumber(ptr, &cnt);    /* Get max connections value */
 800101e:	f107 030a 	add.w	r3, r7, #10
 8001022:	4619      	mov	r1, r3
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff fe41 	bl	8000cac <ParseNumber>
 800102a:	4603      	mov	r3, r0
 800102c:	b2da      	uxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    ptr += cnt + 1;                                    		/* Increase pointer and comma */
 8001034:	7abb      	ldrb	r3, [r7, #10]
 8001036:	3301      	adds	r3, #1
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
    ESP8266->AP.Hidden = ParseNumber(ptr, &cnt);    		/* Get hidden value */
 800103e:	f107 030a 	add.w	r3, r7, #10
 8001042:	4619      	mov	r1, r3
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f7ff fe31 	bl	8000cac <ParseNumber>
 800104a:	4603      	mov	r3, r0
 800104c:	b2da      	uxtb	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 8001054:	e000      	b.n	8001058 <ParseCWSAP+0x174>
        return;
 8001056:	bf00      	nop
}
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <ParseCIPSTA>:
    ESP8266_APs.Count++;                            		/* Increase count */
}
#endif

static
void ParseCIPSTA(ESP8266_t* ESP8266, char* Buffer) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
    uint8_t pos, s;
    uint8_t command = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	737b      	strb	r3, [r7, #13]
    
    /* Get positions */
    if (strncmp("+CIPSTA_CUR:ip", Buffer, 14) == 0) {    
 800106e:	220e      	movs	r2, #14
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4896      	ldr	r0, [pc, #600]	; (80012cc <ParseCIPSTA+0x26c>)
 8001074:	f00f fd46 	bl	8010b04 <strncmp>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <ParseCIPSTA+0x2c>
        pos = 14;
 800107e:	230e      	movs	r3, #14
 8001080:	73fb      	strb	r3, [r7, #15]
        s = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 8001086:	2316      	movs	r3, #22
 8001088:	737b      	strb	r3, [r7, #13]
 800108a:	e098      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA_CUR:netmask", Buffer, 19) == 0) {
 800108c:	2213      	movs	r2, #19
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	488f      	ldr	r0, [pc, #572]	; (80012d0 <ParseCIPSTA+0x270>)
 8001092:	f00f fd37 	bl	8010b04 <strncmp>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d106      	bne.n	80010aa <ParseCIPSTA+0x4a>
        pos = 19;
 800109c:	2313      	movs	r3, #19
 800109e:	73fb      	strb	r3, [r7, #15]
        s = 2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 80010a4:	2316      	movs	r3, #22
 80010a6:	737b      	strb	r3, [r7, #13]
 80010a8:	e089      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA_CUR:gateway", Buffer, 19) == 0) {
 80010aa:	2213      	movs	r2, #19
 80010ac:	6839      	ldr	r1, [r7, #0]
 80010ae:	4889      	ldr	r0, [pc, #548]	; (80012d4 <ParseCIPSTA+0x274>)
 80010b0:	f00f fd28 	bl	8010b04 <strncmp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <ParseCIPSTA+0x68>
        pos = 19;
 80010ba:	2313      	movs	r3, #19
 80010bc:	73fb      	strb	r3, [r7, #15]
        s = 3;
 80010be:	2303      	movs	r3, #3
 80010c0:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 80010c2:	2316      	movs	r3, #22
 80010c4:	737b      	strb	r3, [r7, #13]
 80010c6:	e07a      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA:ip", Buffer, 10) == 0) {
 80010c8:	220a      	movs	r2, #10
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	4882      	ldr	r0, [pc, #520]	; (80012d8 <ParseCIPSTA+0x278>)
 80010ce:	f00f fd19 	bl	8010b04 <strncmp>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <ParseCIPSTA+0x86>
        pos = 10;
 80010d8:	230a      	movs	r3, #10
 80010da:	73fb      	strb	r3, [r7, #15]
        s = 1;
 80010dc:	2301      	movs	r3, #1
 80010de:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 80010e0:	2316      	movs	r3, #22
 80010e2:	737b      	strb	r3, [r7, #13]
 80010e4:	e06b      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA:netmask", Buffer, 15) == 0) {
 80010e6:	220f      	movs	r2, #15
 80010e8:	6839      	ldr	r1, [r7, #0]
 80010ea:	487c      	ldr	r0, [pc, #496]	; (80012dc <ParseCIPSTA+0x27c>)
 80010ec:	f00f fd0a 	bl	8010b04 <strncmp>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d106      	bne.n	8001104 <ParseCIPSTA+0xa4>
        pos = 15;
 80010f6:	230f      	movs	r3, #15
 80010f8:	73fb      	strb	r3, [r7, #15]
        s = 2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 80010fe:	2316      	movs	r3, #22
 8001100:	737b      	strb	r3, [r7, #13]
 8001102:	e05c      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA:gateway", Buffer, 15) == 0) {
 8001104:	220f      	movs	r2, #15
 8001106:	6839      	ldr	r1, [r7, #0]
 8001108:	4875      	ldr	r0, [pc, #468]	; (80012e0 <ParseCIPSTA+0x280>)
 800110a:	f00f fcfb 	bl	8010b04 <strncmp>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d106      	bne.n	8001122 <ParseCIPSTA+0xc2>
        pos = 15;
 8001114:	230f      	movs	r3, #15
 8001116:	73fb      	strb	r3, [r7, #15]
        s = 3;
 8001118:	2303      	movs	r3, #3
 800111a:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 800111c:	2316      	movs	r3, #22
 800111e:	737b      	strb	r3, [r7, #13]
 8001120:	e04d      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP_CUR:ip", Buffer, 13) == 0) {
 8001122:	220d      	movs	r2, #13
 8001124:	6839      	ldr	r1, [r7, #0]
 8001126:	486f      	ldr	r0, [pc, #444]	; (80012e4 <ParseCIPSTA+0x284>)
 8001128:	f00f fcec 	bl	8010b04 <strncmp>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d104      	bne.n	800113c <ParseCIPSTA+0xdc>
        pos = 13;
 8001132:	230d      	movs	r3, #13
 8001134:	73fb      	strb	r3, [r7, #15]
        s = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	73bb      	strb	r3, [r7, #14]
 800113a:	e040      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP_CUR:netmask", Buffer, 18) == 0) {
 800113c:	2212      	movs	r2, #18
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	4869      	ldr	r0, [pc, #420]	; (80012e8 <ParseCIPSTA+0x288>)
 8001142:	f00f fcdf 	bl	8010b04 <strncmp>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d104      	bne.n	8001156 <ParseCIPSTA+0xf6>
        pos = 18;
 800114c:	2312      	movs	r3, #18
 800114e:	73fb      	strb	r3, [r7, #15]
        s = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	73bb      	strb	r3, [r7, #14]
 8001154:	e033      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP_CUR:gateway", Buffer, 18) == 0) {
 8001156:	2212      	movs	r2, #18
 8001158:	6839      	ldr	r1, [r7, #0]
 800115a:	4864      	ldr	r0, [pc, #400]	; (80012ec <ParseCIPSTA+0x28c>)
 800115c:	f00f fcd2 	bl	8010b04 <strncmp>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d104      	bne.n	8001170 <ParseCIPSTA+0x110>
        pos = 18;
 8001166:	2312      	movs	r3, #18
 8001168:	73fb      	strb	r3, [r7, #15]
        s = 3;
 800116a:	2303      	movs	r3, #3
 800116c:	73bb      	strb	r3, [r7, #14]
 800116e:	e026      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP:ip", Buffer, 9) == 0) {
 8001170:	2209      	movs	r2, #9
 8001172:	6839      	ldr	r1, [r7, #0]
 8001174:	485e      	ldr	r0, [pc, #376]	; (80012f0 <ParseCIPSTA+0x290>)
 8001176:	f00f fcc5 	bl	8010b04 <strncmp>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d104      	bne.n	800118a <ParseCIPSTA+0x12a>
        pos = 9;
 8001180:	2309      	movs	r3, #9
 8001182:	73fb      	strb	r3, [r7, #15]
        s = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	73bb      	strb	r3, [r7, #14]
 8001188:	e019      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP:netmask", Buffer, 14) == 0) {
 800118a:	220e      	movs	r2, #14
 800118c:	6839      	ldr	r1, [r7, #0]
 800118e:	4859      	ldr	r0, [pc, #356]	; (80012f4 <ParseCIPSTA+0x294>)
 8001190:	f00f fcb8 	bl	8010b04 <strncmp>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d104      	bne.n	80011a4 <ParseCIPSTA+0x144>
        pos = 14;
 800119a:	230e      	movs	r3, #14
 800119c:	73fb      	strb	r3, [r7, #15]
        s = 2;
 800119e:	2302      	movs	r3, #2
 80011a0:	73bb      	strb	r3, [r7, #14]
 80011a2:	e00c      	b.n	80011be <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP:gateway", Buffer, 14) == 0) {
 80011a4:	220e      	movs	r2, #14
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	4853      	ldr	r0, [pc, #332]	; (80012f8 <ParseCIPSTA+0x298>)
 80011aa:	f00f fcab 	bl	8010b04 <strncmp>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f040 8087 	bne.w	80012c4 <ParseCIPSTA+0x264>
        pos = 14;
 80011b6:	230e      	movs	r3, #14
 80011b8:	73fb      	strb	r3, [r7, #15]
        s = 3;
 80011ba:	2303      	movs	r3, #3
 80011bc:	73bb      	strb	r3, [r7, #14]
    } else {
        return;                                        		/* This should never happen */
    }
    
    if (command == ESP8266_COMMAND_CIPSTA) {        		/* Copy content */
 80011be:	7b7b      	ldrb	r3, [r7, #13]
 80011c0:	2b16      	cmp	r3, #22
 80011c2:	d13e      	bne.n	8001242 <ParseCIPSTA+0x1e2>
        switch (s) {
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d016      	beq.n	80011f8 <ParseCIPSTA+0x198>
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d027      	beq.n	800121e <ParseCIPSTA+0x1be>
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d000      	beq.n	80011d4 <ParseCIPSTA+0x174>
                break;
            case 3:
                ParseIP(&Buffer[pos + 2], ESP8266->STAGateway, NULL);   /* Parse gateway string */
                ESP8266->Flags.F.STAGatewayIsSet = 1;
                break;
            default: break;
 80011d2:	e078      	b.n	80012c6 <ParseCIPSTA+0x266>
                ParseIP(&Buffer[pos + 2], ESP8266->STAIP, NULL);    /* Parse IP string */
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	3302      	adds	r3, #2
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	18d0      	adds	r0, r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	33f8      	adds	r3, #248	; 0xf8
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fde6 	bl	8000db4 <ParseIP>
                ESP8266->Flags.F.STAIPIsSet = 1;
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 80011f6:	e066      	b.n	80012c6 <ParseCIPSTA+0x266>
                ParseIP(&Buffer[pos + 2], ESP8266->STANetmask, NULL);   /* Parse netmask string */
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	3302      	adds	r3, #2
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	18d0      	adds	r0, r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fdd3 	bl	8000db4 <ParseIP>
                ESP8266->Flags.F.STANetmaskIsSet = 1;
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 800121c:	e053      	b.n	80012c6 <ParseCIPSTA+0x266>
                ParseIP(&Buffer[pos + 2], ESP8266->STAGateway, NULL);   /* Parse gateway string */
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	3302      	adds	r3, #2
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	18d0      	adds	r0, r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	33fc      	adds	r3, #252	; 0xfc
 800122a:	2200      	movs	r2, #0
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fdc1 	bl	8000db4 <ParseIP>
                ESP8266->Flags.F.STAGatewayIsSet = 1;
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 8001240:	e041      	b.n	80012c6 <ParseCIPSTA+0x266>
        }
    } else {
        switch (s) {
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d017      	beq.n	8001278 <ParseCIPSTA+0x218>
 8001248:	2b03      	cmp	r3, #3
 800124a:	d028      	beq.n	800129e <ParseCIPSTA+0x23e>
 800124c:	2b01      	cmp	r3, #1
 800124e:	d000      	beq.n	8001252 <ParseCIPSTA+0x1f2>
                break;
            case 3:
                ParseIP(&Buffer[pos + 2], ESP8266->APGateway, NULL);    /* Parse gateway string */
                ESP8266->Flags.F.APGatewayIsSet = 1;
                break;
            default: break;
 8001250:	e039      	b.n	80012c6 <ParseCIPSTA+0x266>
                ParseIP(&Buffer[pos + 2], ESP8266->APIP, NULL);	/* Parse IP string */
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	3302      	adds	r3, #2
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	18d0      	adds	r0, r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fda6 	bl	8000db4 <ParseIP>
                ESP8266->Flags.F.APIPIsSet = 1;
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 8001276:	e026      	b.n	80012c6 <ParseCIPSTA+0x266>
                ParseIP(&Buffer[pos + 2], ESP8266->APNetmask, NULL);    /* Parse netmask string */
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3302      	adds	r3, #2
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	18d0      	adds	r0, r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8001286:	2200      	movs	r2, #0
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fd93 	bl	8000db4 <ParseIP>
                ESP8266->Flags.F.APNetmaskIsSet = 1;
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 8001294:	f043 0320 	orr.w	r3, r3, #32
 8001298:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 800129c:	e013      	b.n	80012c6 <ParseCIPSTA+0x266>
                ParseIP(&Buffer[pos + 2], ESP8266->APGateway, NULL);    /* Parse gateway string */
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	3302      	adds	r3, #2
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	18d0      	adds	r0, r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fd80 	bl	8000db4 <ParseIP>
                ESP8266->Flags.F.APGatewayIsSet = 1;
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80012ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012be:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 80012c2:	e000      	b.n	80012c6 <ParseCIPSTA+0x266>
        return;                                        		/* This should never happen */
 80012c4:	bf00      	nop
        }        
    }
}
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	08011270 	.word	0x08011270
 80012d0:	08011280 	.word	0x08011280
 80012d4:	08011294 	.word	0x08011294
 80012d8:	080112a8 	.word	0x080112a8
 80012dc:	080112b4 	.word	0x080112b4
 80012e0:	080112c4 	.word	0x080112c4
 80012e4:	080112d4 	.word	0x080112d4
 80012e8:	080112e4 	.word	0x080112e4
 80012ec:	080112f8 	.word	0x080112f8
 80012f0:	0801130c 	.word	0x0801130c
 80012f4:	08011318 	.word	0x08011318
 80012f8:	08011328 	.word	0x08011328

080012fc <ParseCWLIF>:

#if ESP8266_USE_CONNECTED_STATIONS == 1
static
void ParseCWLIF(ESP8266_t* ESP8266, char* Buffer) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
    uint8_t cnt;
    if (ESP8266->ConnectedStations.Count >= ESP8266_MAX_CONNECTEDSTATIONS) {	/* Check if memory available */
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 800130c:	2b09      	cmp	r3, #9
 800130e:	d830      	bhi.n	8001372 <ParseCWLIF+0x76>
        return;
    }
    
    ParseIP(Buffer, ESP8266->ConnectedStations.Stations[ESP8266->ConnectedStations.Count].IP, &cnt);    /* Parse IP */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8001316:	461a      	mov	r2, r3
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	3304      	adds	r3, #4
 800132a:	f107 020f 	add.w	r2, r7, #15
 800132e:	4619      	mov	r1, r3
 8001330:	6838      	ldr	r0, [r7, #0]
 8001332:	f7ff fd3f 	bl	8000db4 <ParseIP>
    ParseMAC(&Buffer[cnt + 1], ESP8266->ConnectedStations.Stations[ESP8266->ConnectedStations.Count].MAC, NULL);    /* Parse MAC */
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	3301      	adds	r3, #1
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	18d0      	adds	r0, r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8001344:	461a      	mov	r2, r3
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	3308      	adds	r3, #8
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fd80 	bl	8000e60 <ParseMAC>
    ESP8266->ConnectedStations.Count++;                    	/* Increase counter */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8001366:	3301      	adds	r3, #1
 8001368:	b2da      	uxtb	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 8001370:	e000      	b.n	8001374 <ParseCWLIF+0x78>
        return;
 8001372:	bf00      	nop
}
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <ParseCWJAP>:
#endif

static
void ParseCWJAP(ESP8266_t* ESP8266, char* Buffer) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
    char* ptr = Buffer;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	60fb      	str	r3, [r7, #12]
    uint8_t i, cnt;
    
    if (!strstr(Buffer, "+CWJAP_")) {                		/* Check for existance */
 800138a:	493b      	ldr	r1, [pc, #236]	; (8001478 <ParseCWJAP+0xfc>)
 800138c:	6838      	ldr	r0, [r7, #0]
 800138e:	f00f fbcb 	bl	8010b28 <strstr>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d069      	beq.n	800146c <ParseCWJAP+0xf0>
        return;
    }
    while (*ptr && *ptr != '"') {                    		/* Find first " character */
 8001398:	e002      	b.n	80013a0 <ParseCWJAP+0x24>
        ptr++;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
    while (*ptr && *ptr != '"') {                    		/* Find first " character */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <ParseCWJAP+0x34>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b22      	cmp	r3, #34	; 0x22
 80013ae:	d1f4      	bne.n	800139a <ParseCWJAP+0x1e>
    }
    if (!*ptr) {                                    		/* Check if zero detected */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d05b      	beq.n	8001470 <ParseCWJAP+0xf4>
        return;
    }
    ptr++;                                            		/* Remove first " for SSID */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3301      	adds	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
    i = 0;                                            		/* Parse SSID part */
 80013be:	2300      	movs	r3, #0
 80013c0:	72fb      	strb	r3, [r7, #11]
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',' || *(ptr + 2) != '"')) {
 80013c2:	e00b      	b.n	80013dc <ParseCWJAP+0x60>
        ESP8266->ConnectedWifi.SSID[i++] = *ptr++;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60fa      	str	r2, [r7, #12]
 80013ca:	7afa      	ldrb	r2, [r7, #11]
 80013cc:	1c51      	adds	r1, r2, #1
 80013ce:	72f9      	strb	r1, [r7, #11]
 80013d0:	4611      	mov	r1, r2
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',' || *(ptr + 2) != '"')) {
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00d      	beq.n	8001400 <ParseCWJAP+0x84>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b22      	cmp	r3, #34	; 0x22
 80013ea:	d1eb      	bne.n	80013c4 <ParseCWJAP+0x48>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b2c      	cmp	r3, #44	; 0x2c
 80013f4:	d1e6      	bne.n	80013c4 <ParseCWJAP+0x48>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3302      	adds	r3, #2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b22      	cmp	r3, #34	; 0x22
 80013fe:	d1e1      	bne.n	80013c4 <ParseCWJAP+0x48>
    }
    ESP8266->ConnectedWifi.SSID[i++] = 0;
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	72fa      	strb	r2, [r7, #11]
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
    ptr += 3;                                        		/* Increase pointer by 3, ignore "," part */
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3303      	adds	r3, #3
 8001416:	60fb      	str	r3, [r7, #12]
    ParseMAC(ptr, ESP8266->ConnectedWifi.MAC, &cnt);    	/* Get MAC */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800141e:	f107 020a 	add.w	r2, r7, #10
 8001422:	4619      	mov	r1, r3
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff fd1b 	bl	8000e60 <ParseMAC>
    ptr += cnt + 2;                                    		/* Increase counter by elements in MAC address and ", part */
 800142a:	7abb      	ldrb	r3, [r7, #10]
 800142c:	3302      	adds	r3, #2
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
    ESP8266->ConnectedWifi.Channel = ParseNumber(ptr, &cnt);	/* Get channel */
 8001434:	f107 030a 	add.w	r3, r7, #10
 8001438:	4619      	mov	r1, r3
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7ff fc36 	bl	8000cac <ParseNumber>
 8001440:	4603      	mov	r3, r0
 8001442:	b2da      	uxtb	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    ptr += cnt + 1;                                    		/* Increase position */
 800144a:	7abb      	ldrb	r3, [r7, #10]
 800144c:	3301      	adds	r3, #1
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
    ESP8266->ConnectedWifi.RSSI = ParseNumber(ptr, &cnt);    /* Get RSSI */
 8001454:	f107 030a 	add.w	r3, r7, #10
 8001458:	4619      	mov	r1, r3
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff fc26 	bl	8000cac <ParseNumber>
 8001460:	4603      	mov	r3, r0
 8001462:	b21a      	sxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
 800146a:	e002      	b.n	8001472 <ParseCWJAP+0xf6>
        return;
 800146c:	bf00      	nop
 800146e:	e000      	b.n	8001472 <ParseCWJAP+0xf6>
        return;
 8001470:	bf00      	nop
}
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	08011338 	.word	0x08011338

0800147c <SendCommand>:

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	460b      	mov	r3, r1
 800148a:	72fb      	strb	r3, [r7, #11]
    ESP8266_CHECK_IDLE(ESP8266);                    		/* Check idle mode */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <SendCommand+0x2a>
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f001 fa73 	bl	8002980 <ESP8266_Update>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2206      	movs	r2, #6
 800149e:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80014a2:	2306      	movs	r3, #6
 80014a4:	e020      	b.n	80014e8 <SendCommand+0x6c>
    
    ESP8266->ActiveCommand = Command;                		/* Save current active command */
 80014a6:	7afa      	ldrb	r2, [r7, #11]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	605a      	str	r2, [r3, #4]
    ESP8266->ActiveCommandResponse = (char *)StartRespond;	/* Save current active command response */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	609a      	str	r2, [r3, #8]

    if (Command == ESP8266_COMMAND_UART) {            		/* Clear buffer */
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	2b11      	cmp	r3, #17
 80014b6:	d102      	bne.n	80014be <SendCommand+0x42>
        BUFFER_Reset(&USART_Buffer);                		/* Reset USART buffer */
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <SendCommand+0x74>)
 80014ba:	f7ff fa46 	bl	800094a <BUFFER_Reset>
    }
    
    if (CommandStr != NULL) {                        		/* Send command if valid pointer */
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <SendCommand+0x5a>
        ESP8266_USARTSENDSTRING(CommandStr);        		/* Send command to ESP8266 device */
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7fe fe8d 	bl	80001e4 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f001 febd 	bl	8003250 <ESP8266_LL_USARTSend>
    }
    ESP8266->StartTime = ESP8266->Time;                		/* Set command start time */
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	60da      	str	r2, [r3, #12]
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);        		/* Return OK */
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200017a4 	.word	0x200017a4

080014f4 <EscapeStringAndSend>:
    *str_ptr = 0;                                    		/* Add zero to the end */
    return buff;                                    		/* Return buffer */
}

static
void EscapeStringAndSend(char* str) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    char special = '\\';
 80014fc:	235c      	movs	r3, #92	; 0x5c
 80014fe:	73fb      	strb	r3, [r7, #15]
    
    while (*str) {                                    		/* Go through string */
 8001500:	e018      	b.n	8001534 <EscapeStringAndSend+0x40>
        if (*str == ',' || *str == '"' || *str == '\\') {	/* Check for special character */    
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b2c      	cmp	r3, #44	; 0x2c
 8001508:	d007      	beq.n	800151a <EscapeStringAndSend+0x26>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b22      	cmp	r3, #34	; 0x22
 8001510:	d003      	beq.n	800151a <EscapeStringAndSend+0x26>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b5c      	cmp	r3, #92	; 0x5c
 8001518:	d105      	bne.n	8001526 <EscapeStringAndSend+0x32>
            ESP8266_USARTSENDCHAR(&special);        		/* Send special character */
 800151a:	f107 030f 	add.w	r3, r7, #15
 800151e:	2101      	movs	r1, #1
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fe95 	bl	8003250 <ESP8266_LL_USARTSend>
        }
        ESP8266_USARTSENDCHAR(str++);                		/* Send character */
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fe8e 	bl	8003250 <ESP8266_LL_USARTSend>
    while (*str) {                                    		/* Go through string */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e2      	bne.n	8001502 <EscapeStringAndSend+0xe>
    }
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <CallConnectionCallbacks>:
    *str_ptr = 0;                                    		/* Add zero to the end */
    return buff;                                    		/* Return buffer */
}

static
void CallConnectionCallbacks(ESP8266_t* ESP8266) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    uint8_t conn_number;
    
    for (conn_number = 0; conn_number < ESP8266_MAX_CONNECTIONS; conn_number++) {	/* Check if there are any pending data to be sent to connection */
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e086      	b.n	8001660 <CallConnectionCallbacks+0x11c>
        if (ESP8266->Connection[conn_number].Flags.F.Active && ESP8266->Connection[conn_number].Flags.F.CallDataReceived) {	/* We must call function for received data */
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	212c      	movs	r1, #44	; 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	3340      	adds	r3, #64	; 0x40
 8001560:	791b      	ldrb	r3, [r3, #4]
 8001562:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d076      	beq.n	800165a <CallConnectionCallbacks+0x116>
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	212c      	movs	r1, #44	; 0x2c
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	4413      	add	r3, r2
 8001578:	3340      	adds	r3, #64	; 0x40
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d069      	beq.n	800165a <CallConnectionCallbacks+0x116>
            if (!ESP8266->Connection[conn_number].Flags.F.Client && ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE) {	/* In case we are server, we must be idle to call functions */
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	212c      	movs	r1, #44	; 0x2c
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	3340      	adds	r3, #64	; 0x40
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d103      	bne.n	80015a8 <CallConnectionCallbacks+0x64>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d157      	bne.n	8001658 <CallConnectionCallbacks+0x114>
                continue;
            }
            ESP8266->Connection[conn_number].Flags.F.CallDataReceived = 0;    /* Clear flag */
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	212c      	movs	r1, #44	; 0x2c
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80015b8:	7913      	ldrb	r3, [r2, #4]
 80015ba:	f36f 03c3 	bfc	r3, #3, #1
 80015be:	7113      	strb	r3, [r2, #4]
            ESP8266->Connection[conn_number].Data[ESP8266->Connection[conn_number].DataSize] = 0;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	212c      	movs	r1, #44	; 0x2c
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	3330      	adds	r3, #48	; 0x30
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	202c      	movs	r0, #44	; 0x2c
 80015d6:	fb00 f202 	mul.w	r2, r0, r2
 80015da:	440a      	add	r2, r1
 80015dc:	3234      	adds	r2, #52	; 0x34
 80015de:	8812      	ldrh	r2, [r2, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
            
            if (ESP8266->Connection[conn_number].Flags.F.Client) {    /* Call user function according to connection type */
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	212c      	movs	r1, #44	; 0x2c
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	3340      	adds	r3, #64	; 0x40
 80015f4:	791b      	ldrb	r3, [r3, #4]
 80015f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d015      	beq.n	800162c <CallConnectionCallbacks+0xe8>
                ESP8266_Callback_ClientConnectionDataReceived(ESP8266, &ESP8266->Connection[conn_number], ESP8266->Connection[conn_number].Data);	/* Client mode */
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	222c      	movs	r2, #44	; 0x2c
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	3318      	adds	r3, #24
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	1d18      	adds	r0, r3, #4
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	212c      	movs	r1, #44	; 0x2c
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	3330      	adds	r3, #48	; 0x30
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4601      	mov	r1, r0
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f002 f97b 	bl	8003920 <ESP8266_Callback_ClientConnectionDataReceived>
 800162a:	e016      	b.n	800165a <CallConnectionCallbacks+0x116>
            } else {
                ESP8266_Callback_ServerConnectionDataReceived(ESP8266, &ESP8266->Connection[conn_number], ESP8266->Connection[conn_number].Data);	/* Server mode */
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	222c      	movs	r2, #44	; 0x2c
 8001630:	fb02 f303 	mul.w	r3, r2, r3
 8001634:	3318      	adds	r3, #24
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	1d18      	adds	r0, r3, #4
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3330      	adds	r3, #48	; 0x30
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4601      	mov	r1, r0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f001 fdb7 	bl	80031c4 <ESP8266_Callback_ServerConnectionDataReceived>
 8001656:	e000      	b.n	800165a <CallConnectionCallbacks+0x116>
                continue;
 8001658:	bf00      	nop
    for (conn_number = 0; conn_number < ESP8266_MAX_CONNECTIONS; conn_number++) {	/* Check if there are any pending data to be sent to connection */
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	3301      	adds	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	2b04      	cmp	r3, #4
 8001664:	f67f af75 	bls.w	8001552 <CallConnectionCallbacks+0xe>
            }
        }
    }
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <ProcessSendData>:

static
void ProcessSendData(ESP8266_t* ESP8266) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    uint16_t len, max_buff = 2046;
 8001678:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800167c:	81bb      	strh	r3, [r7, #12]
    ESP8266_Connection_t* Connection = ESP8266->LastConnection;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001684:	60bb      	str	r3, [r7, #8]
    
    ESP8266->Flags.F.WaitForWrapper = 0;            		/* Wrapper was found */
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 800168c:	f36f 0300 	bfc	r3, #0, #1
 8001690:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
    ESP8266->ActiveCommand = ESP8266_COMMAND_SENDDATA;    	/* Go to SENDDATA command as active */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	221d      	movs	r2, #29
 8001698:	605a      	str	r2, [r3, #4]
    
    if (ESP8266_CONNECTION_BUFFER_SIZE < 2046) {    		/* Calculate maximal buffer size */
        max_buff = ESP8266_CONNECTION_BUFFER_SIZE;    		/* Use maximal possible buffer size */
    }
    
    if (Connection->Flags.F.Client) {                		/* Get data from user */
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <ProcessSendData+0x4e>
        len = ESP8266_Callback_ClientConnectionSendData(ESP8266, Connection, Connection->Data, max_buff);   /* Get data as client */
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	89bb      	ldrh	r3, [r7, #12]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f002 f910 	bl	80038d8 <ESP8266_Callback_ClientConnectionSendData>
 80016b8:	4603      	mov	r3, r0
 80016ba:	81fb      	strh	r3, [r7, #14]
 80016bc:	e008      	b.n	80016d0 <ProcessSendData+0x60>
    } else {
        len = ESP8266_Callback_ServerConnectionSendData(ESP8266, Connection, Connection->Data, max_buff);   /* Get data as server */
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	89bb      	ldrh	r3, [r7, #12]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f001 fd88 	bl	80031dc <ESP8266_Callback_ServerConnectionSendData>
 80016cc:	4603      	mov	r3, r0
 80016ce:	81fb      	strh	r3, [r7, #14]
    }
    
    if (len > max_buff) {                            		/* Check for input data */
 80016d0:	89fa      	ldrh	r2, [r7, #14]
 80016d2:	89bb      	ldrh	r3, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d901      	bls.n	80016dc <ProcessSendData+0x6c>
        len = max_buff;
 80016d8:	89bb      	ldrh	r3, [r7, #12]
 80016da:	81fb      	strh	r3, [r7, #14]
    }
    if (len > 0) {                                		    /* If data valid */
 80016dc:	89fb      	ldrh	r3, [r7, #14]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00e      	beq.n	8001700 <ProcessSendData+0x90>
        ESP8266_LL_USARTSend((uint8_t *)Connection->Data, len); /* Send data */
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	89fa      	ldrh	r2, [r7, #14]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f001 fdb0 	bl	8003250 <ESP8266_LL_USARTSend>
        ESP8266->TotalBytesSent += len;            		    /* Increase number of bytes sent */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 80016f6:	89fb      	ldrh	r3, [r7, #14]
 80016f8:	441a      	add	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    }
    ESP8266_LL_USARTSend((uint8_t *)"\\0", 2);        		/* Send zero at the end even if data are not valid = stop sending data to module */
 8001700:	2102      	movs	r1, #2
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <ProcessSendData+0xb0>)
 8001704:	f001 fda4 	bl	8003250 <ESP8266_LL_USARTSend>
    Connection->Flags.F.WaitingSentRespond = 1;        		/* Set flag as data sent we are now waiting for response */
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	08011340 	.word	0x08011340

08001724 <ESP8266_SetMux>:

static
ESP8266_Result_t ESP8266_SetMux(ESP8266_t* ESP8266, uint8_t mux) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
    char m = (char) mux + '0';
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	3330      	adds	r3, #48	; 0x30
 8001734:	b2db      	uxtb	r3, r3
 8001736:	73fb      	strb	r3, [r7, #15]
    
    ESP8266_CHECK_IDLE(ESP8266);                            /* Check idle */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <ESP8266_SetMux+0x2e>
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f001 f91d 	bl	8002980 <ESP8266_Update>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2206      	movs	r2, #6
 800174a:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 800174e:	2306      	movs	r3, #6
 8001750:	e030      	b.n	80017b4 <ESP8266_SetMux+0x90>
    
    ESP8266_USARTSENDSTRING("AT+CIPMUX=");                  /* Format command and send */
 8001752:	210a      	movs	r1, #10
 8001754:	4819      	ldr	r0, [pc, #100]	; (80017bc <ESP8266_SetMux+0x98>)
 8001756:	f001 fd7b 	bl	8003250 <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDCHAR(&m);
 800175a:	f107 030f 	add.w	r3, r7, #15
 800175e:	2101      	movs	r1, #1
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fd75 	bl	8003250 <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDSTRING(ESP8266_CRLF);
 8001766:	2102      	movs	r1, #2
 8001768:	4815      	ldr	r0, [pc, #84]	; (80017c0 <ESP8266_SetMux+0x9c>)
 800176a:	f001 fd71 	bl	8003250 <ESP8266_LL_USARTSend>
    if (SendCommand(ESP8266, ESP8266_COMMAND_CIPMUX, NULL, NULL) != ESP_OK) {   /* Send command */
 800176e:	2300      	movs	r3, #0
 8001770:	2200      	movs	r2, #0
 8001772:	210b      	movs	r1, #11
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fe81 	bl	800147c <SendCommand>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <ESP8266_SetMux+0x64>
        return ESP8266->Result;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 8001786:	e015      	b.n	80017b4 <ESP8266_SetMux+0x90>
    }
    ESP8266_WaitReady(ESP8266);                             /* Wait till command end */
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f001 fb8f 	bl	8002eac <ESP8266_WaitReady>
    if (!ESP8266->Flags.F.LastOperationStatus) {            /* Check last status */
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d105      	bne.n	80017aa <ESP8266_SetMux+0x86>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);       /* Return error */
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80017a6:	2301      	movs	r3, #1
 80017a8:	e004      	b.n	80017b4 <ESP8266_SetMux+0x90>
    }
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);              /* Return OK */
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	08011344 	.word	0x08011344
 80017c0:	08011350 	.word	0x08011350

080017c4 <ESP8266_Setdinfo>:

static
ESP8266_Result_t ESP8266_Setdinfo(ESP8266_t* ESP8266, uint8_t info) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	70fb      	strb	r3, [r7, #3]
    char i = (char) info + '0';
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	3330      	adds	r3, #48	; 0x30
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	73fb      	strb	r3, [r7, #15]
    ESP8266_CHECK_IDLE(ESP8266);                            /* Check idle */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <ESP8266_Setdinfo+0x2e>
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f001 f8cd 	bl	8002980 <ESP8266_Update>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2206      	movs	r2, #6
 80017ea:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80017ee:	2306      	movs	r3, #6
 80017f0:	e030      	b.n	8001854 <ESP8266_Setdinfo+0x90>
    
    ESP8266_USARTSENDSTRING("AT+CIPDINFO=");                /* Format command and send */
 80017f2:	210c      	movs	r1, #12
 80017f4:	4819      	ldr	r0, [pc, #100]	; (800185c <ESP8266_Setdinfo+0x98>)
 80017f6:	f001 fd2b 	bl	8003250 <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDCHAR(&i);
 80017fa:	f107 030f 	add.w	r3, r7, #15
 80017fe:	2101      	movs	r1, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fd25 	bl	8003250 <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDSTRING(ESP8266_CRLF);
 8001806:	2102      	movs	r1, #2
 8001808:	4815      	ldr	r0, [pc, #84]	; (8001860 <ESP8266_Setdinfo+0x9c>)
 800180a:	f001 fd21 	bl	8003250 <ESP8266_LL_USARTSend>
    
    if (SendCommand(ESP8266, ESP8266_COMMAND_CIPDINFO, NULL, NULL) != ESP_OK) { /* Send command and wait */
 800180e:	2300      	movs	r3, #0
 8001810:	2200      	movs	r2, #0
 8001812:	2107      	movs	r1, #7
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fe31 	bl	800147c <SendCommand>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <ESP8266_Setdinfo+0x64>
        return ESP8266->Result;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 8001826:	e015      	b.n	8001854 <ESP8266_Setdinfo+0x90>
    }

    ESP8266_WaitReady(ESP8266);                             /* Wait till command end */
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f001 fb3f 	bl	8002eac <ESP8266_WaitReady>
    if (!ESP8266->Flags.F.LastOperationStatus) {            /* Check last status */
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <ESP8266_Setdinfo+0x86>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);       /* Return error */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8001846:	2301      	movs	r3, #1
 8001848:	e004      	b.n	8001854 <ESP8266_Setdinfo+0x90>
    }
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);              /* Return OK */
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	08011354 	.word	0x08011354
 8001860:	08011350 	.word	0x08011350

08001864 <StartClientConnection>:
    const char* name,
    const char* location,
    uint16_t port,
    uint16_t udp_local_port,
    void* user_parameters
) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	460b      	mov	r3, r1
 8001872:	72fb      	strb	r3, [r7, #11]
    int8_t conn = -1;
 8001874:	23ff      	movs	r3, #255	; 0xff
 8001876:	75fb      	strb	r3, [r7, #23]
    uint8_t i = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	75bb      	strb	r3, [r7, #22]
    
    ESP8266_CHECK_IDLE(ESP8266);                    		/* Check IDLE state */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <StartClientConnection+0x32>
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f001 f87b 	bl	8002980 <ESP8266_Update>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2206      	movs	r2, #6
 800188e:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8001892:	2306      	movs	r3, #6
 8001894:	e103      	b.n	8001a9e <StartClientConnection+0x23a>

    i=1;
 8001896:	2301      	movs	r3, #1
 8001898:	75bb      	strb	r3, [r7, #22]
    i=0;
 800189a:	2300      	movs	r3, #0
 800189c:	75bb      	strb	r3, [r7, #22]

    ESP8266_CHECK_WIFICONNECTED(ESP8266);            		/* Check if connected to network */
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d105      	bne.n	80018ba <StartClientConnection+0x56>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2205      	movs	r2, #5
 80018b2:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80018b6:	2305      	movs	r3, #5
 80018b8:	e0f1      	b.n	8001a9e <StartClientConnection+0x23a>
    
    if (type == ESP8266_ConnectionType_SSL) {        		/* Only 1 SSL connection can be active at a time */
 80018ba:	7afb      	ldrb	r3, [r7, #11]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d125      	bne.n	800190c <StartClientConnection+0xa8>
        for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {    	/* Check if any SSL connection exists and is active */
 80018c0:	2300      	movs	r3, #0
 80018c2:	75bb      	strb	r3, [r7, #22]
 80018c4:	e01f      	b.n	8001906 <StartClientConnection+0xa2>
            if (ESP8266->Connection[i].Flags.F.Active && ESP8266->Connection[i].Type == ESP8266_ConnectionType_SSL) {
 80018c6:	7dbb      	ldrb	r3, [r7, #22]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3340      	adds	r3, #64	; 0x40
 80018d4:	791b      	ldrb	r3, [r3, #4]
 80018d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00f      	beq.n	8001900 <StartClientConnection+0x9c>
 80018e0:	7dbb      	ldrb	r3, [r7, #22]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3324      	adds	r3, #36	; 0x24
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d105      	bne.n	8001900 <StartClientConnection+0x9c>
                ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);	/* Return error, SSL connection already exists */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0ce      	b.n	8001a9e <StartClientConnection+0x23a>
        for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {    	/* Check if any SSL connection exists and is active */
 8001900:	7dbb      	ldrb	r3, [r7, #22]
 8001902:	3301      	adds	r3, #1
 8001904:	75bb      	strb	r3, [r7, #22]
 8001906:	7dbb      	ldrb	r3, [r7, #22]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d9dc      	bls.n	80018c6 <StartClientConnection+0x62>
            }
        }
    }
    
    for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {    		/* Find available connection */
 800190c:	2300      	movs	r3, #0
 800190e:	75bb      	strb	r3, [r7, #22]
 8001910:	e012      	b.n	8001938 <StartClientConnection+0xd4>
        if (!ESP8266->Connection[i].Flags.F.Active) {
 8001912:	7dbb      	ldrb	r3, [r7, #22]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	3340      	adds	r3, #64	; 0x40
 8001920:	791b      	ldrb	r3, [r3, #4]
 8001922:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <StartClientConnection+0xce>
            conn = i;                                		/* Save connection and start execution*/
 800192c:	7dbb      	ldrb	r3, [r7, #22]
 800192e:	75fb      	strb	r3, [r7, #23]
            break;
 8001930:	e005      	b.n	800193e <StartClientConnection+0xda>
    for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {    		/* Find available connection */
 8001932:	7dbb      	ldrb	r3, [r7, #22]
 8001934:	3301      	adds	r3, #1
 8001936:	75bb      	strb	r3, [r7, #22]
 8001938:	7dbb      	ldrb	r3, [r7, #22]
 800193a:	2b04      	cmp	r3, #4
 800193c:	d9e9      	bls.n	8001912 <StartClientConnection+0xae>
        }
    }
    if (conn != -1) {                                		/* Try to assign */
 800193e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001946:	f000 80a5 	beq.w	8001a94 <StartClientConnection+0x230>
        char tmp[6];

        conn += '0';                                		/* Go to ASCII number */
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	3330      	adds	r3, #48	; 0x30
 800194e:	b2db      	uxtb	r3, r3
 8001950:	75fb      	strb	r3, [r7, #23]
        ESP8266_USARTSENDSTRING("AT+CIPSTART=\"");    		/* Send separate */
 8001952:	210d      	movs	r1, #13
 8001954:	4854      	ldr	r0, [pc, #336]	; (8001aa8 <StartClientConnection+0x244>)
 8001956:	f001 fc7b 	bl	8003250 <ESP8266_LL_USARTSend>
//        ESP8266_USARTSENDCHAR(&conn);
//        ESP8266_USARTSENDSTRING(",\"");
        ESP8266_USARTSENDSTRING(conn_type);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7fe fc42 	bl	80001e4 <strlen>
 8001960:	4603      	mov	r3, r0
 8001962:	b29b      	uxth	r3, r3
 8001964:	4619      	mov	r1, r3
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f001 fc72 	bl	8003250 <ESP8266_LL_USARTSend>
        ESP8266_USARTSENDSTRING("\",\"");
 800196c:	2103      	movs	r1, #3
 800196e:	484f      	ldr	r0, [pc, #316]	; (8001aac <StartClientConnection+0x248>)
 8001970:	f001 fc6e 	bl	8003250 <ESP8266_LL_USARTSend>
        ESP8266_USARTSENDSTRING(location);
 8001974:	6a38      	ldr	r0, [r7, #32]
 8001976:	f7fe fc35 	bl	80001e4 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29b      	uxth	r3, r3
 800197e:	4619      	mov	r1, r3
 8001980:	6a38      	ldr	r0, [r7, #32]
 8001982:	f001 fc65 	bl	8003250 <ESP8266_LL_USARTSend>
        ESP8266_USARTSENDSTRING("\",");
 8001986:	2102      	movs	r1, #2
 8001988:	4849      	ldr	r0, [pc, #292]	; (8001ab0 <StartClientConnection+0x24c>)
 800198a:	f001 fc61 	bl	8003250 <ESP8266_LL_USARTSend>
        Int2String(tmp, port);                        		/* Format port */
 800198e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f94e 	bl	8000c38 <Int2String>
        ESP8266_USARTSENDSTRING(tmp);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fc1f 	bl	80001e4 <strlen>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 fc4d 	bl	8003250 <ESP8266_LL_USARTSend>
//        if (type == ESP8266_ConnectionType_UDP && udp_local_port > 0) {
//            Int2String(tmp, udp_local_port);       			/* Format local port for UDP */
//            ESP8266_USARTSENDSTRING(",");
//            ESP8266_USARTSENDSTRING(tmp);
//        }
        ESP8266_USARTSENDSTRING("\r\n");
 80019b6:	2102      	movs	r1, #2
 80019b8:	483e      	ldr	r0, [pc, #248]	; (8001ab4 <StartClientConnection+0x250>)
 80019ba:	f001 fc49 	bl	8003250 <ESP8266_LL_USARTSend>
        
        if (SendCommand(ESP8266, ESP8266_COMMAND_CIPSTART, NULL, NULL) != ESP_OK) {	/* Send command */
 80019be:	2300      	movs	r3, #0
 80019c0:	2200      	movs	r2, #0
 80019c2:	210a      	movs	r1, #10
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fd59 	bl	800147c <SendCommand>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <StartClientConnection+0x174>
            return ESP8266->Result;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 80019d6:	e062      	b.n	8001a9e <StartClientConnection+0x23a>
        }
        
        conn -= '0';                                		/* Go back from ASCII number to real number */
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	3b30      	subs	r3, #48	; 0x30
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	75fb      	strb	r3, [r7, #23]
        ESP8266->Connection[i].Flags.F.Active = 1;    		/* We are active */
 80019e0:	7dbb      	ldrb	r3, [r7, #22]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80019f0:	7913      	ldrb	r3, [r2, #4]
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	7113      	strb	r3, [r2, #4]
        ESP8266->Connection[i].Flags.F.Client = 1;   		/* We are in client mode */
 80019f8:	7dbb      	ldrb	r3, [r7, #22]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001a08:	7913      	ldrb	r3, [r2, #4]
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	7113      	strb	r3, [r2, #4]
        ESP8266->Connection[i].Type = type;         		/* Set connection type */
 8001a10:	7dbb      	ldrb	r3, [r7, #22]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	212c      	movs	r1, #44	; 0x2c
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3324      	adds	r3, #36	; 0x24
 8001a1e:	7afa      	ldrb	r2, [r7, #11]
 8001a20:	701a      	strb	r2, [r3, #0]
        ESP8266->Connection[i].TotalBytesReceived = 0;
 8001a22:	7dbb      	ldrb	r3, [r7, #22]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	212c      	movs	r1, #44	; 0x2c
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	332c      	adds	r3, #44	; 0x2c
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
        ESP8266->Connection[i].Number = conn;
 8001a34:	7dbb      	ldrb	r3, [r7, #22]
 8001a36:	7df8      	ldrb	r0, [r7, #23]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	331c      	adds	r3, #28
 8001a44:	4602      	mov	r2, r0
 8001a46:	701a      	strb	r2, [r3, #0]
#if ESP8266_USE_SINGLE_CONNECTION_BUFFER == 1
        ESP8266->Connection[i].Data = ConnectionData;
 8001a48:	7dbb      	ldrb	r3, [r7, #22]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	3330      	adds	r3, #48	; 0x30
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <StartClientConnection+0x254>)
 8001a58:	601a      	str	r2, [r3, #0]
#endif
        ESP8266->StartConnectionSent = i;            		/* Save connection number we have started */
 8001a5a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
    
        ESP8266->Connection[i].Name = (char *)name;    		/* Save name */
 8001a64:	7dbb      	ldrb	r3, [r7, #22]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	333c      	adds	r3, #60	; 0x3c
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
        ESP8266->Connection[i].UserParameters = user_parameters;	/* Save user parameters pointer */
 8001a76:	7dbb      	ldrb	r3, [r7, #22]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	212c      	movs	r1, #44	; 0x2c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	3340      	adds	r3, #64	; 0x40
 8001a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a86:	601a      	str	r2, [r3, #0]
        
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);    		/* Return OK */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8001a90:	2300      	movs	r3, #0
 8001a92:	e004      	b.n	8001a9e <StartClientConnection+0x23a>
    }
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);    		/* Return error */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	08011364 	.word	0x08011364
 8001aac:	08011374 	.word	0x08011374
 8001ab0:	08011378 	.word	0x08011378
 8001ab4:	08011350 	.word	0x08011350
 8001ab8:	200000b8 	.word	0x200000b8

08001abc <ParseReceived>:

static                                                		/* Returns number of remaining (not used) characters in buffer */
uint32_t ParseReceived(ESP8266_t* ESP8266, char* Received, uint16_t bufflen, uint8_t from_usart_buffer) {
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b08d      	sub	sp, #52	; 0x34
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	460b      	mov	r3, r1
 8001acc:	80fb      	strh	r3, [r7, #6]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	717b      	strb	r3, [r7, #5]
    char* ch_ptr;
    uint8_t bytes_cnt;
    uint32_t ipd_ptr = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    ESP8266_Connection_t* Conn;
    
    ESP8266->LastReceivedTime = ESP8266->Time;        		/* Update last activity */
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	615a      	str	r2, [r3, #20]
    if (bufflen == 2 && Received[0] == '\r' && Received[1] == '\n') {	/* Check for empty new line */
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d10b      	bne.n	8001afc <ParseReceived+0x40>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b0d      	cmp	r3, #13
 8001aea:	d107      	bne.n	8001afc <ParseReceived+0x40>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3301      	adds	r3, #1
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b0a      	cmp	r3, #10
 8001af4:	d102      	bne.n	8001afc <ParseReceived+0x40>
        return 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f000 be7b 	b.w	80027f2 <ParseReceived+0xd36>
    }
    
    if (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE && from_usart_buffer) {	/* First check, if any command is active */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d054      	beq.n	8001bae <ParseReceived+0xf2>
 8001b04:	797b      	ldrb	r3, [r7, #5]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d051      	beq.n	8001bae <ParseReceived+0xf2>
        if (                                        		/* Check if string does not belong to this command */
            strcmp(Received, ESP8266_RESPONSE_OK) != 0 &&
 8001b0a:	49b4      	ldr	r1, [pc, #720]	; (8001ddc <ParseReceived+0x320>)
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f7fe fb5f 	bl	80001d0 <strcmp>
 8001b12:	4603      	mov	r3, r0
        if (                                        		/* Check if string does not belong to this command */
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d04a      	beq.n	8001bae <ParseReceived+0xf2>
            strcmp(Received, "SEND OK\r\n") != 0 &&
 8001b18:	49b1      	ldr	r1, [pc, #708]	; (8001de0 <ParseReceived+0x324>)
 8001b1a:	68b8      	ldr	r0, [r7, #8]
 8001b1c:	f7fe fb58 	bl	80001d0 <strcmp>
 8001b20:	4603      	mov	r3, r0
            strcmp(Received, ESP8266_RESPONSE_OK) != 0 &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d043      	beq.n	8001bae <ParseReceived+0xf2>
            strcmp(Received, "SEND FAIL\r\n") != 0 &&
 8001b26:	49af      	ldr	r1, [pc, #700]	; (8001de4 <ParseReceived+0x328>)
 8001b28:	68b8      	ldr	r0, [r7, #8]
 8001b2a:	f7fe fb51 	bl	80001d0 <strcmp>
 8001b2e:	4603      	mov	r3, r0
            strcmp(Received, "SEND OK\r\n") != 0 &&
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d03c      	beq.n	8001bae <ParseReceived+0xf2>
            strcmp(&Received[1], ",CONNECT\r\n") != 0 &&
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	3301      	adds	r3, #1
 8001b38:	49ab      	ldr	r1, [pc, #684]	; (8001de8 <ParseReceived+0x32c>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fb48 	bl	80001d0 <strcmp>
 8001b40:	4603      	mov	r3, r0
            strcmp(Received, "SEND FAIL\r\n") != 0 &&
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d033      	beq.n	8001bae <ParseReceived+0xf2>
            //strcmp(&Received[1], ",CLOSED\r\n") != 0 &&
            strcmp(Received, ESP8266_RESPONSE_ERROR) != 0 &&
 8001b46:	49a9      	ldr	r1, [pc, #676]	; (8001dec <ParseReceived+0x330>)
 8001b48:	68b8      	ldr	r0, [r7, #8]
 8001b4a:	f7fe fb41 	bl	80001d0 <strcmp>
 8001b4e:	4603      	mov	r3, r0
            strcmp(&Received[1], ",CONNECT\r\n") != 0 &&
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d02c      	beq.n	8001bae <ParseReceived+0xf2>
            strcmp(Received, "ready\r\n") != 0 &&
 8001b54:	49a6      	ldr	r1, [pc, #664]	; (8001df0 <ParseReceived+0x334>)
 8001b56:	68b8      	ldr	r0, [r7, #8]
 8001b58:	f7fe fb3a 	bl	80001d0 <strcmp>
 8001b5c:	4603      	mov	r3, r0
            strcmp(Received, ESP8266_RESPONSE_ERROR) != 0 &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d025      	beq.n	8001bae <ParseReceived+0xf2>
            strcmp(Received, "busy p...\r\n") != 0 &&
 8001b62:	49a4      	ldr	r1, [pc, #656]	; (8001df4 <ParseReceived+0x338>)
 8001b64:	68b8      	ldr	r0, [r7, #8]
 8001b66:	f7fe fb33 	bl	80001d0 <strcmp>
 8001b6a:	4603      	mov	r3, r0
            strcmp(Received, "ready\r\n") != 0 &&
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01e      	beq.n	8001bae <ParseReceived+0xf2>
            strncmp(Received, "+IPD,", 5) != 0 &&
 8001b70:	2205      	movs	r2, #5
 8001b72:	49a1      	ldr	r1, [pc, #644]	; (8001df8 <ParseReceived+0x33c>)
 8001b74:	68b8      	ldr	r0, [r7, #8]
 8001b76:	f00e ffc5 	bl	8010b04 <strncmp>
 8001b7a:	4603      	mov	r3, r0
            strcmp(Received, "busy p...\r\n") != 0 &&
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d016      	beq.n	8001bae <ParseReceived+0xf2>
            strncmp(Received, ESP8266->ActiveCommandResponse, strlen(ESP8266->ActiveCommandResponse)) != 0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	689c      	ldr	r4, [r3, #8]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fb2b 	bl	80001e4 <strlen>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	4621      	mov	r1, r4
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	f00e ffb5 	bl	8010b04 <strncmp>
 8001b9a:	4603      	mov	r3, r0
            strncmp(Received, "+IPD,", 5) != 0 &&
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <ParseReceived+0xf2>
        ) {
            BUFFER_WriteString(&TMP_Buffer, Received);    	/* Save string to temporary buffer, because we received a string which does not belong to this command */            
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	4896      	ldr	r0, [pc, #600]	; (8001dfc <ParseReceived+0x340>)
 8001ba4:	f7fe ff93 	bl	8000ace <BUFFER_WriteString>
            return 0;                                		/* Return from function, no remaining bytes to process */
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f000 be22 	b.w	80027f2 <ParseReceived+0xd36>
        }
    }
    
    if (strcmp(Received, "ready\r\n") == 0) {        		/* Device is ready */
 8001bae:	4990      	ldr	r1, [pc, #576]	; (8001df0 <ParseReceived+0x334>)
 8001bb0:	68b8      	ldr	r0, [r7, #8]
 8001bb2:	f7fe fb0d 	bl	80001d0 <strcmp>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <ParseReceived+0x106>
        ESP8266_Callback_DeviceReady(ESP8266);
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f001 fe25 	bl	800380c <ESP8266_Callback_DeviceReady>
    }
    if (strcmp(Received, "wdt reset\r\n") == 0) {    		/* Device WDT reset */
 8001bc2:	498f      	ldr	r1, [pc, #572]	; (8001e00 <ParseReceived+0x344>)
 8001bc4:	68b8      	ldr	r0, [r7, #8]
 8001bc6:	f7fe fb03 	bl	80001d0 <strcmp>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <ParseReceived+0x11a>
        ESP8266_Callback_WatchdogReset(ESP8266);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f001 fe25 	bl	8003820 <ESP8266_Callback_WatchdogReset>
    }
    
    CallConnectionCallbacks(ESP8266);                		/* Call user callback functions for connections */
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff fcb4 	bl	8001544 <CallConnectionCallbacks>
    
    if (strcmp(Received, "WIFI CONNECTED\r\n") == 0) {    	/* We are connected to Wi-Fi */
 8001bdc:	4989      	ldr	r1, [pc, #548]	; (8001e04 <ParseReceived+0x348>)
 8001bde:	68b8      	ldr	r0, [r7, #8]
 8001be0:	f7fe faf6 	bl	80001d0 <strcmp>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <ParseReceived+0x144>
        ESP8266->Flags.F.WifiConnected = 1;            		/* Set flag */
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        ESP8266_Callback_WifiConnected(ESP8266);    		/* Call user callback function */
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f001 fe25 	bl	8003848 <ESP8266_Callback_WifiConnected>
 8001bfe:	e080      	b.n	8001d02 <ParseReceived+0x246>
    } else if (strcmp(Received, "WIFI DISCONNECT\r\n") == 0) {
 8001c00:	4981      	ldr	r1, [pc, #516]	; (8001e08 <ParseReceived+0x34c>)
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	f7fe fae4 	bl	80001d0 <strcmp>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d15d      	bne.n	8001cca <ParseReceived+0x20e>
        ESP8266->Flags.F.WifiConnected = 0;            		/* Clear flags */
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8001c14:	f36f 0382 	bfc	r3, #2, #1
 8001c18:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        ESP8266->Flags.F.WifiGotIP = 0;
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8001c22:	f36f 03c3 	bfc	r3, #3, #1
 8001c26:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        memset((uint8_t *)&ESP8266->ConnectedWifi, 0, sizeof(ESP8266->ConnectedWifi));	/* Reset connected wifi structure */
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001c30:	221a      	movs	r2, #26
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f00e fe85 	bl	8010944 <memset>
        ESP8266_RESET_CONNECTIONS(ESP8266);            		/* Reset all connections */
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001c46:	e038      	b.n	8001cba <ParseReceived+0x1fe>
 8001c48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001c5a:	7913      	ldrb	r3, [r2, #4]
 8001c5c:	f36f 0300 	bfc	r3, #0, #1
 8001c60:	7113      	strb	r3, [r2, #4]
 8001c62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001c74:	7913      	ldrb	r3, [r2, #4]
 8001c76:	f36f 0341 	bfc	r3, #1, #1
 8001c7a:	7113      	strb	r3, [r2, #4]
 8001c7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001c8e:	7913      	ldrb	r3, [r2, #4]
 8001c90:	f36f 1386 	bfc	r3, #6, #1
 8001c94:	7113      	strb	r3, [r2, #4]
 8001c96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	212c      	movs	r1, #44	; 0x2c
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001ca8:	7913      	ldrb	r3, [r2, #4]
 8001caa:	f36f 1345 	bfc	r3, #5, #1
 8001cae:	7113      	strb	r3, [r2, #4]
 8001cb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d9c2      	bls.n	8001c48 <ParseReceived+0x18c>
        ESP8266_Callback_WifiDisconnected(ESP8266);    		/* Call user callback function */
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f001 fdb6 	bl	8003834 <ESP8266_Callback_WifiDisconnected>
 8001cc8:	e01b      	b.n	8001d02 <ParseReceived+0x246>
    } else if (strcmp(Received, "WIFI GOT IP\r\n") == 0) {
 8001cca:	4950      	ldr	r1, [pc, #320]	; (8001e0c <ParseReceived+0x350>)
 8001ccc:	68b8      	ldr	r0, [r7, #8]
 8001cce:	f7fe fa7f 	bl	80001d0 <strcmp>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <ParseReceived+0x232>
        ESP8266->Flags.F.WifiGotIP = 1;                		/* Wifi got IP address */
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        ESP8266_Callback_WifiGotIP(ESP8266);        		/* Call user callback function */
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f001 fdc2 	bl	8003870 <ESP8266_Callback_WifiGotIP>
 8001cec:	e009      	b.n	8001d02 <ParseReceived+0x246>
    } else if (strcmp(Received, "DHCP TIMEOUT") == 0) {    
 8001cee:	4948      	ldr	r1, [pc, #288]	; (8001e10 <ParseReceived+0x354>)
 8001cf0:	68b8      	ldr	r0, [r7, #8]
 8001cf2:	f7fe fa6d 	bl	80001d0 <strcmp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <ParseReceived+0x246>
        ESP8266_Callback_DHCPTimeout(ESP8266);        		/* Call user function */
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f001 fdcb 	bl	8003898 <ESP8266_Callback_DHCPTimeout>
    }
    if (strstr(Received, "SEND OK\r\n") != NULL) {    		/* In case data were send */
 8001d02:	4937      	ldr	r1, [pc, #220]	; (8001de0 <ParseReceived+0x324>)
 8001d04:	68b8      	ldr	r0, [r7, #8]
 8001d06:	f00e ff0f 	bl	8010b28 <strstr>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d056      	beq.n	8001dbe <ParseReceived+0x302>
        uint8_t cnt;
        
        ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;    	/* Reset active command so user will be able to call new command in callback function */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
        for (cnt = 0; cnt < ESP8266_MAX_CONNECTIONS; cnt++) {
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001d1c:	e048      	b.n	8001db0 <ParseReceived+0x2f4>
            if (ESP8266->Connection[cnt].Flags.F.WaitingSentRespond) {  /* Check for data sent */
 8001d1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3340      	adds	r3, #64	; 0x40
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d035      	beq.n	8001da6 <ParseReceived+0x2ea>
                ESP8266->Connection[cnt].Flags.F.WaitingSentRespond = 0;    /* Reset flag */
 8001d3a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001d4c:	7913      	ldrb	r3, [r2, #4]
 8001d4e:	f36f 0382 	bfc	r3, #2, #1
 8001d52:	7113      	strb	r3, [r2, #4]
                if (ESP8266->Connection[cnt].Flags.F.Client) {	/* Call user function according to connection type */
 8001d54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	212c      	movs	r1, #44	; 0x2c
 8001d5c:	fb01 f303 	mul.w	r3, r1, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	3340      	adds	r3, #64	; 0x40
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <ParseReceived+0x2d0>
                    ESP8266_Callback_ClientConnectionDataSent(ESP8266, &ESP8266->Connection[cnt]);
 8001d70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d74:	222c      	movs	r2, #44	; 0x2c
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f001 fdb5 	bl	80038f4 <ESP8266_Callback_ClientConnectionDataSent>
 8001d8a:	e00c      	b.n	8001da6 <ParseReceived+0x2ea>
                } else {
                    ESP8266_Callback_ServerConnectionDataSent(ESP8266, &ESP8266->Connection[cnt]);
 8001d8c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d90:	222c      	movs	r2, #44	; 0x2c
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	3318      	adds	r3, #24
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f001 fa29 	bl	80031f8 <ESP8266_Callback_ServerConnectionDataSent>
        for (cnt = 0; cnt < ESP8266_MAX_CONNECTIONS; cnt++) {
 8001da6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001daa:	3301      	adds	r3, #1
 8001dac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001db0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d9b2      	bls.n	8001d1e <ParseReceived+0x262>
                }
            }
        }
        return 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f000 bd1a 	b.w	80027f2 <ParseReceived+0xd36>
    }
    if (strstr(Received, "SEND FAIL\r\n") != NULL) {    	/* In case data were not send */
 8001dbe:	4909      	ldr	r1, [pc, #36]	; (8001de4 <ParseReceived+0x328>)
 8001dc0:	68b8      	ldr	r0, [r7, #8]
 8001dc2:	f00e feb1 	bl	8010b28 <strstr>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d073      	beq.n	8001eb4 <ParseReceived+0x3f8>
        uint8_t cnt;
        
        ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;    	/* Reset active command so user will be able to call new command in callback function */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	605a      	str	r2, [r3, #4]
        for (cnt = 0; cnt < ESP8266_MAX_CONNECTIONS; cnt++) {
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001dd8:	e065      	b.n	8001ea6 <ParseReceived+0x3ea>
 8001dda:	bf00      	nop
 8001ddc:	0801137c 	.word	0x0801137c
 8001de0:	08011384 	.word	0x08011384
 8001de4:	08011390 	.word	0x08011390
 8001de8:	0801139c 	.word	0x0801139c
 8001dec:	080113a8 	.word	0x080113a8
 8001df0:	080113b0 	.word	0x080113b0
 8001df4:	080113b8 	.word	0x080113b8
 8001df8:	080113c4 	.word	0x080113c4
 8001dfc:	2000178c 	.word	0x2000178c
 8001e00:	080113cc 	.word	0x080113cc
 8001e04:	080113d8 	.word	0x080113d8
 8001e08:	080113ec 	.word	0x080113ec
 8001e0c:	08011400 	.word	0x08011400
 8001e10:	08011410 	.word	0x08011410
            if (ESP8266->Connection[cnt].Flags.F.WaitingSentRespond) {  /* Check for data sent */
 8001e14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	212c      	movs	r1, #44	; 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	3340      	adds	r3, #64	; 0x40
 8001e24:	791b      	ldrb	r3, [r3, #4]
 8001e26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d035      	beq.n	8001e9c <ParseReceived+0x3e0>
                ESP8266->Connection[cnt].Flags.F.WaitingSentRespond = 0;    /* Reset flag */
 8001e30:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001e42:	7913      	ldrb	r3, [r2, #4]
 8001e44:	f36f 0382 	bfc	r3, #2, #1
 8001e48:	7113      	strb	r3, [r2, #4]
                if (ESP8266->Connection[cnt].Flags.F.Client) {	/* Call user function according to connection type */
 8001e4a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3340      	adds	r3, #64	; 0x40
 8001e5a:	791b      	ldrb	r3, [r3, #4]
 8001e5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00d      	beq.n	8001e82 <ParseReceived+0x3c6>
                    ESP8266_Callback_ClientConnectionDataSentError(ESP8266, &ESP8266->Connection[cnt]);
 8001e66:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e6a:	222c      	movs	r2, #44	; 0x2c
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	3318      	adds	r3, #24
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f001 fd45 	bl	800390a <ESP8266_Callback_ClientConnectionDataSentError>
 8001e80:	e00c      	b.n	8001e9c <ParseReceived+0x3e0>
                } else {
                    ESP8266_Callback_ServerConnectionDataSentError(ESP8266, &ESP8266->Connection[cnt]);
 8001e82:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e86:	222c      	movs	r2, #44	; 0x2c
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	3318      	adds	r3, #24
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	4619      	mov	r1, r3
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f001 f9b9 	bl	800320e <ESP8266_Callback_ServerConnectionDataSentError>
        for (cnt = 0; cnt < ESP8266_MAX_CONNECTIONS; cnt++) {
 8001e9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001ea6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d9b2      	bls.n	8001e14 <ParseReceived+0x358>
                }
            }
        }
        return 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f000 bc9f 	b.w	80027f2 <ParseReceived+0xd36>
    }
    
    if (bufflen > 10 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 10], 10, ",CONNECT\r\n", 10)) != NULL) {	/* Check if we have a new connection */
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	2b0a      	cmp	r3, #10
 8001eb8:	d938      	bls.n	8001f2c <ParseReceived+0x470>
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	3b0a      	subs	r3, #10
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	18d0      	adds	r0, r2, r3
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	4aa6      	ldr	r2, [pc, #664]	; (8002160 <ParseReceived+0x6a4>)
 8001ec6:	210a      	movs	r1, #10
 8001ec8:	f7fe fe74 	bl	8000bb4 <mem_mem>
 8001ecc:	6238      	str	r0, [r7, #32]
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d02b      	beq.n	8001f2c <ParseReceived+0x470>
        Conn = &ESP8266->Connection[CHAR2NUM(*(ch_ptr - 1))];	/* New connection has been made */
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	3b30      	subs	r3, #48	; 0x30
 8001edc:	222c      	movs	r2, #44	; 0x2c
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	3318      	adds	r3, #24
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3304      	adds	r3, #4
 8001eea:	61fb      	str	r3, [r7, #28]
        Conn->Flags.F.Active = 1;
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        Conn->Number = CHAR2NUM(*(ch_ptr - 1));
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	3b30      	subs	r3, #48	; 0x30
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	701a      	strb	r2, [r3, #0]
        ESP8266->LastConnection = Conn;                     /* Save last connection we operate */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
        
        if (!Conn->Flags.F.Client) {                        /* Check server status */
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 80c7 	bne.w	80020b0 <ParseReceived+0x5f4>
            ESP8266_Callback_ServerConnectionActive(ESP8266, Conn);	/* Connection started as server */
 8001f22:	69f9      	ldr	r1, [r7, #28]
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f001 f937 	bl	8003198 <ESP8266_Callback_ServerConnectionActive>
        if (!Conn->Flags.F.Client) {                        /* Check server status */
 8001f2a:	e0c1      	b.n	80020b0 <ParseReceived+0x5f4>
        } else {
            /* Process other data in CIPSTART OK response for client */
        }
    } else if (strstr(Received, "ALREADY CONNECTED\r\n") != NULL) {	/* Check if already connected */
 8001f2c:	498d      	ldr	r1, [pc, #564]	; (8002164 <ParseReceived+0x6a8>)
 8001f2e:	68b8      	ldr	r0, [r7, #8]
 8001f30:	f00e fdfa 	bl	8010b28 <strstr>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 80ba 	bne.w	80020b0 <ParseReceived+0x5f4>
        
        
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	2b09      	cmp	r3, #9
 8001f40:	d963      	bls.n	800200a <ParseReceived+0x54e>
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	3b09      	subs	r3, #9
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	18d0      	adds	r0, r2, r3
 8001f4a:	2309      	movs	r3, #9
 8001f4c:	4a86      	ldr	r2, [pc, #536]	; (8002168 <ParseReceived+0x6ac>)
 8001f4e:	2109      	movs	r1, #9
 8001f50:	f7fe fe30 	bl	8000bb4 <mem_mem>
 8001f54:	6238      	str	r0, [r7, #32]
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d056      	beq.n	800200a <ParseReceived+0x54e>
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d052      	beq.n	800200a <ParseReceived+0x54e>
        uint8_t client, active;
        Conn = &ESP8266->Connection[CHAR2NUM(*(ch_ptr - 1))];
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	3b30      	subs	r3, #48	; 0x30
 8001f6c:	222c      	movs	r2, #44	; 0x2c
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	3318      	adds	r3, #24
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	3304      	adds	r3, #4
 8001f7a:	61fb      	str	r3, [r7, #28]
        
        /* Check if CLOSED statement is on beginning, if not, write it to temporary buffer and leave there */
        /* If not on beginning of string, probably ,CLOSED was returned after +IPD statement */
        /* Make string standalone */
        if (ch_ptr == (Received + 1)) {
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	6a3a      	ldr	r2, [r7, #32]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d139      	bne.n	8001ffa <ParseReceived+0x53e>
            client = Conn->Flags.F.Client;            		/* Save values */
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	76fb      	strb	r3, [r7, #27]
            active = Conn->Flags.F.Active;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	76bb      	strb	r3, [r7, #26]
            ESP8266_RESET_CONNECTION(ESP8266, Conn);    		/* Connection closed, reset flags now */
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8001fa8:	f36f 0300 	bfc	r3, #0, #1
 8001fac:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8001fb6:	f36f 0341 	bfc	r3, #1, #1
 8001fba:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8001fc4:	f36f 1386 	bfc	r3, #6, #1
 8001fc8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8001fd2:	f36f 1345 	bfc	r3, #5, #1
 8001fd6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            if (active) {                            		/* Call user function */
 8001fda:	7ebb      	ldrb	r3, [r7, #26]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d066      	beq.n	80020ae <ParseReceived+0x5f2>
                if (client) {
 8001fe0:	7efb      	ldrb	r3, [r7, #27]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <ParseReceived+0x534>
                    ESP8266_Callback_ClientConnectionClosed(ESP8266, Conn);	/* Client connection closed */
 8001fe6:	69f9      	ldr	r1, [r7, #28]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f001 fca5 	bl	8003938 <ESP8266_Callback_ClientConnectionClosed>
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 8001fee:	e05e      	b.n	80020ae <ParseReceived+0x5f2>
                } else {
                    ESP8266_Callback_ServerConnectionClosed(ESP8266, Conn);	/* Server connection closed */
 8001ff0:	69f9      	ldr	r1, [r7, #28]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f001 f8db 	bl	80031ae <ESP8266_Callback_ServerConnectionClosed>
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 8001ff8:	e059      	b.n	80020ae <ParseReceived+0x5f2>
                }
            }
        } else {
            BUFFER_Write(&TMP_Buffer, (uint8_t *)(ch_ptr - 1), 10);	/* Write to temporary buffer */
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	220a      	movs	r2, #10
 8002000:	4619      	mov	r1, r3
 8002002:	485a      	ldr	r0, [pc, #360]	; (800216c <ParseReceived+0x6b0>)
 8002004:	f7fe fb0c 	bl	8000620 <BUFFER_Write>
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 8002008:	e051      	b.n	80020ae <ParseReceived+0x5f2>
        }
    } else if (bufflen > 16 && (ch_ptr = strstr(&Received[bufflen - 15], ",CONNECT FAIL\r\n")) != NULL) {	/* Check if we have a new connection, analyze only last part */
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	2b10      	cmp	r3, #16
 800200e:	d94f      	bls.n	80020b0 <ParseReceived+0x5f4>
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	3b0f      	subs	r3, #15
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	4413      	add	r3, r2
 8002018:	4955      	ldr	r1, [pc, #340]	; (8002170 <ParseReceived+0x6b4>)
 800201a:	4618      	mov	r0, r3
 800201c:	f00e fd84 	bl	8010b28 <strstr>
 8002020:	6238      	str	r0, [r7, #32]
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d043      	beq.n	80020b0 <ParseReceived+0x5f4>
        Conn = &ESP8266->Connection[CHAR2NUM(*(ch_ptr - 1))];	/* New connection has been made */
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	3b01      	subs	r3, #1
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	3b30      	subs	r3, #48	; 0x30
 8002030:	222c      	movs	r2, #44	; 0x2c
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	3318      	adds	r3, #24
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	61fb      	str	r3, [r7, #28]
        ESP8266_RESET_CONNECTION(ESP8266, Conn);
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002046:	f36f 0300 	bfc	r3, #0, #1
 800204a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002054:	f36f 0341 	bfc	r3, #1, #1
 8002058:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002062:	f36f 1386 	bfc	r3, #6, #1
 8002066:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002070:	f36f 1345 	bfc	r3, #5, #1
 8002074:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        Conn->Number = CHAR2NUM(*(ch_ptr - 1));
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	3b01      	subs	r3, #1
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	3b30      	subs	r3, #48	; 0x30
 8002080:	b2da      	uxtb	r2, r3
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	701a      	strb	r2, [r3, #0]
        
        if (Conn->Flags.F.Client) {							/* Call user function according to connection type (client, server) */
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <ParseReceived+0x5f4>
            if (ESP8266->ActiveCommand == ESP8266_COMMAND_CIPSTART) {
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b0a      	cmp	r3, #10
 800209c:	d102      	bne.n	80020a4 <ParseReceived+0x5e8>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;	/* Reset current connection */
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
            }
            ESP8266_Callback_ClientConnectionError(ESP8266, Conn);	/* Connection failed */
 80020a4:	69f9      	ldr	r1, [r7, #28]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f001 fc0b 	bl	80038c2 <ESP8266_Callback_ClientConnectionError>
 80020ac:	e000      	b.n	80020b0 <ParseReceived+0x5f4>
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 80020ae:	bf00      	nop
        }
    }
    
    if (strncmp(Received, "+IPD,", 5) == 0) {       		/* Check if +IPD was received with incoming data */
 80020b0:	2205      	movs	r2, #5
 80020b2:	4930      	ldr	r1, [pc, #192]	; (8002174 <ParseReceived+0x6b8>)
 80020b4:	68b8      	ldr	r0, [r7, #8]
 80020b6:	f00e fd25 	bl	8010b04 <strncmp>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f040 8109 	bne.w	80022d4 <ParseReceived+0x818>
        uint16_t blength = bufflen;
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        uint16_t blength2 = bufflen;
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	833b      	strh	r3, [r7, #24]
        uint16_t ipd_ptr_org;
        
        ESP8266->IPD.InIPD = 1;                   			/* If we are not in IPD mode already, go to IPD mode */
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
        ESP8266->IPD.USART_Buffer = from_usart_buffer;      /* Save IPD buffer location */
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	797a      	ldrb	r2, [r7, #5]
 80020d6:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
        
        ipd_ptr = 5;                                        /* Reset pointer */
 80020da:	2305      	movs	r3, #5
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ESP8266->IPD.ConnNumber = CHAR2NUM(Received[ipd_ptr]);  /* Get connection number from IPD statement */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3b30      	subs	r3, #48	; 0x30
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        Conn = &ESP8266->Connection[ESP8266->IPD.ConnNumber];   /* Save connection pointer */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80020f6:	461a      	mov	r2, r3
 80020f8:	232c      	movs	r3, #44	; 0x2c
 80020fa:	fb03 f302 	mul.w	r3, r3, r2
 80020fe:	3318      	adds	r3, #24
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	61fb      	str	r3, [r7, #28]
#if ESP8266_USE_SINGLE_CONNECTION_BUFFER == 1
        Conn->Data = ConnectionData;                        /* Set working buffer for this connection */
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <ParseReceived+0x6bc>)
 800210c:	615a      	str	r2, [r3, #20]
#endif
        Conn->Number = ESP8266->IPD.ConnNumber;             /* Save connection number */
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	701a      	strb	r2, [r3, #0]
        ipd_ptr += 2;                                       /* Increase pointer by 2 */
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	3302      	adds	r3, #2
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
        Conn->BytesReceived = ParseNumber(&Received[ipd_ptr], &bytes_cnt);  /* Save number of received bytes */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	4413      	add	r3, r2
 8002124:	f107 0215 	add.w	r2, r7, #21
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fdbe 	bl	8000cac <ParseNumber>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	60da      	str	r2, [r3, #12]
        
        if (Conn->TotalBytesReceived == 0) {                /* First time */
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d11d      	bne.n	800217c <ParseReceived+0x6c0>
            Conn->Flags.F.HeadersDone = 0;                  /* Reset flag */
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002146:	f36f 1345 	bfc	r3, #5, #1
 800214a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            Conn->Flags.F.FirstPacket = 1;                  /* This is first packet of data */
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002158:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800215c:	e015      	b.n	800218a <ParseReceived+0x6ce>
 800215e:	bf00      	nop
 8002160:	0801139c 	.word	0x0801139c
 8002164:	08011420 	.word	0x08011420
 8002168:	08011434 	.word	0x08011434
 800216c:	2000178c 	.word	0x2000178c
 8002170:	08011440 	.word	0x08011440
 8002174:	080113c4 	.word	0x080113c4
 8002178:	200000b8 	.word	0x200000b8
        } else {
            Conn->Flags.F.FirstPacket = 0;                  /* This is not first packet */
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8002182:	f36f 1386 	bfc	r3, #6, #1
 8002186:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        }
        
        Conn->TotalBytesReceived += Conn->BytesReceived;    /* Save total number of bytes */
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	441a      	add	r2, r3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	611a      	str	r2, [r3, #16]
        ESP8266->TotalBytesReceived += Conn->BytesReceived; /* Increase global number of bytes received from ESP8266 module to stack */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	441a      	add	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        ipd_ptr += bytes_cnt + 1;                           /* Increase pointer for number of characters for number and for comma */
 80021aa:	7d7b      	ldrb	r3, [r7, #21]
 80021ac:	461a      	mov	r2, r3
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	4413      	add	r3, r2
 80021b2:	3301      	adds	r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ParseIP(&Received[ipd_ptr], Conn->RemoteIP, &bytes_cnt);    /* Save IP */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	18d0      	adds	r0, r2, r3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	3304      	adds	r3, #4
 80021c0:	f107 0215 	add.w	r2, r7, #21
 80021c4:	4619      	mov	r1, r3
 80021c6:	f7fe fdf5 	bl	8000db4 <ParseIP>
        ipd_ptr += bytes_cnt + 1;                           /* Increase pointer for number of characters for IP string and for comma */
 80021ca:	7d7b      	ldrb	r3, [r7, #21]
 80021cc:	461a      	mov	r2, r3
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	4413      	add	r3, r2
 80021d2:	3301      	adds	r3, #1
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        Conn->RemotePort = ParseNumber(&Received[ipd_ptr], &bytes_cnt); /* Save PORT */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	4413      	add	r3, r2
 80021dc:	f107 0215 	add.w	r2, r7, #21
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fd62 	bl	8000cac <ParseNumber>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	805a      	strh	r2, [r3, #2]

        while (Received[ipd_ptr] != ':' && ipd_ptr < blength) { /* Find data starts position */
 80021f0:	e002      	b.n	80021f8 <ParseReceived+0x73c>
            ipd_ptr++;
 80021f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f4:	3301      	adds	r3, #1
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (Received[ipd_ptr] != ':' && ipd_ptr < blength) { /* Find data starts position */
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b3a      	cmp	r3, #58	; 0x3a
 8002202:	d003      	beq.n	800220c <ParseReceived+0x750>
 8002204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002208:	429a      	cmp	r2, r3
 800220a:	d3f2      	bcc.n	80021f2 <ParseReceived+0x736>
        }
        ipd_ptr++;
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	3301      	adds	r3, #1
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
        ipd_ptr_org = ipd_ptr;
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	82fb      	strh	r3, [r7, #22]
        if ((blength - ipd_ptr) > Conn->BytesReceived) {    /* Calculate size of buffer */
 8002216:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	1ad2      	subs	r2, r2, r3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	d906      	bls.n	8002232 <ParseReceived+0x776>
            blength = Conn->BytesReceived + ipd_ptr;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	b29a      	uxth	r2, r3
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	b29b      	uxth	r3, r3
 800222e:	4413      	add	r3, r2
 8002230:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        
        memcpy((uint8_t *)Conn->Data, (uint8_t *)&Received[ipd_ptr], blength - ipd_ptr);    /* Copy content to beginning of buffer */
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	6958      	ldr	r0, [r3, #20]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	18d1      	adds	r1, r2, r3
 800223c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	461a      	mov	r2, r3
 8002244:	f00e fb73 	bl	801092e <memcpy>
        ipd_ptr_org += blength - ipd_ptr;
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224a:	b29b      	uxth	r3, r3
 800224c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	b29a      	uxth	r2, r3
 8002252:	8afb      	ldrh	r3, [r7, #22]
 8002254:	4413      	add	r3, r2
 8002256:	82fb      	strh	r3, [r7, #22]
        
        if ((blength - ipd_ptr) > Conn->BytesReceived) {    /* Check for length */
 8002258:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	1ad2      	subs	r2, r2, r3
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	429a      	cmp	r2, r3
 8002264:	d906      	bls.n	8002274 <ParseReceived+0x7b8>
            Conn->Data[Conn->BytesReceived] = 0;            /* Add zero at the end of string */
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4413      	add	r3, r2
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
        }
        ESP8266->IPD.InPtr = ESP8266->IPD.PtrTotal = blength - ipd_ptr; /* Calculate remaining bytes */
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	b29b      	uxth	r3, r3
 8002278:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f8b3 214e 	ldrh.w	r2, [r3, #334]	; 0x14e
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
        if (ESP8266->IPD.PtrTotal >= Conn->BytesReceived) { /* Check remaining data */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002296:	461a      	mov	r2, r3
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d315      	bcc.n	80022cc <ParseReceived+0x810>
            ESP8266->IPD.InIPD = 0;                         /* Not in IPD anymore */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
            Conn->DataSize = ipd_ptr;                       /* Set package data size */
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	831a      	strh	r2, [r3, #24]
            Conn->Flags.F.LastPart = 1;
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            Conn->Flags.F.CallDataReceived = 1;             /* Enable flag to call received data callback */
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        }
        return blength2 - (ipd_ptr_org);                    /* Return number of bytes we didn't process in this request */
 80022cc:	8b3a      	ldrh	r2, [r7, #24]
 80022ce:	8afb      	ldrh	r3, [r7, #22]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	e28e      	b.n	80027f2 <ParseReceived+0xd36>
    }
    
    switch (ESP8266->ActiveCommand) {                       /* Check commands we have sent */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	3b01      	subs	r3, #1
 80022da:	2b20      	cmp	r3, #32
 80022dc:	f200 8238 	bhi.w	8002750 <ParseReceived+0xc94>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <ParseReceived+0x82c>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	080025c3 	.word	0x080025c3
 80022ec:	08002751 	.word	0x08002751
 80022f0:	0800236d 	.word	0x0800236d
 80022f4:	08002751 	.word	0x08002751
 80022f8:	0800248b 	.word	0x0800248b
 80022fc:	080024af 	.word	0x080024af
 8002300:	080025c3 	.word	0x080025c3
 8002304:	080024c7 	.word	0x080024c7
 8002308:	080025c3 	.word	0x080025c3
 800230c:	080024f3 	.word	0x080024f3
 8002310:	080025c3 	.word	0x080025c3
 8002314:	080023f5 	.word	0x080023f5
 8002318:	08002751 	.word	0x08002751
 800231c:	080025c3 	.word	0x080025c3
 8002320:	080025db 	.word	0x080025db
 8002324:	080025c3 	.word	0x080025c3
 8002328:	080025c3 	.word	0x080025c3
 800232c:	08002601 	.word	0x08002601
 8002330:	080023c5 	.word	0x080023c5
 8002334:	080025c3 	.word	0x080025c3
 8002338:	080025c3 	.word	0x080025c3
 800233c:	08002425 	.word	0x08002425
 8002340:	0800245b 	.word	0x0800245b
 8002344:	080026a1 	.word	0x080026a1
 8002348:	080026db 	.word	0x080026db
 800234c:	080025c3 	.word	0x080025c3
 8002350:	08002715 	.word	0x08002715
 8002354:	08002751 	.word	0x08002751
 8002358:	08002751 	.word	0x08002751
 800235c:	080025c3 	.word	0x080025c3
 8002360:	080025c3 	.word	0x080025c3
 8002364:	080025c3 	.word	0x080025c3
 8002368:	080025c3 	.word	0x080025c3
        case ESP8266_COMMAND_CWJAP:            
            if (strncmp(Received, "+CWJAP:", 7) == 0) {     /* We send command and we have error response */
 800236c:	2207      	movs	r2, #7
 800236e:	49b7      	ldr	r1, [pc, #732]	; (800264c <ParseReceived+0xb90>)
 8002370:	68b8      	ldr	r0, [r7, #8]
 8002372:	f00e fbc7 	bl	8010b04 <strncmp>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <ParseReceived+0x8d6>
                ESP8266->ActiveCommandResponse = "FAIL\r\n";    /* We received an error, wait for "FAIL" string for next time */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4ab4      	ldr	r2, [pc, #720]	; (8002650 <ParseReceived+0xb94>)
 8002380:	609a      	str	r2, [r3, #8]
                ESP8266->WifiConnectError = (ESP8266_WifiConnectError_t)CHAR2NUM(Received[7]);    /* Check reason */
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3307      	adds	r3, #7
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	3b30      	subs	r3, #48	; 0x30
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 8002392:	49b0      	ldr	r1, [pc, #704]	; (8002654 <ParseReceived+0xb98>)
 8002394:	68b8      	ldr	r0, [r7, #8]
 8002396:	f7fd ff1b 	bl	80001d0 <strcmp>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <ParseReceived+0x8ea>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
            }
            if (strcmp(Received, "FAIL\r\n") == 0) {
 80023a6:	49aa      	ldr	r1, [pc, #680]	; (8002650 <ParseReceived+0xb94>)
 80023a8:	68b8      	ldr	r0, [r7, #8]
 80023aa:	f7fd ff11 	bl	80001d0 <strcmp>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f040 81cf 	bne.w	8002754 <ParseReceived+0xc98>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */                
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
                ESP8266_Callback_WifiConnectFailed(ESP8266);    /* Call user function */
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f001 fa4d 	bl	800385c <ESP8266_Callback_WifiConnectFailed>
            }
            break;
 80023c2:	e1c7      	b.n	8002754 <ParseReceived+0xc98>
        case ESP8266_COMMAND_CWJAP_GET:
            if (strncmp(Received, "+CWJAP_CUR:", 11) == 0) {    /* We sent command to get current connected AP */
 80023c4:	220b      	movs	r2, #11
 80023c6:	49a4      	ldr	r1, [pc, #656]	; (8002658 <ParseReceived+0xb9c>)
 80023c8:	68b8      	ldr	r0, [r7, #8]
 80023ca:	f00e fb9b 	bl	8010b04 <strncmp>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <ParseReceived+0x920>
                ParseCWJAP(ESP8266, Received);              /* Parse string */
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7fe ffd0 	bl	800137c <ParseCWJAP>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 80023dc:	499d      	ldr	r1, [pc, #628]	; (8002654 <ParseReceived+0xb98>)
 80023de:	68b8      	ldr	r0, [r7, #8]
 80023e0:	f7fd fef6 	bl	80001d0 <strcmp>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 81b6 	bne.w	8002758 <ParseReceived+0xc9c>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
            }
            break;
 80023f2:	e1b1      	b.n	8002758 <ParseReceived+0xc9c>
                ESP8266_Callback_WifiDetected(ESP8266, &ESP8266_APs);   /* Call user function */
            }
            break;
#endif
        case ESP8266_COMMAND_CWSAP:
            if (strncmp(Received, "+CWSAP", 6) == 0) {      /* CWLAP received, parse it */
 80023f4:	2206      	movs	r2, #6
 80023f6:	4999      	ldr	r1, [pc, #612]	; (800265c <ParseReceived+0xba0>)
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f00e fb83 	bl	8010b04 <strncmp>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d103      	bne.n	800240c <ParseReceived+0x950>
                ParseCWSAP(ESP8266, Received);              /* Parse CWLAP */
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f7fe fd6c 	bl	8000ee4 <ParseCWSAP>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 800240c:	4991      	ldr	r1, [pc, #580]	; (8002654 <ParseReceived+0xb98>)
 800240e:	68b8      	ldr	r0, [r7, #8]
 8002410:	f7fd fede 	bl	80001d0 <strcmp>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 81a0 	bne.w	800275c <ParseReceived+0xca0>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	605a      	str	r2, [r3, #4]
            }
            break;
 8002422:	e19b      	b.n	800275c <ParseReceived+0xca0>
        case ESP8266_COMMAND_CIPSTA:
            if (strncmp(Received, "+CIPSTA", 7) == 0) {     /* CIPSTA detected */
 8002424:	2207      	movs	r2, #7
 8002426:	498e      	ldr	r1, [pc, #568]	; (8002660 <ParseReceived+0xba4>)
 8002428:	68b8      	ldr	r0, [r7, #8]
 800242a:	f00e fb6b 	bl	8010b04 <strncmp>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <ParseReceived+0x980>
                ParseCIPSTA(ESP8266, Received);             /* Parse CIPSTA */
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7fe fe12 	bl	8001060 <ParseCIPSTA>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 800243c:	4985      	ldr	r1, [pc, #532]	; (8002654 <ParseReceived+0xb98>)
 800243e:	68b8      	ldr	r0, [r7, #8]
 8002440:	f7fd fec6 	bl	80001d0 <strcmp>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 818a 	bne.w	8002760 <ParseReceived+0xca4>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	605a      	str	r2, [r3, #4]
                ESP8266_Callback_WifiIPSet(ESP8266);        /* Callback function */
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f001 fa16 	bl	8003884 <ESP8266_Callback_WifiIPSet>
            }
            break;
 8002458:	e182      	b.n	8002760 <ParseReceived+0xca4>
        case ESP8266_COMMAND_CIPAP:
            if (strncmp(Received, "+CIPAP", 6) == 0) {      /* CIPAP detected */
 800245a:	2206      	movs	r2, #6
 800245c:	4981      	ldr	r1, [pc, #516]	; (8002664 <ParseReceived+0xba8>)
 800245e:	68b8      	ldr	r0, [r7, #8]
 8002460:	f00e fb50 	bl	8010b04 <strncmp>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d103      	bne.n	8002472 <ParseReceived+0x9b6>
                ParseCIPSTA(ESP8266, Received);             /* Parse CIPAP (or CIPSTA) */
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7fe fdf7 	bl	8001060 <ParseCIPSTA>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {   /* Reset active command */    
 8002472:	4978      	ldr	r1, [pc, #480]	; (8002654 <ParseReceived+0xb98>)
 8002474:	68b8      	ldr	r0, [r7, #8]
 8002476:	f7fd feab 	bl	80001d0 <strcmp>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 8171 	bne.w	8002764 <ParseReceived+0xca8>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
            }
            break;
 8002488:	e16c      	b.n	8002764 <ParseReceived+0xca8>
        case ESP8266_COMMAND_CWMODE:
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {   /* Reset active command */
 800248a:	4972      	ldr	r1, [pc, #456]	; (8002654 <ParseReceived+0xb98>)
 800248c:	68b8      	ldr	r0, [r7, #8]
 800248e:	f7fd fe9f 	bl	80001d0 <strcmp>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 8167 	bne.w	8002768 <ParseReceived+0xcac>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	605a      	str	r2, [r3, #4]
                ESP8266->Mode = ESP8266->SentMode;          /* Save mode */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
            }
            break;
 80024ac:	e15c      	b.n	8002768 <ParseReceived+0xcac>
        case ESP8266_COMMAND_CIPSERVER:
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 80024ae:	4969      	ldr	r1, [pc, #420]	; (8002654 <ParseReceived+0xb98>)
 80024b0:	68b8      	ldr	r0, [r7, #8]
 80024b2:	f7fd fe8d 	bl	80001d0 <strcmp>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 8157 	bne.w	800276c <ParseReceived+0xcb0>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
            }
            break;
 80024c4:	e152      	b.n	800276c <ParseReceived+0xcb0>
        case ESP8266_COMMAND_SEND:
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {    
 80024c6:	4963      	ldr	r1, [pc, #396]	; (8002654 <ParseReceived+0xb98>)
 80024c8:	68b8      	ldr	r0, [r7, #8]
 80024ca:	f7fd fe81 	bl	80001d0 <strcmp>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f040 814d 	bne.w	8002770 <ParseReceived+0xcb4>
                ESP8266->ActiveCommand = ESP8266_COMMAND_SENDDATA;  /* Go to send data command */
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	221d      	movs	r2, #29
 80024da:	605a      	str	r2, [r3, #4]
                ESP8266->Flags.F.WaitForWrapper = 1;        /* Do not reset command, instead, wait for wrapper command! */
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
                ESP8266->ActiveCommandResponse = "SEND OK"; /* We are now waiting for SEND OK */
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4a5e      	ldr	r2, [pc, #376]	; (8002668 <ParseReceived+0xbac>)
 80024ee:	609a      	str	r2, [r3, #8]
            }
            break;
 80024f0:	e13e      	b.n	8002770 <ParseReceived+0xcb4>
        case ESP8266_COMMAND_SENDDATA:
            break;
        case ESP8266_COMMAND_CIPSTART:
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 80024f2:	4958      	ldr	r1, [pc, #352]	; (8002654 <ParseReceived+0xb98>)
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7fd fe6b 	bl	80001d0 <strcmp>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <ParseReceived+0xa58>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
                ESP8266_Callback_ClientConnectionConnected(ESP8266, ESP8266->LastConnection);	/* Connection started as client */
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800250c:	4619      	mov	r1, r3
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f001 f9cc 	bl	80038ac <ESP8266_Callback_ClientConnectionConnected>
            }
            if (strcmp(Received, ESP8266_RESPONSE_ERROR) == 0) {    
 8002514:	4955      	ldr	r1, [pc, #340]	; (800266c <ParseReceived+0xbb0>)
 8002516:	68b8      	ldr	r0, [r7, #8]
 8002518:	f7fd fe5a 	bl	80001d0 <strcmp>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 8128 	bne.w	8002774 <ParseReceived+0xcb8>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */        
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	605a      	str	r2, [r3, #4]
                ESP8266_RESET_CONNECTION(ESP8266, &ESP8266->Connection[ESP8266->StartConnectionSent]);   /* Reset connection */
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8002530:	4619      	mov	r1, r3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	232c      	movs	r3, #44	; 0x2c
 8002536:	fb03 f301 	mul.w	r3, r3, r1
 800253a:	4413      	add	r3, r2
 800253c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002540:	7913      	ldrb	r3, [r2, #4]
 8002542:	f36f 0300 	bfc	r3, #0, #1
 8002546:	7113      	strb	r3, [r2, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 800254e:	4619      	mov	r1, r3
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	232c      	movs	r3, #44	; 0x2c
 8002554:	fb03 f301 	mul.w	r3, r3, r1
 8002558:	4413      	add	r3, r2
 800255a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800255e:	7913      	ldrb	r3, [r2, #4]
 8002560:	f36f 0341 	bfc	r3, #1, #1
 8002564:	7113      	strb	r3, [r2, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 800256c:	4619      	mov	r1, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	232c      	movs	r3, #44	; 0x2c
 8002572:	fb03 f301 	mul.w	r3, r3, r1
 8002576:	4413      	add	r3, r2
 8002578:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800257c:	7913      	ldrb	r3, [r2, #4]
 800257e:	f36f 1386 	bfc	r3, #6, #1
 8002582:	7113      	strb	r3, [r2, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 800258a:	4619      	mov	r1, r3
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	232c      	movs	r3, #44	; 0x2c
 8002590:	fb03 f301 	mul.w	r3, r3, r1
 8002594:	4413      	add	r3, r2
 8002596:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800259a:	7913      	ldrb	r3, [r2, #4]
 800259c:	f36f 1345 	bfc	r3, #5, #1
 80025a0:	7113      	strb	r3, [r2, #4]
                ESP8266_Callback_ClientConnectionError(ESP8266, &ESP8266->Connection[ESP8266->StartConnectionSent]);    /* Call user function */
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 80025a8:	461a      	mov	r2, r3
 80025aa:	232c      	movs	r3, #44	; 0x2c
 80025ac:	fb03 f302 	mul.w	r3, r3, r2
 80025b0:	3318      	adds	r3, #24
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f001 f981 	bl	80038c2 <ESP8266_Callback_ClientConnectionError>
            }
            break;
 80025c0:	e0d8      	b.n	8002774 <ParseReceived+0xcb8>
        case ESP8266_COMMAND_SNTP_SET:
#endif
#if ESP8266_USE_WPS
        case ESP8266_COMMAND_WPS:
#endif
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 80025c2:	4924      	ldr	r1, [pc, #144]	; (8002654 <ParseReceived+0xb98>)
 80025c4:	68b8      	ldr	r0, [r7, #8]
 80025c6:	f7fd fe03 	bl	80001d0 <strcmp>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 80d3 	bne.w	8002778 <ParseReceived+0xcbc>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	605a      	str	r2, [r3, #4]
            }
            break;
 80025d8:	e0ce      	b.n	8002778 <ParseReceived+0xcbc>
        case ESP8266_COMMAND_RST:
            if (strcmp(Received, "ready\r\n") == 0) {
 80025da:	4925      	ldr	r1, [pc, #148]	; (8002670 <ParseReceived+0xbb4>)
 80025dc:	68b8      	ldr	r0, [r7, #8]
 80025de:	f7fd fdf7 	bl	80001d0 <strcmp>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 80c9 	bne.w	800277c <ParseReceived+0xcc0>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	605a      	str	r2, [r3, #4]
                ESP8266->Flags.F.LastOperationStatus = 1;   /* Set flag */
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
            }
            break;
 80025fe:	e0bd      	b.n	800277c <ParseReceived+0xcc0>
#if ESP8266_USE_PING
        case ESP8266_COMMAND_PING:
            if (Received[0] == '+') {                       /* Check if data about ping milliseconds are received */
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b2b      	cmp	r3, #43	; 0x2b
 8002606:	d10a      	bne.n	800261e <ParseReceived+0xb62>
                /* Parse number for pinging */
                ESP8266->Pinging.Time = ParseNumber(&Received[1], NULL);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3301      	adds	r3, #1
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fb4c 	bl	8000cac <ParseNumber>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 800261e:	490d      	ldr	r1, [pc, #52]	; (8002654 <ParseReceived+0xb98>)
 8002620:	68b8      	ldr	r0, [r7, #8]
 8002622:	f7fd fdd5 	bl	80001d0 <strcmp>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d123      	bne.n	8002674 <ParseReceived+0xbb8>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
                ESP8266->Pinging.Success = 1;               /* Set status */
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
                ESP8266_Callback_PingFinished(ESP8266, &ESP8266->Pinging);  /* Call user function */
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8002640:	4619      	mov	r1, r3
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fdee 	bl	8003224 <ESP8266_Callback_PingFinished>
            } else if (strcmp(Received, ESP8266_RESPONSE_ERROR) == 0) {
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
                ESP8266->Pinging.Success = 0;               /* Set status */
                ESP8266_Callback_PingFinished(ESP8266, &ESP8266->Pinging);  /* Call user function */
            }
            break;
 8002648:	e09a      	b.n	8002780 <ParseReceived+0xcc4>
 800264a:	bf00      	nop
 800264c:	08011450 	.word	0x08011450
 8002650:	08011458 	.word	0x08011458
 8002654:	0801137c 	.word	0x0801137c
 8002658:	08011460 	.word	0x08011460
 800265c:	0801146c 	.word	0x0801146c
 8002660:	08011474 	.word	0x08011474
 8002664:	0801147c 	.word	0x0801147c
 8002668:	08011484 	.word	0x08011484
 800266c:	080113a8 	.word	0x080113a8
 8002670:	080113b0 	.word	0x080113b0
            } else if (strcmp(Received, ESP8266_RESPONSE_ERROR) == 0) {
 8002674:	4961      	ldr	r1, [pc, #388]	; (80027fc <ParseReceived+0xd40>)
 8002676:	68b8      	ldr	r0, [r7, #8]
 8002678:	f7fd fdaa 	bl	80001d0 <strcmp>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d17e      	bne.n	8002780 <ParseReceived+0xcc4>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	605a      	str	r2, [r3, #4]
                ESP8266->Pinging.Success = 0;               /* Set status */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
                ESP8266_Callback_PingFinished(ESP8266, &ESP8266->Pinging);  /* Call user function */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8002696:	4619      	mov	r1, r3
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fdc3 	bl	8003224 <ESP8266_Callback_PingFinished>
            break;
 800269e:	e06f      	b.n	8002780 <ParseReceived+0xcc4>
#endif
        case ESP8266_COMMAND_CIPSTAMAC:
            if (strncmp(Received, "+CIPSTAMAC", 10) == 0) { /* CIPSTA detected */
 80026a0:	220a      	movs	r2, #10
 80026a2:	4957      	ldr	r1, [pc, #348]	; (8002800 <ParseReceived+0xd44>)
 80026a4:	68b8      	ldr	r0, [r7, #8]
 80026a6:	f00e fa2d 	bl	8010b04 <strncmp>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <ParseReceived+0xc08>
                ParseMAC(&Received[12], ESP8266->STAMAC, NULL); /* Parse CIPSTA */
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f103 000c 	add.w	r0, r3, #12
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80026bc:	2200      	movs	r2, #0
 80026be:	4619      	mov	r1, r3
 80026c0:	f7fe fbce 	bl	8000e60 <ParseMAC>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 80026c4:	494f      	ldr	r1, [pc, #316]	; (8002804 <ParseReceived+0xd48>)
 80026c6:	68b8      	ldr	r0, [r7, #8]
 80026c8:	f7fd fd82 	bl	80001d0 <strcmp>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d158      	bne.n	8002784 <ParseReceived+0xcc8>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
            }
            break;
 80026d8:	e054      	b.n	8002784 <ParseReceived+0xcc8>
        case ESP8266_COMMAND_CIPAPMAC:
            if (strncmp(Received, "+CIPAPMAC", 9) == 0) {   /* CIPSTA detected */
 80026da:	2209      	movs	r2, #9
 80026dc:	494a      	ldr	r1, [pc, #296]	; (8002808 <ParseReceived+0xd4c>)
 80026de:	68b8      	ldr	r0, [r7, #8]
 80026e0:	f00e fa10 	bl	8010b04 <strncmp>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <ParseReceived+0xc42>
                ParseMAC(&Received[11], ESP8266->APMAC, NULL);  /* Parse CIPSTA */
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f103 000b 	add.w	r0, r3, #11
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80026f6:	2200      	movs	r2, #0
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe fbb1 	bl	8000e60 <ParseMAC>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 80026fe:	4941      	ldr	r1, [pc, #260]	; (8002804 <ParseReceived+0xd48>)
 8002700:	68b8      	ldr	r0, [r7, #8]
 8002702:	f7fd fd65 	bl	80001d0 <strcmp>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13d      	bne.n	8002788 <ParseReceived+0xccc>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	605a      	str	r2, [r3, #4]
            }
            break;
 8002712:	e039      	b.n	8002788 <ParseReceived+0xccc>
            }
            break;
#endif
#if ESP8266_USE_CONNECTED_STATIONS
        case ESP8266_COMMAND_CWLIF:
            if (CHARISNUM(Received[0])) {                   /* Check if first character is number */
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b2f      	cmp	r3, #47	; 0x2f
 800271a:	d907      	bls.n	800272c <ParseReceived+0xc70>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b39      	cmp	r3, #57	; 0x39
 8002722:	d803      	bhi.n	800272c <ParseReceived+0xc70>
                ParseCWLIF(ESP8266, Received);              /* Parse response */
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7fe fde8 	bl	80012fc <ParseCWLIF>
            }
        
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {   /* Reset active command */
 800272c:	4935      	ldr	r1, [pc, #212]	; (8002804 <ParseReceived+0xd48>)
 800272e:	68b8      	ldr	r0, [r7, #8]
 8002730:	f7fd fd4e 	bl	80001d0 <strcmp>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d128      	bne.n	800278c <ParseReceived+0xcd0>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	605a      	str	r2, [r3, #4]
                ESP8266_Callback_ConnectedStationsDetected(ESP8266, &ESP8266->ConnectedStations);   /* Call user function */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002746:	4619      	mov	r1, r3
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fd76 	bl	800323a <ESP8266_Callback_ConnectedStationsDetected>
            }
            break;
 800274e:	e01d      	b.n	800278c <ParseReceived+0xcd0>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
                ESP8266_Callback_SNTPError(ESP8266);        /* Call user function */
            }
#endif
        default:                                            /* No command was used to send, data received without command */
            break;
 8002750:	bf00      	nop
 8002752:	e01c      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002754:	bf00      	nop
 8002756:	e01a      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002758:	bf00      	nop
 800275a:	e018      	b.n	800278e <ParseReceived+0xcd2>
            break;
 800275c:	bf00      	nop
 800275e:	e016      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002760:	bf00      	nop
 8002762:	e014      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002764:	bf00      	nop
 8002766:	e012      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002768:	bf00      	nop
 800276a:	e010      	b.n	800278e <ParseReceived+0xcd2>
            break;
 800276c:	bf00      	nop
 800276e:	e00e      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002770:	bf00      	nop
 8002772:	e00c      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002774:	bf00      	nop
 8002776:	e00a      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002778:	bf00      	nop
 800277a:	e008      	b.n	800278e <ParseReceived+0xcd2>
            break;
 800277c:	bf00      	nop
 800277e:	e006      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002780:	bf00      	nop
 8002782:	e004      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002784:	bf00      	nop
 8002786:	e002      	b.n	800278e <ParseReceived+0xcd2>
            break;
 8002788:	bf00      	nop
 800278a:	e000      	b.n	800278e <ParseReceived+0xcd2>
            break;
 800278c:	bf00      	nop
    }
    
    if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {       /* Set flag for last operation status */
 800278e:	491d      	ldr	r1, [pc, #116]	; (8002804 <ParseReceived+0xd48>)
 8002790:	68b8      	ldr	r0, [r7, #8]
 8002792:	f7fd fd1d 	bl	80001d0 <strcmp>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d111      	bne.n	80027c0 <ParseReceived+0xd04>
        ESP8266->Flags.F.LastOperationStatus = 1;
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        
        if (ESP8266->ActiveCommand != ESP8266_COMMAND_SEND && ESP8266->ActiveCommand != ESP8266_COMMAND_SENDDATA) {
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d006      	beq.n	80027c0 <ParseReceived+0xd04>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b1d      	cmp	r3, #29
 80027b8:	d002      	beq.n	80027c0 <ParseReceived+0xd04>
            ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
        }
    }
    if (strcmp(Received, ESP8266_RESPONSE_ERROR) == 0 || strcmp(Received, "busy p...\r\n") == 0) {
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <ParseReceived+0xd40>)
 80027c2:	68b8      	ldr	r0, [r7, #8]
 80027c4:	f7fd fd04 	bl	80001d0 <strcmp>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <ParseReceived+0xd20>
 80027ce:	490f      	ldr	r1, [pc, #60]	; (800280c <ParseReceived+0xd50>)
 80027d0:	68b8      	ldr	r0, [r7, #8]
 80027d2:	f7fd fcfd 	bl	80001d0 <strcmp>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <ParseReceived+0xd34>
        ESP8266->Flags.F.LastOperationStatus = 0;
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 80027e2:	f36f 0341 	bfc	r3, #1, #1
 80027e6:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;      /* Reset active command */
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
        
        /* TODO: Check if ERROR here */
    } 
    return 0;                                               /* No remaining bytes to process */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3734      	adds	r7, #52	; 0x34
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	bf00      	nop
 80027fc:	080113a8 	.word	0x080113a8
 8002800:	0801148c 	.word	0x0801148c
 8002804:	0801137c 	.word	0x0801137c
 8002808:	08011498 	.word	0x08011498
 800280c:	080113b8 	.word	0x080113b8

08002810 <ESP8266_Init>:
/******************************************/

/******************************************/
/*          Basic AT commands Set         */
/******************************************/
ESP8266_Result_t ESP8266_Init(ESP8266_t* ESP8266, uint32_t baudrate) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
    uint8_t i;
    
    ESP8266->Timeout = 0;                                   /* Save settings */    
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
    if (BUFFER_Init(&TMP_Buffer, ESP8266_TMPBUFFER_SIZE, TMPBuffer)) {  /* Init temporary buffer */
 8002820:	4a4c      	ldr	r2, [pc, #304]	; (8002954 <ESP8266_Init+0x144>)
 8002822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002826:	484c      	ldr	r0, [pc, #304]	; (8002958 <ESP8266_Init+0x148>)
 8002828:	f7fd feba 	bl	80005a0 <BUFFER_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <ESP8266_Init+0x2e>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_NOHEAP);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 800283a:	2304      	movs	r3, #4
 800283c:	e086      	b.n	800294c <ESP8266_Init+0x13c>
    }
    if (BUFFER_Init(&USART_Buffer, ESP8266_USARTBUFFER_SIZE, USARTBuffer)) {    /* Init USART working */
 800283e:	4a47      	ldr	r2, [pc, #284]	; (800295c <ESP8266_Init+0x14c>)
 8002840:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002844:	4846      	ldr	r0, [pc, #280]	; (8002960 <ESP8266_Init+0x150>)
 8002846:	f7fd feab 	bl	80005a0 <BUFFER_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <ESP8266_Init+0x4c>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_NOHEAP);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2204      	movs	r2, #4
 8002854:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8002858:	2304      	movs	r3, #4
 800285a:	e077      	b.n	800294c <ESP8266_Init+0x13c>
    }
    
//    ESP8266_RESET_INIT;                                     /* Init RESET pin */		// já foi inicializado no inicio
    ESP8266_RESET_LOW;                                      /* Set pin low */
 800285c:	2200      	movs	r2, #0
 800285e:	2102      	movs	r1, #2
 8002860:	4840      	ldr	r0, [pc, #256]	; (8002964 <ESP8266_Init+0x154>)
 8002862:	f001 fda3 	bl	80043ac <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002866:	2064      	movs	r0, #100	; 0x64
 8002868:	f001 fa84 	bl	8003d74 <HAL_Delay>
    ESP8266_RESET_HIGH;                                     /* Set pin high */
 800286c:	2201      	movs	r2, #1
 800286e:	2102      	movs	r1, #2
 8002870:	483c      	ldr	r0, [pc, #240]	; (8002964 <ESP8266_Init+0x154>)
 8002872:	f001 fd9b 	bl	80043ac <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002876:	2064      	movs	r0, #100	; 0x64
 8002878:	f001 fa7c 	bl	8003d74 <HAL_Delay>
    ESP8266->Baudrate = baudrate;                           /* Save current baudrate */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	601a      	str	r2, [r3, #0]
//    ESP8266_LL_USARTInit(ESP8266->Baudrate);                /* Init USART */			//já foi inicializado no inicio
    ESP8266->Timeout = 1000;                                /* Set allowed timeout */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002888:	619a      	str	r2, [r3, #24]
    
    SendCommand(ESP8266, ESP8266_COMMAND_RST, "AT+RST\r\n", "ready\r\n");   /* Reset device */
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <ESP8266_Init+0x158>)
 800288c:	4a37      	ldr	r2, [pc, #220]	; (800296c <ESP8266_Init+0x15c>)
 800288e:	210f      	movs	r1, #15
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7fe fdf3 	bl	800147c <SendCommand>

    HAL_Delay(100);
 8002896:	2064      	movs	r0, #100	; 0x64
 8002898:	f001 fa6c 	bl	8003d74 <HAL_Delay>

    ESP8266_WaitReady(ESP8266);                             /* Wait till idle */
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fb05 	bl	8002eac <ESP8266_WaitReady>
//                break;
//            }
//        }
//    }
    
    if (!ESP8266->Flags.F.LastOperationStatus) {            /* Check status */    
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <ESP8266_Init+0xae>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_DEVICENOTCONNECTED);  /* Device is not connected */
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80028ba:	2302      	movs	r3, #2
 80028bc:	e046      	b.n	800294c <ESP8266_Init+0x13c>
    }
    ESP8266->Timeout = ESP8266_TIMEOUT;                     /* Set allowed timeout to 30sec */
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f247 5230 	movw	r2, #30000	; 0x7530
 80028c4:	619a      	str	r2, [r3, #24]
    SendCommand(ESP8266, ESP8266_COMMAND_AT, "AT\r\n", ESP8266_RESPONSE_OK);    /* Test device */
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <ESP8266_Init+0x160>)
 80028c8:	4a2a      	ldr	r2, [pc, #168]	; (8002974 <ESP8266_Init+0x164>)
 80028ca:	210e      	movs	r1, #14
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7fe fdd5 	bl	800147c <SendCommand>
    ESP8266_WaitReady(ESP8266);                             /* Wait till idle */
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 faea 	bl	8002eac <ESP8266_WaitReady>
    
    if (!ESP8266->Flags.F.LastOperationStatus) {            /* Check status */    
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <ESP8266_Init+0xe4>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_DEVICENOTCONNECTED);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80028f0:	2302      	movs	r3, #2
 80028f2:	e02b      	b.n	800294c <ESP8266_Init+0x13c>
    }
    
#if ESP8266_ECHO
    SendCommand(ESP8266, ESP8266_COMMAND_ATE, "ATE1\r\n", "ATE1");  /* Enable echo if not already */
#else
    SendCommand(ESP8266, ESP8266_COMMAND_ATE, "ATE0\r\n", "ATE0");  /* Disable echo if not already */
 80028f4:	4b20      	ldr	r3, [pc, #128]	; (8002978 <ESP8266_Init+0x168>)
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <ESP8266_Init+0x16c>)
 80028f8:	210d      	movs	r1, #13
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fdbe 	bl	800147c <SendCommand>
#endif
    ESP8266_WaitReady(ESP8266);                             /* Wait till idle */
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fad3 	bl	8002eac <ESP8266_WaitReady>
    
    while (ESP8266_SetMux(ESP8266, 0) != ESP_OK);           /* Enable multiple connections */
 8002906:	bf00      	nop
 8002908:	2100      	movs	r1, #0
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe ff0a 	bl	8001724 <ESP8266_SetMux>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f8      	bne.n	8002908 <ESP8266_Init+0xf8>
    while (ESP8266_Setdinfo(ESP8266, 1) != ESP_OK);         /* Enable IP and PORT to be shown on +IPD statement */
 8002916:	bf00      	nop
 8002918:	2101      	movs	r1, #1
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe ff52 	bl	80017c4 <ESP8266_Setdinfo>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f8      	bne.n	8002918 <ESP8266_Init+0x108>
    while (ESP8266_SetMode(ESP8266, ESP8266_Mode_STA_AP) != ESP_OK);    /* Set mode to STA+AP by default */
 8002926:	bf00      	nop
 8002928:	2103      	movs	r1, #3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fb20 	bl	8002f70 <ESP8266_SetMode>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f8      	bne.n	8002928 <ESP8266_Init+0x118>
    while (ESP8266_GetSTAMAC(ESP8266) != ESP_OK);           /* Get station MAC */
 8002936:	bf00      	nop
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fbbb 	bl	80030b4 <ESP8266_GetSTAMAC>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f9      	bne.n	8002938 <ESP8266_Init+0x128>
//    while (ESP8266_GetAPMAC(ESP8266) != ESP_OK);            /* Get softAP MAC */
//    while (ESP8266_GetAPIP(ESP8266) != ESP_OK);             /* Get softAP IP */
    
    return ESP8266_WaitReady(ESP8266);                      /* Return wait ready status for last operation */
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fab1 	bl	8002eac <ESP8266_WaitReady>
 800294a:	4603      	mov	r3, r0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	200017bc 	.word	0x200017bc
 8002958:	2000178c 	.word	0x2000178c
 800295c:	200019bc 	.word	0x200019bc
 8002960:	200017a4 	.word	0x200017a4
 8002964:	48000800 	.word	0x48000800
 8002968:	080113b0 	.word	0x080113b0
 800296c:	080114cc 	.word	0x080114cc
 8002970:	0801137c 	.word	0x0801137c
 8002974:	080114d8 	.word	0x080114d8
 8002978:	080114e0 	.word	0x080114e0
 800297c:	080114e8 	.word	0x080114e8

08002980 <ESP8266_Update>:
}

/******************************************/
/*          UPDATE STACK PROCESS          */
/******************************************/
ESP8266_Result_t ESP8266_Update(ESP8266_t* ESP8266) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b0aa      	sub	sp, #168	; 0xa8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
    char ch, Received[128];
    uint8_t lastcmd;
    uint16_t stringlength, receivedleft;    
    
    if (ESP8266->Timeout == 0) {                            /* If timeout is set to 0 */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <ESP8266_Update+0x18>
        ESP8266->Timeout = 30000;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f247 5230 	movw	r2, #30000	; 0x7530
 8002996:	619a      	str	r2, [r3, #24]
    }
    
    if ((ESP8266->Time - ESP8266->StartTime) > ESP8266->Timeout) {  /* Check timeout */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	1ad2      	subs	r2, r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d955      	bls.n	8002a56 <ESP8266_Update+0xd6>
        lastcmd = ESP8266->ActiveCommand;                   /* Save temporary active command */
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;      /* Timeout reached, reset command */        
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
        if (lastcmd == ESP8266_COMMAND_CIPSTART) {          /* Timeout reached */
 80029b8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80029bc:	2b0a      	cmp	r3, #10
 80029be:	d14a      	bne.n	8002a56 <ESP8266_Update+0xd6>
            ESP8266_RESET_CONNECTION(ESP8266, &ESP8266->Connection[ESP8266->StartConnectionSent]);   /* We get timeout on cipstart */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 80029c6:	4619      	mov	r1, r3
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	232c      	movs	r3, #44	; 0x2c
 80029cc:	fb03 f301 	mul.w	r3, r3, r1
 80029d0:	4413      	add	r3, r2
 80029d2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80029d6:	7913      	ldrb	r3, [r2, #4]
 80029d8:	f36f 0300 	bfc	r3, #0, #1
 80029dc:	7113      	strb	r3, [r2, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 80029e4:	4619      	mov	r1, r3
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	232c      	movs	r3, #44	; 0x2c
 80029ea:	fb03 f301 	mul.w	r3, r3, r1
 80029ee:	4413      	add	r3, r2
 80029f0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80029f4:	7913      	ldrb	r3, [r2, #4]
 80029f6:	f36f 0341 	bfc	r3, #1, #1
 80029fa:	7113      	strb	r3, [r2, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8002a02:	4619      	mov	r1, r3
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	232c      	movs	r3, #44	; 0x2c
 8002a08:	fb03 f301 	mul.w	r3, r3, r1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002a12:	7913      	ldrb	r3, [r2, #4]
 8002a14:	f36f 1386 	bfc	r3, #6, #1
 8002a18:	7113      	strb	r3, [r2, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8002a20:	4619      	mov	r1, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	232c      	movs	r3, #44	; 0x2c
 8002a26:	fb03 f301 	mul.w	r3, r3, r1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002a30:	7913      	ldrb	r3, [r2, #4]
 8002a32:	f36f 1345 	bfc	r3, #5, #1
 8002a36:	7113      	strb	r3, [r2, #4]
            ESP8266_Callback_ClientConnectionTimeout(ESP8266, &ESP8266->Connection[ESP8266->StartConnectionSent]);  /* Call user function */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8002a3e:	461a      	mov	r2, r3
 8002a40:	232c      	movs	r3, #44	; 0x2c
 8002a42:	fb03 f302 	mul.w	r3, r3, r2
 8002a46:	3318      	adds	r3, #24
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 ff7c 	bl	800394e <ESP8266_Callback_ClientConnectionTimeout>
        }
    }
    
    if (ESP8266->ActiveCommand == ESP8266_COMMAND_SENDDATA) {   /* We are waiting to send data */
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b1d      	cmp	r3, #29
 8002a5c:	d13d      	bne.n	8002ada <ESP8266_Update+0x15a>
        if (ESP8266->Flags.F.WaitForWrapper) {              /* Check what we are searching for */
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d035      	beq.n	8002ada <ESP8266_Update+0x15a>
            int16_t found;
            uint8_t dummy[2];
            
            if ((found = BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2)) >= 0) {    /* Wait for character */
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4987      	ldr	r1, [pc, #540]	; (8002c90 <ESP8266_Update+0x310>)
 8002a72:	4888      	ldr	r0, [pc, #544]	; (8002c94 <ESP8266_Update+0x314>)
 8002a74:	f7fd ffb6 	bl	80009e4 <BUFFER_Find>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8002a7e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	db0b      	blt.n	8002a9e <ESP8266_Update+0x11e>
                if (found == 0) {
 8002a86:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11e      	bne.n	8002acc <ESP8266_Update+0x14c>
                    BUFFER_Read(&USART_Buffer, dummy, 2);   /* Make a dummy read */
 8002a8e:	f107 0308 	add.w	r3, r7, #8
 8002a92:	2202      	movs	r2, #2
 8002a94:	4619      	mov	r1, r3
 8002a96:	487f      	ldr	r0, [pc, #508]	; (8002c94 <ESP8266_Update+0x314>)
 8002a98:	f7fd fe8a 	bl	80007b0 <BUFFER_Read>
 8002a9c:	e016      	b.n	8002acc <ESP8266_Update+0x14c>
                        ESP8266_LL_SetRTS(ESP_RTS_LOW);
                        RTSStatus = ESP_RTS_LOW;
                    }
#endif
                }
            } else if ((found = BUFFER_Find(&TMP_Buffer, (uint8_t *)"> ", 2)) >= 0) {
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	497b      	ldr	r1, [pc, #492]	; (8002c90 <ESP8266_Update+0x310>)
 8002aa2:	487d      	ldr	r0, [pc, #500]	; (8002c98 <ESP8266_Update+0x318>)
 8002aa4:	f7fd ff9e 	bl	80009e4 <BUFFER_Find>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8002aae:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0a      	blt.n	8002acc <ESP8266_Update+0x14c>
                if (found == 0) {
 8002ab6:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <ESP8266_Update+0x14c>
                    BUFFER_Read(&TMP_Buffer, dummy, 2);     /* Make 2 dummy reads */
 8002abe:	f107 0308 	add.w	r3, r7, #8
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4874      	ldr	r0, [pc, #464]	; (8002c98 <ESP8266_Update+0x318>)
 8002ac8:	f7fd fe72 	bl	80007b0 <BUFFER_Read>
                }
            }
            if (found >= 0) {
 8002acc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db02      	blt.n	8002ada <ESP8266_Update+0x15a>
                ProcessSendData(ESP8266);                   /* Send data */
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7fe fdcb 	bl	8001670 <ProcessSendData>
            }
        }
    }
    
    if (                                                    /* If AT+UART command was used, only check if "OK" exists in buffer */
        ESP8266->ActiveCommand == ESP8266_COMMAND_UART &&   /* Active command is UART change */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
    if (                                                    /* If AT+UART command was used, only check if "OK" exists in buffer */
 8002ade:	2b11      	cmp	r3, #17
 8002ae0:	d137      	bne.n	8002b52 <ESP8266_Update+0x1d2>
        !ESP8266->IPD.InIPD                                 /* We are not in IPD mode */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
        ESP8266->ActiveCommand == ESP8266_COMMAND_UART &&   /* Active command is UART change */
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d132      	bne.n	8002b52 <ESP8266_Update+0x1d2>
    ) {
        if (BUFFER_Find(&USART_Buffer, (uint8_t *)ESP8266_RESPONSE_OK, 4) >= 0) {   /* Check for "OK\r" */
 8002aec:	2204      	movs	r2, #4
 8002aee:	496b      	ldr	r1, [pc, #428]	; (8002c9c <ESP8266_Update+0x31c>)
 8002af0:	4868      	ldr	r0, [pc, #416]	; (8002c94 <ESP8266_Update+0x314>)
 8002af2:	f7fd ff77 	bl	80009e4 <BUFFER_Find>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db2a      	blt.n	8002b52 <ESP8266_Update+0x1d2>
            BUFFER_Reset(&USART_Buffer);                    /* Clear buffer, invalid all data */
 8002afc:	4865      	ldr	r0, [pc, #404]	; (8002c94 <ESP8266_Update+0x314>)
 8002afe:	f7fd ff24 	bl	800094a <BUFFER_Reset>
            ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* We are OK here */
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
            ESP8266->Flags.F.LastOperationStatus = 1;       /* Last command is OK */
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        }
    }
    
    while (                                                 /* Get string from USART buffer if we are not in IPD mode */
 8002b16:	e01c      	b.n	8002b52 <ESP8266_Update+0x1d2>
        if (RTSStatus != ESP_RTS_LOW) {
            RTSStatus = ESP_RTS_LOW;                        /* Set CTS low */
            ESP8266_LL_SetRTS(ESP_RTS_LOW);
        }
#endif
        receivedleft = ParseReceived(ESP8266, Received, stringlength, 1);   /* Parse received string */
 8002b18:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002b1c:	f107 010c 	add.w	r1, r7, #12
 8002b20:	2301      	movs	r3, #1
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe ffca 	bl	8001abc <ParseReceived>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        if (receivedleft > 0) {                             /* Copy bytes we didn't proceed to beginning of buffer, this should never happen but just in case. If should be handled in if statement below */
 8002b2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <ESP8266_Update+0x1d2>
#if ESP8266_USE_CTS
            ESP8266_LL_SetRTS(ESP_RTS_HIGH);                /* Disable receive operations */
#endif
            BUFFER_WriteToTop(&USART_Buffer, (uint8_t *)&Received[stringlength - receivedleft], receivedleft); /* Write remaining data to top of memory */
 8002b36:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002b3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f107 020c 	add.w	r2, r7, #12
 8002b44:	4413      	add	r3, r2
 8002b46:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4851      	ldr	r0, [pc, #324]	; (8002c94 <ESP8266_Update+0x314>)
 8002b4e:	f7fd fdd2 	bl	80006f6 <BUFFER_WriteToTop>
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
    while (                                                 /* Get string from USART buffer if we are not in IPD mode */
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d12b      	bne.n	8002bb4 <ESP8266_Update+0x234>
        (stringlength = BUFFER_ReadString(&USART_Buffer, Received, sizeof(Received))) > 0   /* Something in USART buffer */
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	4619      	mov	r1, r3
 8002b64:	484b      	ldr	r0, [pc, #300]	; (8002c94 <ESP8266_Update+0x314>)
 8002b66:	f7fd ffc5 	bl	8000af4 <BUFFER_ReadString>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
 8002b70:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1cf      	bne.n	8002b18 <ESP8266_Update+0x198>
            ESP8266_LL_SetRTS(ESP_RTS_LOW);                 /* Enable receive operations */
#endif
        }
    }
    
    while (                                                 /* Get string from TMP buffer when no command active */
 8002b78:	e01c      	b.n	8002bb4 <ESP8266_Update+0x234>
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
        ESP8266->ActiveCommand == ESP8266_COMMAND_IDLE &&   /* We are in IDLE mode */
        (stringlength = BUFFER_ReadString(&TMP_Buffer, Received, sizeof(Received))) > 0 /* Something in TMP buffer */
    ) {    
        receivedleft = ParseReceived(ESP8266, Received, stringlength, 0);   /* Parse received string */
 8002b7a:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002b7e:	f107 010c 	add.w	r1, r7, #12
 8002b82:	2300      	movs	r3, #0
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe ff99 	bl	8001abc <ParseReceived>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        if (receivedleft > 0) {
 8002b90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00d      	beq.n	8002bb4 <ESP8266_Update+0x234>
            BUFFER_WriteToTop(&TMP_Buffer, (uint8_t *)&Received[stringlength - receivedleft], receivedleft);    /* Write data to top of buffer */
 8002b98:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002b9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f107 020c 	add.w	r2, r7, #12
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002bac:	4619      	mov	r1, r3
 8002bae:	483a      	ldr	r0, [pc, #232]	; (8002c98 <ESP8266_Update+0x318>)
 8002bb0:	f7fd fda1 	bl	80006f6 <BUFFER_WriteToTop>
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
    while (                                                 /* Get string from TMP buffer when no command active */
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d111      	bne.n	8002be2 <ESP8266_Update+0x262>
        ESP8266->ActiveCommand == ESP8266_COMMAND_IDLE &&   /* We are in IDLE mode */
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <ESP8266_Update+0x262>
        (stringlength = BUFFER_ReadString(&TMP_Buffer, Received, sizeof(Received))) > 0 /* Something in TMP buffer */
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4832      	ldr	r0, [pc, #200]	; (8002c98 <ESP8266_Update+0x318>)
 8002bd0:	f7fd ff90 	bl	8000af4 <BUFFER_ReadString>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        ESP8266->ActiveCommand == ESP8266_COMMAND_IDLE &&   /* We are in IDLE mode */
 8002bda:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1cb      	bne.n	8002b7a <ESP8266_Update+0x1fa>
        }
    }
    
    if (!ESP8266->IPD.InIPD) {                              /* Manually check for IPD statements, +IPD format: +IPD,a,bbbb,ccc.ccc.ccc.ccc,ddddd: */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d13e      	bne.n	8002c6a <ESP8266_Update+0x2ea>
        int32_t ipd_pos;
        
        if (USART_Buffer.Buffer[USART_Buffer.Out] == '+') { /* Check if first character to read is plus sign, small optimization to prevent buffer search all the time */
 8002bec:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <ESP8266_Update+0x314>)
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <ESP8266_Update+0x314>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b2b      	cmp	r3, #43	; 0x2b
 8002bfa:	d136      	bne.n	8002c6a <ESP8266_Update+0x2ea>
            ipd_pos = BUFFER_Find(&USART_Buffer, (uint8_t *)"+IPD,", 5);    /* Try to find +IPD statement in buffer */
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	4928      	ldr	r1, [pc, #160]	; (8002ca0 <ESP8266_Update+0x320>)
 8002c00:	4824      	ldr	r0, [pc, #144]	; (8002c94 <ESP8266_Update+0x314>)
 8002c02:	f7fd feef 	bl	80009e4 <BUFFER_Find>
 8002c06:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
            if (ipd_pos == 0) {                             /* +IPD is on start of buffer read operations */
 8002c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d12b      	bne.n	8002c6a <ESP8266_Update+0x2ea>
                ipd_pos = BUFFER_Find(&USART_Buffer, (uint8_t *)":", 1);
 8002c12:	2201      	movs	r2, #1
 8002c14:	4923      	ldr	r1, [pc, #140]	; (8002ca4 <ESP8266_Update+0x324>)
 8002c16:	481f      	ldr	r0, [pc, #124]	; (8002c94 <ESP8266_Update+0x314>)
 8002c18:	f7fd fee4 	bl	80009e4 <BUFFER_Find>
 8002c1c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (ipd_pos > 0 &&  ipd_pos < 35) {         /* Check if colon exists and is in valid range */
 8002c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	dd20      	ble.n	8002c6a <ESP8266_Update+0x2ea>
 8002c28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c2c:	2b22      	cmp	r3, #34	; 0x22
 8002c2e:	dc1c      	bgt.n	8002c6a <ESP8266_Update+0x2ea>
                    stringlength = BUFFER_Read(&USART_Buffer, (uint8_t *)Received, ipd_pos + 1);    /* Read from buffer until colon is received */
 8002c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c34:	3301      	adds	r3, #1
 8002c36:	461a      	mov	r2, r3
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4815      	ldr	r0, [pc, #84]	; (8002c94 <ESP8266_Update+0x314>)
 8002c40:	f7fd fdb6 	bl	80007b0 <BUFFER_Read>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                    Received[stringlength] = 0;             /* Add zero to the end of read string */
 8002c4a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002c4e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c52:	4413      	add	r3, r2
 8002c54:	2200      	movs	r2, #0
 8002c56:	f803 2c9c 	strb.w	r2, [r3, #-156]
                    ParseReceived(ESP8266, Received, stringlength, 1);    /* Start parsing +IPD statement */
 8002c5a:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002c5e:	f107 010c 	add.w	r1, r7, #12
 8002c62:	2301      	movs	r3, #1
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fe ff29 	bl	8001abc <ParseReceived>
                }
            }
        }
    }
    
    if (ESP8266->IPD.InIPD) {                               /* If we are in IPD mode */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80f9 	beq.w	8002e68 <ESP8266_Update+0x4e8>
        BUFFER_t* buff;
        if (ESP8266->IPD.USART_Buffer) {                    /* Get proper buffer for operation */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <ESP8266_Update+0x308>
            buff = &USART_Buffer;                           /* Use USART buffer as working buffer */
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <ESP8266_Update+0x314>)
 8002c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c86:	e039      	b.n	8002cfc <ESP8266_Update+0x37c>
        } else {
            buff = &TMP_Buffer;                             /* Use TMP buffer as working buffer */
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <ESP8266_Update+0x318>)
 8002c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }
        
        while (                                             /* If anything received */
 8002c8e:	e035      	b.n	8002cfc <ESP8266_Update+0x37c>
 8002c90:	080114f0 	.word	0x080114f0
 8002c94:	200017a4 	.word	0x200017a4
 8002c98:	2000178c 	.word	0x2000178c
 8002c9c:	0801137c 	.word	0x0801137c
 8002ca0:	080113c4 	.word	0x080113c4
 8002ca4:	0801126c 	.word	0x0801126c
            ESP8266->IPD.PtrTotal < ESP8266->Connection[ESP8266->IPD.ConnNumber].BytesReceived &&   /* Until everything received*/
            BUFFER_GetFull(buff) > 0                        /* Data are available in buffer */
        ) {
            BUFFER_Read(buff, (uint8_t *)&ch, 1);           /* Read from buffer */
 8002ca8:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 8002cac:	2201      	movs	r2, #1
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002cb4:	f7fd fd7c 	bl	80007b0 <BUFFER_Read>
            if (RTSStatus != ESP_RTS_LOW) {                 /* Set CTS low again */
                RTSStatus = ESP_RTS_LOW;
                ESP8266_LL_SetRTS(ESP_RTS_LOW);
            }
#endif    
            ESP8266->Connection[ESP8266->IPD.ConnNumber].Data[ESP8266->IPD.InPtr] = ch; /* Add from buffer */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	232c      	movs	r3, #44	; 0x2c
 8002cc4:	fb03 f301 	mul.w	r3, r3, r1
 8002cc8:	4413      	add	r3, r2
 8002cca:	3330      	adds	r3, #48	; 0x30
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	f8b2 214c 	ldrh.w	r2, [r2, #332]	; 0x14c
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8002cda:	701a      	strb	r2, [r3, #0]
            ESP8266->IPD.InPtr++;                           /* Increase current packet pointer */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
            ESP8266->IPD.PtrTotal++;                        /* Increase global packet pointer */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
            ESP8266->IPD.PtrTotal < ESP8266->Connection[ESP8266->IPD.ConnNumber].BytesReceived &&   /* Until everything received*/
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002d02:	4619      	mov	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	232c      	movs	r3, #44	; 0x2c
 8002d10:	fb03 f300 	mul.w	r3, r3, r0
 8002d14:	4413      	add	r3, r2
 8002d16:	3328      	adds	r3, #40	; 0x28
 8002d18:	681b      	ldr	r3, [r3, #0]
        while (                                             /* If anything received */
 8002d1a:	4299      	cmp	r1, r3
 8002d1c:	d206      	bcs.n	8002d2c <ESP8266_Update+0x3ac>
            BUFFER_GetFull(buff) > 0                        /* Data are available in buffer */
 8002d1e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002d22:	f7fd fde3 	bl	80008ec <BUFFER_GetFull>
 8002d26:	4603      	mov	r3, r0
            ESP8266->IPD.PtrTotal < ESP8266->Connection[ESP8266->IPD.ConnNumber].BytesReceived &&   /* Until everything received*/
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1bd      	bne.n	8002ca8 <ESP8266_Update+0x328>
                ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.FirstPacket = 0;
            }
#endif
        }
        
        if (ESP8266->IPD.PtrTotal >= ESP8266->Connection[ESP8266->IPD.ConnNumber].BytesReceived) {  /* Check if everything received */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002d32:	4619      	mov	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	232c      	movs	r3, #44	; 0x2c
 8002d40:	fb03 f300 	mul.w	r3, r3, r0
 8002d44:	4413      	add	r3, r2
 8002d46:	3328      	adds	r3, #40	; 0x28
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4299      	cmp	r1, r3
 8002d4c:	f0c0 808c 	bcc.w	8002e68 <ESP8266_Update+0x4e8>
            char* ptr;
            ESP8266->IPD.InIPD = 0;                         /* Not in IPD anymore */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
            
            ESP8266->Connection[ESP8266->IPD.ConnNumber].DataSize = ESP8266->IPD.InPtr; /* Set package data size */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002d5e:	4618      	mov	r0, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8b3 114c 	ldrh.w	r1, [r3, #332]	; 0x14c
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	232c      	movs	r3, #44	; 0x2c
 8002d6a:	fb03 f300 	mul.w	r3, r3, r0
 8002d6e:	4413      	add	r3, r2
 8002d70:	3334      	adds	r3, #52	; 0x34
 8002d72:	460a      	mov	r2, r1
 8002d74:	801a      	strh	r2, [r3, #0]
            ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.LastPart = 1;  /* Last part of package */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	232c      	movs	r3, #44	; 0x2c
 8002d82:	fb03 f301 	mul.w	r3, r3, r1
 8002d86:	4413      	add	r3, r2
 8002d88:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002d8c:	7913      	ldrb	r3, [r2, #4]
 8002d8e:	f043 0310 	orr.w	r3, r3, #16
 8002d92:	7113      	strb	r3, [r2, #4]
            
            if (                                            /* We have data, lets see if Content-Length exists and save it */
                ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.FirstPacket &&
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	232c      	movs	r3, #44	; 0x2c
 8002da0:	fb03 f301 	mul.w	r3, r3, r1
 8002da4:	4413      	add	r3, r2
 8002da6:	3340      	adds	r3, #64	; 0x40
 8002da8:	791b      	ldrb	r3, [r3, #4]
 8002daa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002dae:	b2db      	uxtb	r3, r3
            if (                                            /* We have data, lets see if Content-Length exists and save it */
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d04a      	beq.n	8002e4a <ESP8266_Update+0x4ca>
                (
                    (ptr = strstr(ESP8266->Connection[ESP8266->IPD.ConnNumber].Data, "Content-Length:")) != NULL ||
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002dba:	4619      	mov	r1, r3
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	232c      	movs	r3, #44	; 0x2c
 8002dc0:	fb03 f301 	mul.w	r3, r3, r1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3330      	adds	r3, #48	; 0x30
 8002dc8:	681b      	ldr	r3, [r3, #0]
                ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.FirstPacket &&
 8002dca:	492d      	ldr	r1, [pc, #180]	; (8002e80 <ESP8266_Update+0x500>)
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00d feab 	bl	8010b28 <strstr>
 8002dd2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8002dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d114      	bne.n	8002e08 <ESP8266_Update+0x488>
                    (ptr = strstr(ESP8266->Connection[ESP8266->IPD.ConnNumber].Data, "content-length:")) != NULL
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002de4:	4619      	mov	r1, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	232c      	movs	r3, #44	; 0x2c
 8002dea:	fb03 f301 	mul.w	r3, r3, r1
 8002dee:	4413      	add	r3, r2
 8002df0:	3330      	adds	r3, #48	; 0x30
 8002df2:	681b      	ldr	r3, [r3, #0]
                    (ptr = strstr(ESP8266->Connection[ESP8266->IPD.ConnNumber].Data, "Content-Length:")) != NULL ||
 8002df4:	4923      	ldr	r1, [pc, #140]	; (8002e84 <ESP8266_Update+0x504>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f00d fe96 	bl	8010b28 <strstr>
 8002dfc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8002e00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <ESP8266_Update+0x4ca>
                )
            ) {
                ptr += 15;                                  /* Increase pointer and parse number */
 8002e08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e0c:	330f      	adds	r3, #15
 8002e0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                if (*ptr == ' ') {
 8002e12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d104      	bne.n	8002e26 <ESP8266_Update+0x4a6>
                    ptr++;
 8002e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e20:	3301      	adds	r3, #1
 8002e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                }
                ESP8266->Connection[ESP8266->IPD.ConnNumber].ContentLength = ParseNumber(ptr, NULL);    /* Parse content length */
 8002e26:	2100      	movs	r1, #0
 8002e28:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002e2c:	f7fd ff3e 	bl	8000cac <ParseNumber>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002e38:	4618      	mov	r0, r3
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	232c      	movs	r3, #44	; 0x2c
 8002e40:	fb03 f300 	mul.w	r3, r3, r0
 8002e44:	4413      	add	r3, r2
 8002e46:	3338      	adds	r3, #56	; 0x38
 8002e48:	6019      	str	r1, [r3, #0]
            }
            ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.CallDataReceived = 1;  /* Set flag to trigger callback for data received */
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002e50:	4619      	mov	r1, r3
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	232c      	movs	r3, #44	; 0x2c
 8002e56:	fb03 f301 	mul.w	r3, r3, r1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002e60:	7913      	ldrb	r3, [r2, #4]
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	7113      	strb	r3, [r2, #4]
        }
    }
    
    CallConnectionCallbacks(ESP8266);                       /* Call user functions on connections */
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe fb6b 	bl	8001544 <CallConnectionCallbacks>
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);              /* Return OK */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	37a8      	adds	r7, #168	; 0xa8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	080114f4 	.word	0x080114f4
 8002e84:	08011504 	.word	0x08011504

08002e88 <ESP8266_TimeUpdate>:

/******************************************/
/*           STACK TIME UPDATE            */
/******************************************/
void ESP8266_TimeUpdate(ESP8266_t* ESP8266, uint32_t time_increase) {
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
    ESP8266->Time += time_increase;                         /* Increase time */
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <ESP8266_WaitReady>:

/******************************************/
/*          DEVICE READY STATUS           */
/******************************************/
ESP8266_Result_t ESP8266_WaitReady(ESP8266_t* ESP8266) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    do {                                                    /* Do job */
        if (ESP8266->Flags.F.WaitForWrapper) {              /* Check for wrapper */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <ESP8266_WaitReady+0x28>
            if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {  /* We have found it, stop execution here */
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <ESP8266_WaitReady+0x4c>)
 8002ec8:	480c      	ldr	r0, [pc, #48]	; (8002efc <ESP8266_WaitReady+0x50>)
 8002eca:	f7fd fd8b 	bl	80009e4 <BUFFER_Find>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	da07      	bge.n	8002ee4 <ESP8266_WaitReady+0x38>
                //ESP8266->Flags.F.WaitForWrapper = 0;
                break;
            }
        }
        ESP8266_Update(ESP8266);                            /* Update device */
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fd53 	bl	8002980 <ESP8266_Update>
    } while (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e8      	bne.n	8002eb4 <ESP8266_WaitReady+0x8>
 8002ee2:	e000      	b.n	8002ee6 <ESP8266_WaitReady+0x3a>
                break;
 8002ee4:	bf00      	nop
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);              /* Return OK */
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	080114f0 	.word	0x080114f0
 8002efc:	200017a4 	.word	0x200017a4

08002f00 <ESP8266_WifiConnect>:
/******************************************/
ESP8266_Result_t ESP8266_WifiDisconnect(ESP8266_t* ESP8266) {
    return SendCommand(ESP8266, ESP8266_COMMAND_CWQAP, "AT+CWQAP\r\n", "AT+CWQAP"); /* Send command */
}

ESP8266_Result_t ESP8266_WifiConnect(ESP8266_t* ESP8266, const char* ssid, const char* pass) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
    ESP8266_CHECK_IDLE(ESP8266);                            /* Check idle */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <ESP8266_WifiConnect+0x26>
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fd33 	bl	8002980 <ESP8266_Update>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2206      	movs	r2, #6
 8002f1e:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8002f22:	2306      	movs	r3, #6
 8002f24:	e018      	b.n	8002f58 <ESP8266_WifiConnect+0x58>

    ESP8266_USARTSENDSTRING("AT+CWJAP=\"");             /* Send commands separate with escape strings */
 8002f26:	210a      	movs	r1, #10
 8002f28:	480d      	ldr	r0, [pc, #52]	; (8002f60 <ESP8266_WifiConnect+0x60>)
 8002f2a:	f000 f991 	bl	8003250 <ESP8266_LL_USARTSend>
    EscapeStringAndSend((char *)ssid);
 8002f2e:	68b8      	ldr	r0, [r7, #8]
 8002f30:	f7fe fae0 	bl	80014f4 <EscapeStringAndSend>
    ESP8266_USARTSENDSTRING("\",\"");
 8002f34:	2103      	movs	r1, #3
 8002f36:	480b      	ldr	r0, [pc, #44]	; (8002f64 <ESP8266_WifiConnect+0x64>)
 8002f38:	f000 f98a 	bl	8003250 <ESP8266_LL_USARTSend>
    EscapeStringAndSend((char *)pass);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7fe fad9 	bl	80014f4 <EscapeStringAndSend>
    ESP8266_USARTSENDSTRING("\""ESP8266_CRLF);
 8002f42:	2103      	movs	r1, #3
 8002f44:	4808      	ldr	r0, [pc, #32]	; (8002f68 <ESP8266_WifiConnect+0x68>)
 8002f46:	f000 f983 	bl	8003250 <ESP8266_LL_USARTSend>
    
    return SendCommand(ESP8266, ESP8266_COMMAND_CWJAP, NULL, "+CWJAP:");    /* Send command */
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <ESP8266_WifiConnect+0x6c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2103      	movs	r1, #3
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7fe fa93 	bl	800147c <SendCommand>
 8002f56:	4603      	mov	r3, r0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	0801152c 	.word	0x0801152c
 8002f64:	08011374 	.word	0x08011374
 8002f68:	080114c8 	.word	0x080114c8
 8002f6c:	08011450 	.word	0x08011450

08002f70 <ESP8266_SetMode>:
}

/******************************************/
/*             MODE MANAGEMENT            */
/******************************************/
ESP8266_Result_t ESP8266_SetMode(ESP8266_t* ESP8266, ESP8266_Mode_t Mode) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
    uint8_t m = (uint8_t) Mode;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	73fb      	strb	r3, [r7, #15]
    
    ESP8266_CHECK_IDLE(ESP8266);                            /* Check IDLE mode */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <ESP8266_SetMode+0x2a>
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fcf9 	bl	8002980 <ESP8266_Update>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2206      	movs	r2, #6
 8002f92:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8002f96:	2306      	movs	r3, #6
 8002f98:	e035      	b.n	8003006 <ESP8266_SetMode+0x96>
    
    m += '0';                                               /* Go to ASCII number */
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	3330      	adds	r3, #48	; 0x30
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	73fb      	strb	r3, [r7, #15]
    ESP8266_USARTSENDSTRING("AT+CWMODE=");              /* Send command */
 8002fa2:	210a      	movs	r1, #10
 8002fa4:	481a      	ldr	r0, [pc, #104]	; (8003010 <ESP8266_SetMode+0xa0>)
 8002fa6:	f000 f953 	bl	8003250 <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDCHAR(&m);
 8002faa:	f107 030f 	add.w	r3, r7, #15
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f94d 	bl	8003250 <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDSTRING(ESP8266_CRLF);
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4816      	ldr	r0, [pc, #88]	; (8003014 <ESP8266_SetMode+0xa4>)
 8002fba:	f000 f949 	bl	8003250 <ESP8266_LL_USARTSend>
    if (SendCommand(ESP8266, ESP8266_COMMAND_CWMODE, NULL, "AT+CWMODE") != ESP_OK) {    /* Send command */
 8002fbe:	4b16      	ldr	r3, [pc, #88]	; (8003018 <ESP8266_SetMode+0xa8>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2105      	movs	r1, #5
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fe fa59 	bl	800147c <SendCommand>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <ESP8266_SetMode+0x68>
        return ESP8266->Result;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 8002fd6:	e016      	b.n	8003006 <ESP8266_SetMode+0x96>
    }
    
    ESP8266->SentMode = Mode;                               /* Save mode we sent */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
    ESP8266_WaitReady(ESP8266);                             /* Wait till command end */
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff63 	bl	8002eac <ESP8266_WaitReady>
    
    if (ESP8266->Mode != Mode) {                            /* Check status */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d005      	beq.n	8002ffe <ESP8266_SetMode+0x8e>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);       /* Return error */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e003      	b.n	8003006 <ESP8266_SetMode+0x96>
    }
    return ESP8266_GetAP(ESP8266);                          /* Now get settings for current AP mode */
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f87a 	bl	80030f8 <ESP8266_GetAP>
 8003004:	4603      	mov	r3, r0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	080115ac 	.word	0x080115ac
 8003014:	08011350 	.word	0x08011350
 8003018:	080115b8 	.word	0x080115b8

0800301c <ESP8266_RequestSendData>:

/******************************************/
/*            SEND NETWORK DATA           */
/******************************************/
ESP8266_Result_t ESP8266_RequestSendData(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
    uint8_t num;
    ESP8266_CHECK_IDLE(ESP8266);                            /* Check idle state */
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <ESP8266_RequestSendData+0x24>
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fca6 	bl	8002980 <ESP8266_Update>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2206      	movs	r2, #6
 8003038:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 800303c:	2306      	movs	r3, #6
 800303e:	e01f      	b.n	8003080 <ESP8266_RequestSendData+0x64>
    
    num = Connection->Number + '0';                         /* Go to ASCII */
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	3330      	adds	r3, #48	; 0x30
 8003046:	73fb      	strb	r3, [r7, #15]
    
    ESP8266_USARTSENDSTRING("AT+CIPSENDEX=");               /* Format and send command */
 8003048:	210d      	movs	r1, #13
 800304a:	480f      	ldr	r0, [pc, #60]	; (8003088 <ESP8266_RequestSendData+0x6c>)
 800304c:	f000 f900 	bl	8003250 <ESP8266_LL_USARTSend>
//    ESP8266_USARTSENDCHAR(&num);
    ESP8266_USARTSENDSTRING("2048\r\n");
 8003050:	2106      	movs	r1, #6
 8003052:	480e      	ldr	r0, [pc, #56]	; (800308c <ESP8266_RequestSendData+0x70>)
 8003054:	f000 f8fc 	bl	8003250 <ESP8266_LL_USARTSend>
    
    if (SendCommand(ESP8266, ESP8266_COMMAND_SEND, NULL, NULL) != ESP_OK) { /* Send command */
 8003058:	2300      	movs	r3, #0
 800305a:	2200      	movs	r2, #0
 800305c:	2108      	movs	r1, #8
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe fa0c 	bl	800147c <SendCommand>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <ESP8266_RequestSendData+0x56>
        return ESP8266->Result;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 8003070:	e006      	b.n	8003080 <ESP8266_RequestSendData+0x64>
    }
    ESP8266->LastConnection = Connection;                   /* Save connection pointer */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
    
    return ESP8266->Result;                                 /* Return from function */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	080115c4 	.word	0x080115c4
 800308c:	080115d4 	.word	0x080115d4

08003090 <ESP8266_CloseAllConnections>:
    ESP8266_USARTSENDSTRING(ESP8266_CRLF);
    
    return SendCommand(ESP8266, ESP8266_COMMAND_CLOSE, NULL, NULL); /* Send command */
}

ESP8266_Result_t ESP8266_CloseAllConnections(ESP8266_t* ESP8266) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
    return SendCommand(ESP8266, ESP8266_COMMAND_CLOSE, "AT+CIPCLOSE=5\r\n", NULL);  /* Send command */
 8003098:	2300      	movs	r3, #0
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <ESP8266_CloseAllConnections+0x20>)
 800309c:	2109      	movs	r1, #9
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe f9ec 	bl	800147c <SendCommand>
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	080115ec 	.word	0x080115ec

080030b4 <ESP8266_GetSTAMAC>:
}

/******************************************/
/*            MAC MANIPULATION            */
/******************************************/
ESP8266_Result_t ESP8266_GetSTAMAC(ESP8266_t* ESP8266) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    SendCommand(ESP8266, ESP8266_COMMAND_CIPSTAMAC, "AT+CIPSTAMAC?\r\n", "+CIPSTAMAC"); /* Send command */
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <ESP8266_GetSTAMAC+0x3c>)
 80030be:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <ESP8266_GetSTAMAC+0x40>)
 80030c0:	2118      	movs	r1, #24
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f9da 	bl	800147c <SendCommand>
    if (ESP8266->Result == ESP_OK) {                        /* Check status */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <ESP8266_GetSTAMAC+0x2c>
        ESP8266->Flags.F.STAMACIsSet = 0;                   /* Reset flags */
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80030d8:	f36f 03c3 	bfc	r3, #3, #1
 80030dc:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
    }
    return ESP8266->Result;                                 /* Return stats */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	0801148c 	.word	0x0801148c
 80030f4:	08011670 	.word	0x08011670

080030f8 <ESP8266_GetAP>:
    ESP8266_APs.Count = 0;                                  /* Reset pointer */
    return SendCommand(ESP8266, ESP8266_COMMAND_CWLAP, "AT+CWLAP\r\n", "+CWLAP");   /* Send list command */    
}
#endif

ESP8266_Result_t ESP8266_GetAP(ESP8266_t* ESP8266) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    if (SendCommand(ESP8266, ESP8266_COMMAND_CWSAP, "AT+CWSAP?\r\n", "+CWSAP") != ESP_OK) { /* Send command to read current AP settings */
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <ESP8266_GetAP+0x34>)
 8003102:	4a0b      	ldr	r2, [pc, #44]	; (8003130 <ESP8266_GetAP+0x38>)
 8003104:	210c      	movs	r1, #12
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe f9b8 	bl	800147c <SendCommand>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <ESP8266_GetAP+0x22>
        return ESP8266->Result;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 8003118:	e003      	b.n	8003122 <ESP8266_GetAP+0x2a>
    }
    return ESP8266_WaitReady(ESP8266);                      /* Wait till command end */
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fec6 	bl	8002eac <ESP8266_WaitReady>
 8003120:	4603      	mov	r3, r0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	0801146c 	.word	0x0801146c
 8003130:	080116d8 	.word	0x080116d8

08003134 <ESP8266_StartClientConnectionTCP>:
}

/******************************************/
/*               TCP CLIENT               */
/******************************************/
ESP8266_Result_t ESP8266_StartClientConnectionTCP(ESP8266_t* ESP8266, const char* name, char* location, uint16_t port, void* user_parameters) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af04      	add	r7, sp, #16
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	807b      	strh	r3, [r7, #2]
    return StartClientConnection(ESP8266, ESP8266_ConnectionType_TCP, "TCP", name, location, port, 0, user_parameters);
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	9303      	str	r3, [sp, #12]
 8003146:	2300      	movs	r3, #0
 8003148:	9302      	str	r3, [sp, #8]
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <ESP8266_StartClientConnectionTCP+0x34>)
 8003156:	2100      	movs	r1, #0
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7fe fb83 	bl	8001864 <StartClientConnection>
 800315e:	4603      	mov	r3, r0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	08011720 	.word	0x08011720

0800316c <ESP8266_DataReceived>:
#endif

/******************************************/
/*             DATA RECEIVED              */
/******************************************/
uint16_t ESP8266_DataReceived(uint8_t* ch, uint16_t count) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
    uint32_t r;
    
    r = BUFFER_Write(&USART_Buffer, ch, count);             /* Writes data to USART buffer */
 8003178:	887b      	ldrh	r3, [r7, #2]
 800317a:	461a      	mov	r2, r3
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4805      	ldr	r0, [pc, #20]	; (8003194 <ESP8266_DataReceived+0x28>)
 8003180:	f7fd fa4e 	bl	8000620 <BUFFER_Write>
 8003184:	60f8      	str	r0, [r7, #12]
    return r;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	b29b      	uxth	r3, r3
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200017a4 	.word	0x200017a4

08003198 <ESP8266_Callback_ServerConnectionActive>:
           the ESP8266_Callback_DHCPTimeout could be implemented in the user file
    */
}

/* Called when "x,CONNECT" is detected */
__weak void ESP8266_Callback_ServerConnectionActive(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionActive could be implemented in the user file
    */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <ESP8266_Callback_ServerConnectionClosed>:

/* Called when "x,CLOSED" is detected */
__weak void ESP8266_Callback_ServerConnectionClosed(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionClosed could be implemented in the user file
    */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <ESP8266_Callback_ServerConnectionDataReceived>:

/* Called when "+IPD..." is detected */
__weak void ESP8266_Callback_ServerConnectionDataReceived(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer) {
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionDataReceived could be implemented in the user file
    */
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <ESP8266_Callback_ServerConnectionSendData>:

/* Called when user should fill data buffer to be sent with connection */
__weak uint16_t ESP8266_Callback_ServerConnectionSendData(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer, uint16_t max_buffer_size) {
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	807b      	strh	r3, [r7, #2]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionSendData could be implemented in the user file
    */
    
    /* Return number of bytes in array */
    return 0;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <ESP8266_Callback_ServerConnectionDataSent>:

/* Called when data are send successfully */
__weak void ESP8266_Callback_ServerConnectionDataSent(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionDataSent could be implemented in the user file
    */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <ESP8266_Callback_ServerConnectionDataSentError>:

/* Called when error returned trying to sent data */
__weak void ESP8266_Callback_ServerConnectionDataSentError(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionDataSentError could be implemented in the user file
    */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <ESP8266_Callback_PingFinished>:
           the ESP8266_Callback_PingStarted could be implemented in the user file
    */
}

/* Called when PING command ends */
__weak void ESP8266_Callback_PingFinished(ESP8266_t* ESP8266, ESP8266_Ping_t* Pinging) {
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_PingFinished could be implemented in the user file
    */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <ESP8266_Callback_ConnectedStationsDetected>:
}
#endif

/* Called when AT+CWLIF returns OK */
#if ESP8266_USE_CONNECTED_STATIONS == 1
__weak void ESP8266_Callback_ConnectedStationsDetected(ESP8266_t* ESP8266, ESP8266_ConnectedStations_t* Stations) {
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ConnectedStationsDetected could be implemented in the user file
    */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <ESP8266_LL_USARTSend>:

	/* Return 0 = Successful */
	return 0;
}

uint8_t ESP8266_LL_USARTSend(uint8_t* data, uint16_t count) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
	/* Send data via USART */
	uint16_t countup = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	81fb      	strh	r3, [r7, #14]
	do
	{
		while(huart1.gState != HAL_UART_STATE_READY);
 8003260:	bf00      	nop
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <ESP8266_LL_USARTSend+0x44>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	2b20      	cmp	r3, #32
 8003268:	d1fb      	bne.n	8003262 <ESP8266_LL_USARTSend+0x12>
		//Envia caracter
		HAL_UART_Transmit_IT(&huart1, &data[countup], 1);	//talvez tenha B.O aqui
 800326a:	89fb      	ldrh	r3, [r7, #14]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	2201      	movs	r2, #1
 8003272:	4619      	mov	r1, r3
 8003274:	4807      	ldr	r0, [pc, #28]	; (8003294 <ESP8266_LL_USARTSend+0x44>)
 8003276:	f004 fb3d 	bl	80078f4 <HAL_UART_Transmit_IT>
		countup++;
 800327a:	89fb      	ldrh	r3, [r7, #14]
 800327c:	3301      	adds	r3, #1
 800327e:	81fb      	strh	r3, [r7, #14]
	} while (countup < count);
 8003280:	89fa      	ldrh	r2, [r7, #14]
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	429a      	cmp	r2, r3
 8003286:	d3eb      	bcc.n	8003260 <ESP8266_LL_USARTSend+0x10>
	/* Return 0 = Successful */
	return 0;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200027e8 	.word	0x200027e8

08003298 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	if(rx_index == 0)
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_UART_RxCpltCallback+0x60>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10e      	bne.n	80032c6 <HAL_UART_RxCpltCallback+0x2e>
	{
		for(int i=0; i<392; i++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e007      	b.n	80032be <HAL_UART_RxCpltCallback+0x26>
		{
			rx_buffer[i] = 0;
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <HAL_UART_RxCpltCallback+0x64>)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<392; i++)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3301      	adds	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 80032c4:	dbf3      	blt.n	80032ae <HAL_UART_RxCpltCallback+0x16>
		}
	}
	rx_buffer[rx_index++] = rx_data;
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_UART_RxCpltCallback+0x60>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	b2d1      	uxtb	r1, r2
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_UART_RxCpltCallback+0x60>)
 80032d0:	7011      	strb	r1, [r2, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_UART_RxCpltCallback+0x68>)
 80032d6:	7819      	ldrb	r1, [r3, #0]
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_UART_RxCpltCallback+0x64>)
 80032da:	5499      	strb	r1, [r3, r2]
	ESP8266_DataReceived(&rx_data, 1);
 80032dc:	2101      	movs	r1, #1
 80032de:	4808      	ldr	r0, [pc, #32]	; (8003300 <HAL_UART_RxCpltCallback+0x68>)
 80032e0:	f7ff ff44 	bl	800316c <ESP8266_DataReceived>
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80032e4:	2201      	movs	r2, #1
 80032e6:	4906      	ldr	r1, [pc, #24]	; (8003300 <HAL_UART_RxCpltCallback+0x68>)
 80032e8:	4806      	ldr	r0, [pc, #24]	; (8003304 <HAL_UART_RxCpltCallback+0x6c>)
 80032ea:	f004 fb5f 	bl	80079ac <HAL_UART_Receive_IT>
	__NOP();
 80032ee:	bf00      	nop
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20001dbc 	.word	0x20001dbc
 80032fc:	20002658 	.word	0x20002658
 8003300:	200028e1 	.word	0x200028e1
 8003304:	200027e8 	.word	0x200027e8

08003308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800330e:	f000 fcc0 	bl	8003c92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8003312:	f000 f90f 	bl	8003534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003316:	f000 f9fd 	bl	8003714 <MX_GPIO_Init>
	MX_FATFS_Init();
 800331a:	f006 f9eb 	bl	80096f4 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 800331e:	f00c ff7d 	bl	801021c <MX_USB_HOST_Init>
	MX_USART1_UART_Init();
 8003322:	f000 f9c7 	bl	80036b4 <MX_USART1_UART_Init>
	MX_TIM6_Init();
 8003326:	f000 f98f 	bl	8003648 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800332a:	2201      	movs	r2, #1
 800332c:	4971      	ldr	r1, [pc, #452]	; (80034f4 <main+0x1ec>)
 800332e:	4872      	ldr	r0, [pc, #456]	; (80034f8 <main+0x1f0>)
 8003330:	f004 fb3c 	bl	80079ac <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8003334:	4871      	ldr	r0, [pc, #452]	; (80034fc <main+0x1f4>)
 8003336:	f003 ffdd 	bl	80072f4 <HAL_TIM_Base_Start_IT>


	while (ESP8266_Init(&ESP8266, 115200) != ESP_OK);		//Inicializar módulo ESP8266
 800333a:	bf00      	nop
 800333c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003340:	486f      	ldr	r0, [pc, #444]	; (8003500 <main+0x1f8>)
 8003342:	f7ff fa65 	bl	8002810 <ESP8266_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f7      	bne.n	800333c <main+0x34>
	HAL_Delay(2000);
 800334c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003350:	f000 fd10 	bl	8003d74 <HAL_Delay>

	ESP8266_WifiConnect(&ESP8266, "SAMI", "SAMI");	// Conectar no roteador wifi
 8003354:	4a6b      	ldr	r2, [pc, #428]	; (8003504 <main+0x1fc>)
 8003356:	496b      	ldr	r1, [pc, #428]	; (8003504 <main+0x1fc>)
 8003358:	4869      	ldr	r0, [pc, #420]	; (8003500 <main+0x1f8>)
 800335a:	f7ff fdd1 	bl	8002f00 <ESP8266_WifiConnect>
	HAL_Delay(2000);
 800335e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003362:	f000 fd07 	bl	8003d74 <HAL_Delay>
	ESP8266_WaitReady(&ESP8266);
 8003366:	4866      	ldr	r0, [pc, #408]	; (8003500 <main+0x1f8>)
 8003368:	f7ff fda0 	bl	8002eac <ESP8266_WaitReady>


	main_state = INIT_ESP_STATE;
 800336c:	4b66      	ldr	r3, [pc, #408]	; (8003508 <main+0x200>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_USB_HOST_Process();
 8003372:	f00c ff79 	bl	8010268 <MX_USB_HOST_Process>
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  cam_image();
 8003376:	f00b fc51 	bl	800ec1c <cam_image>
	  ESP8266_Update(&ESP8266);	//atualizar a stack tcp/ip constantemente
 800337a:	4861      	ldr	r0, [pc, #388]	; (8003500 <main+0x1f8>)
 800337c:	f7ff fb00 	bl	8002980 <ESP8266_Update>

	  switch (main_state)
 8003380:	4b61      	ldr	r3, [pc, #388]	; (8003508 <main+0x200>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d01c      	beq.n	80033c4 <main+0xbc>
 800338a:	2b02      	cmp	r3, #2
 800338c:	f000 809f 	beq.w	80034ce <main+0x1c6>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d000      	beq.n	8003396 <main+0x8e>
				ESP8266_WaitReady(&ESP8266);
				main_state = INIT_ESP_STATE;
			}
				break;
			default:
				break;
 8003394:	e0ac      	b.n	80034f0 <main+0x1e8>
				ESP8266_WaitReady(&ESP8266);
 8003396:	485a      	ldr	r0, [pc, #360]	; (8003500 <main+0x1f8>)
 8003398:	f7ff fd88 	bl	8002eac <ESP8266_WaitReady>
				while (ESP8266_StartClientConnectionTCP(&ESP8266,"SAMI","192.168.1.121",8080,NULL)!= ESP_OK);
 800339c:	bf00      	nop
 800339e:	2300      	movs	r3, #0
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	f641 7390 	movw	r3, #8080	; 0x1f90
 80033a6:	4a59      	ldr	r2, [pc, #356]	; (800350c <main+0x204>)
 80033a8:	4956      	ldr	r1, [pc, #344]	; (8003504 <main+0x1fc>)
 80033aa:	4855      	ldr	r0, [pc, #340]	; (8003500 <main+0x1f8>)
 80033ac:	f7ff fec2 	bl	8003134 <ESP8266_StartClientConnectionTCP>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f3      	bne.n	800339e <main+0x96>
				ESP8266_WaitReady(&ESP8266);
 80033b6:	4852      	ldr	r0, [pc, #328]	; (8003500 <main+0x1f8>)
 80033b8:	f7ff fd78 	bl	8002eac <ESP8266_WaitReady>
				main_state = SEND_DATA_STATE;
 80033bc:	4b52      	ldr	r3, [pc, #328]	; (8003508 <main+0x200>)
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
			break;
 80033c2:	e095      	b.n	80034f0 <main+0x1e8>
				if((rx_buffer[rx_index-7] =='E')&&(rx_buffer[rx_index-6] =='R')&&(rx_buffer[rx_index-5] =='R')&&(rx_buffer[rx_index-4] =='O')&&(rx_buffer[rx_index-3] =='R'))
 80033c4:	4b52      	ldr	r3, [pc, #328]	; (8003510 <main+0x208>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	3b07      	subs	r3, #7
 80033ca:	4a52      	ldr	r2, [pc, #328]	; (8003514 <main+0x20c>)
 80033cc:	5cd3      	ldrb	r3, [r2, r3]
 80033ce:	2b45      	cmp	r3, #69	; 0x45
 80033d0:	d121      	bne.n	8003416 <main+0x10e>
 80033d2:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <main+0x208>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	3b06      	subs	r3, #6
 80033d8:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <main+0x20c>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	2b52      	cmp	r3, #82	; 0x52
 80033de:	d11a      	bne.n	8003416 <main+0x10e>
 80033e0:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <main+0x208>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	3b05      	subs	r3, #5
 80033e6:	4a4b      	ldr	r2, [pc, #300]	; (8003514 <main+0x20c>)
 80033e8:	5cd3      	ldrb	r3, [r2, r3]
 80033ea:	2b52      	cmp	r3, #82	; 0x52
 80033ec:	d113      	bne.n	8003416 <main+0x10e>
 80033ee:	4b48      	ldr	r3, [pc, #288]	; (8003510 <main+0x208>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	3b04      	subs	r3, #4
 80033f4:	4a47      	ldr	r2, [pc, #284]	; (8003514 <main+0x20c>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	2b4f      	cmp	r3, #79	; 0x4f
 80033fa:	d10c      	bne.n	8003416 <main+0x10e>
 80033fc:	4b44      	ldr	r3, [pc, #272]	; (8003510 <main+0x208>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	3b03      	subs	r3, #3
 8003402:	4a44      	ldr	r2, [pc, #272]	; (8003514 <main+0x20c>)
 8003404:	5cd3      	ldrb	r3, [r2, r3]
 8003406:	2b52      	cmp	r3, #82	; 0x52
 8003408:	d105      	bne.n	8003416 <main+0x10e>
					transmitido_anterior = 0;
 800340a:	4b43      	ldr	r3, [pc, #268]	; (8003518 <main+0x210>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
					HAL_Delay(20);
 8003410:	2014      	movs	r0, #20
 8003412:	f000 fcaf 	bl	8003d74 <HAL_Delay>
				if(transmitir)	//pode transmitir?
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <main+0x214>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d050      	beq.n	80034c0 <main+0x1b8>
					ESP8266_WaitReady(&ESP8266);
 800341e:	4838      	ldr	r0, [pc, #224]	; (8003500 <main+0x1f8>)
 8003420:	f7ff fd44 	bl	8002eac <ESP8266_WaitReady>
					while (ESP8266_RequestSendData(&ESP8266,ConnectionGlobal)!= ESP_OK);	//requisitar autorizacao de envio de dados
 8003424:	bf00      	nop
 8003426:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <main+0x218>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	4834      	ldr	r0, [pc, #208]	; (8003500 <main+0x1f8>)
 800342e:	f7ff fdf5 	bl	800301c <ESP8266_RequestSendData>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f6      	bne.n	8003426 <main+0x11e>
					ESP8266_WaitReady(&ESP8266);
 8003438:	4831      	ldr	r0, [pc, #196]	; (8003500 <main+0x1f8>)
 800343a:	f7ff fd37 	bl	8002eac <ESP8266_WaitReady>
					if((rx_buffer[rx_index-6] =='F') && (rx_buffer[rx_index-5] == 'A') && (rx_buffer[rx_index-4] == 'I') && (rx_buffer[rx_index-3] == 'L') && (rx_buffer[rx_index-20] == '0'))	//se requisição falhou e não recebeu nenhum byte
 800343e:	4b34      	ldr	r3, [pc, #208]	; (8003510 <main+0x208>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	3b06      	subs	r3, #6
 8003444:	4a33      	ldr	r2, [pc, #204]	; (8003514 <main+0x20c>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	2b46      	cmp	r3, #70	; 0x46
 800344a:	d122      	bne.n	8003492 <main+0x18a>
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <main+0x208>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3b05      	subs	r3, #5
 8003452:	4a30      	ldr	r2, [pc, #192]	; (8003514 <main+0x20c>)
 8003454:	5cd3      	ldrb	r3, [r2, r3]
 8003456:	2b41      	cmp	r3, #65	; 0x41
 8003458:	d11b      	bne.n	8003492 <main+0x18a>
 800345a:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <main+0x208>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	3b04      	subs	r3, #4
 8003460:	4a2c      	ldr	r2, [pc, #176]	; (8003514 <main+0x20c>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	2b49      	cmp	r3, #73	; 0x49
 8003466:	d114      	bne.n	8003492 <main+0x18a>
 8003468:	4b29      	ldr	r3, [pc, #164]	; (8003510 <main+0x208>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	3b03      	subs	r3, #3
 800346e:	4a29      	ldr	r2, [pc, #164]	; (8003514 <main+0x20c>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	2b4c      	cmp	r3, #76	; 0x4c
 8003474:	d10d      	bne.n	8003492 <main+0x18a>
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <main+0x208>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3b14      	subs	r3, #20
 800347c:	4a25      	ldr	r2, [pc, #148]	; (8003514 <main+0x20c>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	2b30      	cmp	r3, #48	; 0x30
 8003482:	d106      	bne.n	8003492 <main+0x18a>
						transmitido_anterior = 0;	//nao transmitiu os dados atuais
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <main+0x210>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
						lernovo = 0;				//nao atualizar o buffer antes de ser enviado
 800348a:	4b26      	ldr	r3, [pc, #152]	; (8003524 <main+0x21c>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e016      	b.n	80034c0 <main+0x1b8>
						ESP8266_LL_USARTSend(&read_image, bytes_read);	//enviar dados
 8003492:	4b25      	ldr	r3, [pc, #148]	; (8003528 <main+0x220>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	4619      	mov	r1, r3
 800349a:	4824      	ldr	r0, [pc, #144]	; (800352c <main+0x224>)
 800349c:	f7ff fed8 	bl	8003250 <ESP8266_LL_USARTSend>
						ESP8266_WaitReady(&ESP8266);
 80034a0:	4817      	ldr	r0, [pc, #92]	; (8003500 <main+0x1f8>)
 80034a2:	f7ff fd03 	bl	8002eac <ESP8266_WaitReady>
						ESP8266_LL_USARTSend("\r\n", 2);				//concluir envio de dados
 80034a6:	2102      	movs	r1, #2
 80034a8:	4821      	ldr	r0, [pc, #132]	; (8003530 <main+0x228>)
 80034aa:	f7ff fed1 	bl	8003250 <ESP8266_LL_USARTSend>
						ESP8266_WaitReady(&ESP8266);
 80034ae:	4814      	ldr	r0, [pc, #80]	; (8003500 <main+0x1f8>)
 80034b0:	f7ff fcfc 	bl	8002eac <ESP8266_WaitReady>
						transmitido_anterior = 1;						//transmitido com sucesso
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <main+0x210>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
						lernovo = 1;									//solicitar atualizacao de buffer
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <main+0x21c>)
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
				HAL_Delay(20);
 80034c0:	2014      	movs	r0, #20
 80034c2:	f000 fc57 	bl	8003d74 <HAL_Delay>
				main_state = SEND_DATA_STATE;
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <main+0x200>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
			break;
 80034cc:	e010      	b.n	80034f0 <main+0x1e8>
				ESP8266_WaitReady(&ESP8266);
 80034ce:	480c      	ldr	r0, [pc, #48]	; (8003500 <main+0x1f8>)
 80034d0:	f7ff fcec 	bl	8002eac <ESP8266_WaitReady>
				while (ESP8266_CloseAllConnections(&ESP8266)!= ESP_OK);
 80034d4:	bf00      	nop
 80034d6:	480a      	ldr	r0, [pc, #40]	; (8003500 <main+0x1f8>)
 80034d8:	f7ff fdda 	bl	8003090 <ESP8266_CloseAllConnections>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f9      	bne.n	80034d6 <main+0x1ce>
				ESP8266_WaitReady(&ESP8266);
 80034e2:	4807      	ldr	r0, [pc, #28]	; (8003500 <main+0x1f8>)
 80034e4:	f7ff fce2 	bl	8002eac <ESP8266_WaitReady>
				main_state = INIT_ESP_STATE;
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <main+0x200>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
				break;
 80034ee:	bf00      	nop
  {
 80034f0:	e73f      	b.n	8003372 <main+0x6a>
 80034f2:	bf00      	nop
 80034f4:	200028e1 	.word	0x200028e1
 80034f8:	200027e8 	.word	0x200027e8
 80034fc:	200028a0 	.word	0x200028a0
 8003500:	200028ec 	.word	0x200028ec
 8003504:	0801174c 	.word	0x0801174c
 8003508:	200027e0 	.word	0x200027e0
 800350c:	08011754 	.word	0x08011754
 8003510:	20001dbc 	.word	0x20001dbc
 8003514:	20002658 	.word	0x20002658
 8003518:	20000034 	.word	0x20000034
 800351c:	20001e0c 	.word	0x20001e0c
 8003520:	20002898 	.word	0x20002898
 8003524:	20000035 	.word	0x20000035
 8003528:	200027e4 	.word	0x200027e4
 800352c:	20001e18 	.word	0x20001e18
 8003530:	08011764 	.word	0x08011764

08003534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b0b8      	sub	sp, #224	; 0xe0
 8003538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800353a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800353e:	2244      	movs	r2, #68	; 0x44
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f00d f9fe 	bl	8010944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003548:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003558:	463b      	mov	r3, r7
 800355a:	2288      	movs	r2, #136	; 0x88
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f00d f9f0 	bl	8010944 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003564:	2310      	movs	r3, #16
 8003566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800356a:	2301      	movs	r3, #1
 800356c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003576:	2360      	movs	r3, #96	; 0x60
 8003578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800357c:	2302      	movs	r3, #2
 800357e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003582:	2301      	movs	r3, #1
 8003584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003588:	2301      	movs	r3, #1
 800358a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800358e:	2328      	movs	r3, #40	; 0x28
 8003590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003594:	2307      	movs	r3, #7
 8003596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800359a:	2302      	movs	r3, #2
 800359c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80035a0:	2302      	movs	r3, #2
 80035a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 fbdc 	bl	8005d68 <HAL_RCC_OscConfig>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <SystemClock_Config+0x86>
  {
    Error_Handler();
 80035b6:	f000 f9d5 	bl	8003964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ba:	230f      	movs	r3, #15
 80035bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035c0:	2303      	movs	r3, #3
 80035c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035dc:	2104      	movs	r1, #4
 80035de:	4618      	mov	r0, r3
 80035e0:	f002 ffa8 	bl	8006534 <HAL_RCC_ClockConfig>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80035ea:	f000 f9bb 	bl	8003964 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 80035ee:	f242 0301 	movw	r3, #8193	; 0x2001
 80035f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035f4:	2300      	movs	r3, #0
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80035f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80035fe:	2301      	movs	r3, #1
 8003600:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003606:	2318      	movs	r3, #24
 8003608:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800360a:	2307      	movs	r3, #7
 800360c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800360e:	2302      	movs	r3, #2
 8003610:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003612:	2302      	movs	r3, #2
 8003614:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003616:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800361a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800361c:	463b      	mov	r3, r7
 800361e:	4618      	mov	r0, r3
 8003620:	f003 f98c 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800362a:	f000 f99b 	bl	8003964 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800362e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003632:	f002 fb33 	bl	8005c9c <HAL_PWREx_ControlVoltageScaling>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800363c:	f000 f992 	bl	8003964 <Error_Handler>
  }
}
 8003640:	bf00      	nop
 8003642:	37e0      	adds	r7, #224	; 0xe0
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <MX_TIM6_Init+0x64>)
 800365a:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <MX_TIM6_Init+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 26667;
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <MX_TIM6_Init+0x64>)
 8003660:	f646 022b 	movw	r2, #26667	; 0x682b
 8003664:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <MX_TIM6_Init+0x64>)
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2;
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <MX_TIM6_Init+0x64>)
 800366e:	2202      	movs	r2, #2
 8003670:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <MX_TIM6_Init+0x64>)
 8003674:	2200      	movs	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003678:	480c      	ldr	r0, [pc, #48]	; (80036ac <MX_TIM6_Init+0x64>)
 800367a:	f003 fe0f 	bl	800729c <HAL_TIM_Base_Init>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003684:	f000 f96e 	bl	8003964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003690:	1d3b      	adds	r3, r7, #4
 8003692:	4619      	mov	r1, r3
 8003694:	4805      	ldr	r0, [pc, #20]	; (80036ac <MX_TIM6_Init+0x64>)
 8003696:	f004 f839 	bl	800770c <HAL_TIMEx_MasterConfigSynchronization>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80036a0:	f000 f960 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	200028a0 	.word	0x200028a0
 80036b0:	40001000 	.word	0x40001000

080036b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036ba:	4a15      	ldr	r2, [pc, #84]	; (8003710 <MX_USART1_UART_Init+0x5c>)
 80036bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036da:	220c      	movs	r2, #12
 80036dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036ea:	4b08      	ldr	r3, [pc, #32]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036f6:	4805      	ldr	r0, [pc, #20]	; (800370c <MX_USART1_UART_Init+0x58>)
 80036f8:	f004 f8ae 	bl	8007858 <HAL_UART_Init>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003702:	f000 f92f 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200027e8 	.word	0x200027e8
 8003710:	40013800 	.word	0x40013800

08003714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <MX_GPIO_Init+0xbc>)
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <MX_GPIO_Init+0xbc>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <MX_GPIO_Init+0xbc>)
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <MX_GPIO_Init+0xbc>)
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <MX_GPIO_Init+0xbc>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <MX_GPIO_Init+0xbc>)
 8003750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800375a:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <MX_GPIO_Init+0xbc>)
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <MX_GPIO_Init+0xbc>)
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003766:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <MX_GPIO_Init+0xbc>)
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RSTn_GPIO_Port, WIFI_RSTn_Pin, GPIO_PIN_SET);
 8003772:	2201      	movs	r2, #1
 8003774:	2102      	movs	r1, #2
 8003776:	4817      	ldr	r0, [pc, #92]	; (80037d4 <MX_GPIO_Init+0xc0>)
 8003778:	f000 fe18 	bl	80043ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800377c:	2200      	movs	r2, #0
 800377e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003786:	f000 fe11 	bl	80043ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_RSTn_Pin */
  GPIO_InitStruct.Pin = WIFI_RSTn_Pin;
 800378a:	2302      	movs	r3, #2
 800378c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800378e:	2301      	movs	r3, #1
 8003790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003796:	2302      	movs	r3, #2
 8003798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WIFI_RSTn_GPIO_Port, &GPIO_InitStruct);
 800379a:	f107 030c 	add.w	r3, r7, #12
 800379e:	4619      	mov	r1, r3
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <MX_GPIO_Init+0xc0>)
 80037a2:	f000 fc5b 	bl	800405c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ac:	2301      	movs	r3, #1
 80037ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	4619      	mov	r1, r3
 80037be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037c2:	f000 fc4b 	bl	800405c <HAL_GPIO_Init>

}
 80037c6:	bf00      	nop
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	48000800 	.word	0x48000800

080037d8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	__NOP();
 80037e0:	bf00      	nop
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_TIM_PeriodElapsedCallback>:

//a cada 1 ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
    ESP8266_TimeUpdate(&ESP8266, 1);
 80037f8:	2101      	movs	r1, #1
 80037fa:	4803      	ldr	r0, [pc, #12]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80037fc:	f7ff fb44 	bl	8002e88 <ESP8266_TimeUpdate>
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	200028ec 	.word	0x200028ec

0800380c <ESP8266_Callback_DeviceReady>:

/************************************/
/*           ESP CALLBACKS          */
/************************************/
/* Called when ready string detected */
void ESP8266_Callback_DeviceReady(ESP8266_t* ESP8266) {
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
//	printf("Device is ready\r\n");
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <ESP8266_Callback_WatchdogReset>:

/* Called when watchdog reset on ESP8266 is detected */
void ESP8266_Callback_WatchdogReset(ESP8266_t* ESP8266) {
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
//	printf("Watchdog reset detected!\r\n");
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <ESP8266_Callback_WifiDisconnected>:

/* Called when we are disconnected from WIFI */
void ESP8266_Callback_WifiDisconnected(ESP8266_t* ESP8266) {
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
//	printf("Wifi is disconnected!\r\n");
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <ESP8266_Callback_WifiConnected>:

void ESP8266_Callback_WifiConnected(ESP8266_t* ESP8266) {
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
//	printf("Wifi is connected!\r\n");
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <ESP8266_Callback_WifiConnectFailed>:

void ESP8266_Callback_WifiConnectFailed(ESP8266_t* ESP8266) {
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
//	printf("Connection to wifi network has failed. Reason %d\r\n", ESP8266->WifiConnectError);
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <ESP8266_Callback_WifiGotIP>:

void ESP8266_Callback_WifiGotIP(ESP8266_t* ESP8266) {
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
//	printf("Grabbing IP status: %d\r\n", ESP8266_GetSTAIP(ESP8266));
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <ESP8266_Callback_WifiIPSet>:

void ESP8266_Callback_WifiIPSet(ESP8266_t* ESP8266) {
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	/* We have STA IP set (IP set by router we are connected to) */
//	printf("We have valid IP address: %d.%d.%d.%d\r\n", ESP8266->STAIP[0], ESP8266->STAIP[1], ESP8266->STAIP[2], ESP8266->STAIP[3]);
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <ESP8266_Callback_DHCPTimeout>:

void ESP8266_Callback_DHCPTimeout(ESP8266_t* ESP8266) {
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
//	printf("DHCP timeout!\r\n");
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <ESP8266_Callback_ClientConnectionConnected>:


/************************************/
/*         CLIENT CALLBACKS         */
/************************************/
void ESP8266_Callback_ClientConnectionConnected(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
//	printf(writeValue, "Client connected to server! Connection name: %s\r\n", Connection->Name);
//
//	ConnectionGlobal = Connection;
//	/* We are connected to server, request to sent header data to server */
//	ESP8266_RequestSendData(ESP8266, Connection);
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <ESP8266_Callback_ClientConnectionError>:

/* Called when client connection fails to server */
void ESP8266_Callback_ClientConnectionError(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
	/* Fail with connection to server */
//	printf("An error occurred when trying to connect on connection: %d\r\n", Connection->Number);
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <ESP8266_Callback_ClientConnectionSendData>:

/* Called when data are ready to be sent to server */
uint16_t ESP8266_Callback_ClientConnectionSendData(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer, uint16_t max_buffer_size) {
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	807b      	strh	r3, [r7, #2]
//
//	msgCnt++;
//	/* Return length of buffer */
//	return strlen(Buffer);

}
 80038e6:	bf00      	nop
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <ESP8266_Callback_ClientConnectionDataSent>:

/* Called when data are send successfully */
void ESP8266_Callback_ClientConnectionDataSent(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
//	printf("Data successfully sent as client!\r\n");
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <ESP8266_Callback_ClientConnectionDataSentError>:

/* Called when error returned trying to sent data */
void ESP8266_Callback_ClientConnectionDataSentError(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]

//	printf("Error while sending data on connection %d!\r\n", Connection->Number);

}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <ESP8266_Callback_ClientConnectionDataReceived>:

void ESP8266_Callback_ClientConnectionDataReceived(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer) {
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
//	/* Data received from server back to client */
//	printf("Data received from server on connection: %s; Number of bytes received: %u; %u / %u;\r\n", Connection->Name, Connection->BytesReceived, Connection->TotalBytesReceived, Connection->ContentLength);
//	printf("Message received: \r\n");
//	printf("%s \r\n",Connection->Data);
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <ESP8266_Callback_ClientConnectionClosed>:

/* Called when connection is closed */
void ESP8266_Callback_ClientConnectionClosed(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
//	printf("Client connection closed, connection: %d; Total bytes received: %u; Content-Length header: %u\r\n", Connection->Number, Connection->TotalBytesReceived, Connection->ContentLength);
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <ESP8266_Callback_ClientConnectionTimeout>:

/* Called when timeout is reached on connection to server */
void ESP8266_Callback_ClientConnectionTimeout(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
//	printf("Timeout reached on connection: %d\r\n", Connection->Number);
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397a:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <HAL_MspInit+0x44>)
 800397c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397e:	4a0e      	ldr	r2, [pc, #56]	; (80039b8 <HAL_MspInit+0x44>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6613      	str	r3, [r2, #96]	; 0x60
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <HAL_MspInit+0x44>)
 8003988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_MspInit+0x44>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <HAL_MspInit+0x44>)
 8003998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399c:	6593      	str	r3, [r2, #88]	; 0x58
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_MspInit+0x44>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000

080039bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <HAL_TIM_Base_MspInit+0x44>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d113      	bne.n	80039f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <HAL_TIM_Base_MspInit+0x48>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <HAL_TIM_Base_MspInit+0x48>)
 80039d4:	f043 0310 	orr.w	r3, r3, #16
 80039d8:	6593      	str	r3, [r2, #88]	; 0x58
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <HAL_TIM_Base_MspInit+0x48>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80039e6:	2200      	movs	r2, #0
 80039e8:	2100      	movs	r1, #0
 80039ea:	2036      	movs	r0, #54	; 0x36
 80039ec:	f000 fabf 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039f0:	2036      	movs	r0, #54	; 0x36
 80039f2:	f000 fad8 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40001000 	.word	0x40001000
 8003a04:	40021000 	.word	0x40021000

08003a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2c      	ldr	r2, [pc, #176]	; (8003ad8 <HAL_UART_MspInit+0xd0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d151      	bne.n	8003ace <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <HAL_UART_MspInit+0xd4>)
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2e:	4a2b      	ldr	r2, [pc, #172]	; (8003adc <HAL_UART_MspInit+0xd4>)
 8003a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a34:	6613      	str	r3, [r2, #96]	; 0x60
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <HAL_UART_MspInit+0xd4>)
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_UART_MspInit+0xd4>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	4a25      	ldr	r2, [pc, #148]	; (8003adc <HAL_UART_MspInit+0xd4>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a4e:	4b23      	ldr	r3, [pc, #140]	; (8003adc <HAL_UART_MspInit+0xd4>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_UART_MspInit+0xd4>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_UART_MspInit+0xd4>)
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a66:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_UART_MspInit+0xd4>)
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = WIFI_uC_TX_Pin;
 8003a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a80:	2303      	movs	r3, #3
 8003a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a84:	2307      	movs	r3, #7
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(WIFI_uC_TX_GPIO_Port, &GPIO_InitStruct);
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a92:	f000 fae3 	bl	800405c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_uC_RX_Pin;
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003aa6:	2307      	movs	r3, #7
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(WIFI_uC_RX_GPIO_Port, &GPIO_InitStruct);
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	4619      	mov	r1, r3
 8003ab0:	480b      	ldr	r0, [pc, #44]	; (8003ae0 <HAL_UART_MspInit+0xd8>)
 8003ab2:	f000 fad3 	bl	800405c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8003ab6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003aba:	f002 f8c1 	bl	8005c40 <HAL_I2CEx_EnableFastModePlus>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	2025      	movs	r0, #37	; 0x25
 8003ac4:	f000 fa53 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ac8:	2025      	movs	r0, #37	; 0x25
 8003aca:	f000 fa6c 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ace:	bf00      	nop
 8003ad0:	3728      	adds	r7, #40	; 0x28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	48000400 	.word	0x48000400

08003ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003af6:	e7fe      	b.n	8003af6 <HardFault_Handler+0x4>

08003af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003afc:	e7fe      	b.n	8003afc <MemManage_Handler+0x4>

08003afe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b02:	e7fe      	b.n	8003b02 <BusFault_Handler+0x4>

08003b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b08:	e7fe      	b.n	8003b08 <UsageFault_Handler+0x4>

08003b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b38:	f000 f8fe 	bl	8003d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b3c:	bf00      	nop
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
//		ch = USART1->DR;
//		/* Send received character to ESP stack */
//		ESP8266_DataReceived(&ch, 1);
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b44:	4802      	ldr	r0, [pc, #8]	; (8003b50 <USART1_IRQHandler+0x10>)
 8003b46:	f003 ffd3 	bl	8007af0 <HAL_UART_IRQHandler>
//  {


//  }
  /* USER CODE END USART1_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200027e8 	.word	0x200027e8

08003b54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b58:	4802      	ldr	r0, [pc, #8]	; (8003b64 <TIM6_DAC_IRQHandler+0x10>)
 8003b5a:	f003 fbf5 	bl	8007348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200028a0 	.word	0x200028a0

08003b68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003b6c:	4802      	ldr	r0, [pc, #8]	; (8003b78 <OTG_FS_IRQHandler+0x10>)
 8003b6e:	f000 fec1 	bl	80048f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20003784 	.word	0x20003784

08003b7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <_sbrk+0x50>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <_sbrk+0x16>
		heap_end = &end;
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <_sbrk+0x50>)
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <_sbrk+0x54>)
 8003b90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <_sbrk+0x50>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <_sbrk+0x50>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	466a      	mov	r2, sp
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d907      	bls.n	8003bb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003ba6:	f00c fe79 	bl	801089c <__errno>
 8003baa:	4602      	mov	r2, r0
 8003bac:	230c      	movs	r3, #12
 8003bae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb4:	e006      	b.n	8003bc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <_sbrk+0x50>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4a03      	ldr	r2, [pc, #12]	; (8003bcc <_sbrk+0x50>)
 8003bc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20001dc0 	.word	0x20001dc0
 8003bd0:	20003a50 	.word	0x20003a50

08003bd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bd8:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <SystemInit+0x64>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <SystemInit+0x64>)
 8003be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <SystemInit+0x68>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <SystemInit+0x68>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <SystemInit+0x68>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <SystemInit+0x68>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a0f      	ldr	r2, [pc, #60]	; (8003c3c <SystemInit+0x68>)
 8003c00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003c04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003c08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <SystemInit+0x68>)
 8003c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <SystemInit+0x68>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <SystemInit+0x68>)
 8003c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <SystemInit+0x68>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <SystemInit+0x64>)
 8003c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c2a:	609a      	str	r2, [r3, #8]
#endif
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000ed00 	.word	0xe000ed00
 8003c3c:	40021000 	.word	0x40021000

08003c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003c44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003c46:	e003      	b.n	8003c50 <LoopCopyDataInit>

08003c48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003c4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003c4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003c4e:	3104      	adds	r1, #4

08003c50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003c50:	480b      	ldr	r0, [pc, #44]	; (8003c80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003c54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003c56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003c58:	d3f6      	bcc.n	8003c48 <CopyDataInit>
	ldr	r2, =_sbss
 8003c5a:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003c5c:	e002      	b.n	8003c64 <LoopFillZerobss>

08003c5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003c5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003c60:	f842 3b04 	str.w	r3, [r2], #4

08003c64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <LoopForever+0x16>)
	cmp	r2, r3
 8003c66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003c68:	d3f9      	bcc.n	8003c5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c6a:	f7ff ffb3 	bl	8003bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c6e:	f00c fe1b 	bl	80108a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c72:	f7ff fb49 	bl	8003308 <main>

08003c76 <LoopForever>:

LoopForever:
    b LoopForever
 8003c76:	e7fe      	b.n	8003c76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c78:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003c7c:	0801295c 	.word	0x0801295c
	ldr	r0, =_sdata
 8003c80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003c84:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 8003c88:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 8003c8c:	20003a4c 	.word	0x20003a4c

08003c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c90:	e7fe      	b.n	8003c90 <ADC1_2_IRQHandler>

08003c92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f000 f95b 	bl	8003f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f000 f80e 	bl	8003cc4 <HAL_InitTick>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	71fb      	strb	r3, [r7, #7]
 8003cb2:	e001      	b.n	8003cb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cb4:	f7ff fe5e 	bl	8003974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_InitTick+0x68>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d022      	beq.n	8003d1e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_InitTick+0x6c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_InitTick+0x68>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f968 	bl	8003fc2 <HAL_SYSTICK_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b0f      	cmp	r3, #15
 8003cfc:	d809      	bhi.n	8003d12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	f04f 30ff 	mov.w	r0, #4294967295
 8003d06:	f000 f932 	bl	8003f6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <HAL_InitTick+0x70>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	e007      	b.n	8003d22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
 8003d16:	e004      	b.n	8003d22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e001      	b.n	8003d22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000008 	.word	0x20000008
 8003d30:	20000000 	.word	0x20000000
 8003d34:	20000004 	.word	0x20000004

08003d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_IncTick+0x1c>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_IncTick+0x20>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4413      	add	r3, r2
 8003d46:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <HAL_IncTick+0x1c>)
 8003d48:	6013      	str	r3, [r2, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	20002ae4 	.word	0x20002ae4
 8003d58:	20000008 	.word	0x20000008

08003d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <HAL_GetTick+0x14>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20002ae4 	.word	0x20002ae4

08003d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d7c:	f7ff ffee 	bl	8003d5c <HAL_GetTick>
 8003d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d004      	beq.n	8003d98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_Delay+0x40>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4413      	add	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d98:	bf00      	nop
 8003d9a:	f7ff ffdf 	bl	8003d5c <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d8f7      	bhi.n	8003d9a <HAL_Delay+0x26>
  {
  }
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000008 	.word	0x20000008

08003db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dea:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	60d3      	str	r3, [r2, #12]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <__NVIC_GetPriorityGrouping+0x18>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	f003 0307 	and.w	r3, r3, #7
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	db0b      	blt.n	8003e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	4907      	ldr	r1, [pc, #28]	; (8003e54 <__NVIC_EnableIRQ+0x38>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	e000e100 	.word	0xe000e100

08003e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	db0a      	blt.n	8003e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	490c      	ldr	r1, [pc, #48]	; (8003ea4 <__NVIC_SetPriority+0x4c>)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e80:	e00a      	b.n	8003e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <__NVIC_SetPriority+0x50>)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	440b      	add	r3, r1
 8003e96:	761a      	strb	r2, [r3, #24]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000e100 	.word	0xe000e100
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	; 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f1c3 0307 	rsb	r3, r3, #7
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	bf28      	it	cs
 8003eca:	2304      	movcs	r3, #4
 8003ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d902      	bls.n	8003edc <NVIC_EncodePriority+0x30>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3b03      	subs	r3, #3
 8003eda:	e000      	b.n	8003ede <NVIC_EncodePriority+0x32>
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	401a      	ands	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	43d9      	mvns	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f04:	4313      	orrs	r3, r2
         );
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3724      	adds	r7, #36	; 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f24:	d301      	bcc.n	8003f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f26:	2301      	movs	r3, #1
 8003f28:	e00f      	b.n	8003f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <SysTick_Config+0x40>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f32:	210f      	movs	r1, #15
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	f7ff ff8e 	bl	8003e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <SysTick_Config+0x40>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f42:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <SysTick_Config+0x40>)
 8003f44:	2207      	movs	r2, #7
 8003f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	e000e010 	.word	0xe000e010

08003f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff29 	bl	8003db8 <__NVIC_SetPriorityGrouping>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f80:	f7ff ff3e 	bl	8003e00 <__NVIC_GetPriorityGrouping>
 8003f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f7ff ff8e 	bl	8003eac <NVIC_EncodePriority>
 8003f90:	4602      	mov	r2, r0
 8003f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff5d 	bl	8003e58 <__NVIC_SetPriority>
}
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	4603      	mov	r3, r0
 8003fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff31 	bl	8003e1c <__NVIC_EnableIRQ>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ffa2 	bl	8003f14 <SysTick_Config>
 8003fd0:	4603      	mov	r3, r0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d005      	beq.n	8003ffe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e029      	b.n	8004052 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 020e 	bic.w	r2, r2, #14
 800400c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	f003 021c 	and.w	r2, r3, #28
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2101      	movs	r1, #1
 800402c:	fa01 f202 	lsl.w	r2, r1, r2
 8004030:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	4798      	blx	r3
    }
  }
  return status;
 8004052:	7bfb      	ldrb	r3, [r7, #15]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800406a:	e17f      	b.n	800436c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	2101      	movs	r1, #1
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	fa01 f303 	lsl.w	r3, r1, r3
 8004078:	4013      	ands	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8171 	beq.w	8004366 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d00b      	beq.n	80040a4 <HAL_GPIO_Init+0x48>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d007      	beq.n	80040a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004098:	2b11      	cmp	r3, #17
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b12      	cmp	r3, #18
 80040a2:	d130      	bne.n	8004106 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040da:	2201      	movs	r2, #1
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4013      	ands	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	f003 0201 	and.w	r2, r3, #1
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b03      	cmp	r3, #3
 8004110:	d118      	bne.n	8004144 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004118:	2201      	movs	r2, #1
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	08db      	lsrs	r3, r3, #3
 800412e:	f003 0201 	and.w	r2, r3, #1
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	2203      	movs	r2, #3
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x128>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b12      	cmp	r3, #18
 8004182:	d123      	bne.n	80041cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	08da      	lsrs	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3208      	adds	r2, #8
 800418c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004190:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	220f      	movs	r2, #15
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	08da      	lsrs	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3208      	adds	r2, #8
 80041c6:	6939      	ldr	r1, [r7, #16]
 80041c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 0203 	and.w	r2, r3, #3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80ac 	beq.w	8004366 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420e:	4b5e      	ldr	r3, [pc, #376]	; (8004388 <HAL_GPIO_Init+0x32c>)
 8004210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004212:	4a5d      	ldr	r2, [pc, #372]	; (8004388 <HAL_GPIO_Init+0x32c>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6613      	str	r3, [r2, #96]	; 0x60
 800421a:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <HAL_GPIO_Init+0x32c>)
 800421c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004226:	4a59      	ldr	r2, [pc, #356]	; (800438c <HAL_GPIO_Init+0x330>)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	089b      	lsrs	r3, r3, #2
 800422c:	3302      	adds	r3, #2
 800422e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004232:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	220f      	movs	r2, #15
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004250:	d025      	beq.n	800429e <HAL_GPIO_Init+0x242>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a4e      	ldr	r2, [pc, #312]	; (8004390 <HAL_GPIO_Init+0x334>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01f      	beq.n	800429a <HAL_GPIO_Init+0x23e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a4d      	ldr	r2, [pc, #308]	; (8004394 <HAL_GPIO_Init+0x338>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d019      	beq.n	8004296 <HAL_GPIO_Init+0x23a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a4c      	ldr	r2, [pc, #304]	; (8004398 <HAL_GPIO_Init+0x33c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_GPIO_Init+0x236>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a4b      	ldr	r2, [pc, #300]	; (800439c <HAL_GPIO_Init+0x340>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00d      	beq.n	800428e <HAL_GPIO_Init+0x232>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a4a      	ldr	r2, [pc, #296]	; (80043a0 <HAL_GPIO_Init+0x344>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d007      	beq.n	800428a <HAL_GPIO_Init+0x22e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a49      	ldr	r2, [pc, #292]	; (80043a4 <HAL_GPIO_Init+0x348>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <HAL_GPIO_Init+0x22a>
 8004282:	2306      	movs	r3, #6
 8004284:	e00c      	b.n	80042a0 <HAL_GPIO_Init+0x244>
 8004286:	2307      	movs	r3, #7
 8004288:	e00a      	b.n	80042a0 <HAL_GPIO_Init+0x244>
 800428a:	2305      	movs	r3, #5
 800428c:	e008      	b.n	80042a0 <HAL_GPIO_Init+0x244>
 800428e:	2304      	movs	r3, #4
 8004290:	e006      	b.n	80042a0 <HAL_GPIO_Init+0x244>
 8004292:	2303      	movs	r3, #3
 8004294:	e004      	b.n	80042a0 <HAL_GPIO_Init+0x244>
 8004296:	2302      	movs	r3, #2
 8004298:	e002      	b.n	80042a0 <HAL_GPIO_Init+0x244>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <HAL_GPIO_Init+0x244>
 800429e:	2300      	movs	r3, #0
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	f002 0203 	and.w	r2, r2, #3
 80042a6:	0092      	lsls	r2, r2, #2
 80042a8:	4093      	lsls	r3, r2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042b0:	4936      	ldr	r1, [pc, #216]	; (800438c <HAL_GPIO_Init+0x330>)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	3302      	adds	r3, #2
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042be:	4b3a      	ldr	r3, [pc, #232]	; (80043a8 <HAL_GPIO_Init+0x34c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042e2:	4a31      	ldr	r2, [pc, #196]	; (80043a8 <HAL_GPIO_Init+0x34c>)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80042e8:	4b2f      	ldr	r3, [pc, #188]	; (80043a8 <HAL_GPIO_Init+0x34c>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800430c:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <HAL_GPIO_Init+0x34c>)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004312:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <HAL_GPIO_Init+0x34c>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	43db      	mvns	r3, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004336:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <HAL_GPIO_Init+0x34c>)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <HAL_GPIO_Init+0x34c>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	43db      	mvns	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004360:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <HAL_GPIO_Init+0x34c>)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	3301      	adds	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	f47f ae78 	bne.w	800406c <HAL_GPIO_Init+0x10>
  }
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40021000 	.word	0x40021000
 800438c:	40010000 	.word	0x40010000
 8004390:	48000400 	.word	0x48000400
 8004394:	48000800 	.word	0x48000800
 8004398:	48000c00 	.word	0x48000c00
 800439c:	48001000 	.word	0x48001000
 80043a0:	48001400 	.word	0x48001400
 80043a4:	48001800 	.word	0x48001800
 80043a8:	40010400 	.word	0x40010400

080043ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	807b      	strh	r3, [r7, #2]
 80043b8:	4613      	mov	r3, r2
 80043ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043bc:	787b      	ldrb	r3, [r7, #1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043c2:	887a      	ldrh	r2, [r7, #2]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043c8:	e002      	b.n	80043d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ca:	887a      	ldrh	r2, [r7, #2]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80043dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043de:	b08f      	sub	sp, #60	; 0x3c
 80043e0:	af0a      	add	r7, sp, #40	; 0x28
 80043e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e054      	b.n	8004498 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f00b ff65 	bl	80102d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2203      	movs	r2, #3
 8004412:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f004 fb61 	bl	8008af4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	687e      	ldr	r6, [r7, #4]
 800443a:	466d      	mov	r5, sp
 800443c:	f106 0410 	add.w	r4, r6, #16
 8004440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004448:	e894 0003 	ldmia.w	r4, {r0, r1}
 800444c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004450:	1d33      	adds	r3, r6, #4
 8004452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004454:	6838      	ldr	r0, [r7, #0]
 8004456:	f004 faea 	bl	8008a2e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f004 fb58 	bl	8008b16 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	687e      	ldr	r6, [r7, #4]
 800446e:	466d      	mov	r5, sp
 8004470:	f106 0410 	add.w	r4, r6, #16
 8004474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800447a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800447c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004480:	e885 0003 	stmia.w	r5, {r0, r1}
 8004484:	1d33      	adds	r3, r6, #4
 8004486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004488:	6838      	ldr	r0, [r7, #0]
 800448a:	f004 fc67 	bl	8008d5c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044a0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af04      	add	r7, sp, #16
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	4608      	mov	r0, r1
 80044aa:	4611      	mov	r1, r2
 80044ac:	461a      	mov	r2, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	70fb      	strb	r3, [r7, #3]
 80044b2:	460b      	mov	r3, r1
 80044b4:	70bb      	strb	r3, [r7, #2]
 80044b6:	4613      	mov	r3, r2
 80044b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_HCD_HC_Init+0x28>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e07f      	b.n	80045c8 <HAL_HCD_HC_Init+0x128>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	333d      	adds	r3, #61	; 0x3d
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	440b      	add	r3, r1
 80044f2:	3338      	adds	r3, #56	; 0x38
 80044f4:	787a      	ldrb	r2, [r7, #1]
 80044f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	440b      	add	r3, r1
 8004506:	3340      	adds	r3, #64	; 0x40
 8004508:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800450a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	440b      	add	r3, r1
 800451a:	3339      	adds	r3, #57	; 0x39
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	440b      	add	r3, r1
 800452e:	333f      	adds	r3, #63	; 0x3f
 8004530:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004534:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	78bb      	ldrb	r3, [r7, #2]
 800453a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453e:	b2d8      	uxtb	r0, r3
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	440b      	add	r3, r1
 800454c:	333a      	adds	r3, #58	; 0x3a
 800454e:	4602      	mov	r2, r0
 8004550:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004552:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004556:	2b00      	cmp	r3, #0
 8004558:	da0a      	bge.n	8004570 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	440b      	add	r3, r1
 8004568:	333b      	adds	r3, #59	; 0x3b
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e009      	b.n	8004584 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	440b      	add	r3, r1
 800457e:	333b      	adds	r3, #59	; 0x3b
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	333c      	adds	r3, #60	; 0x3c
 8004594:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004598:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	787c      	ldrb	r4, [r7, #1]
 80045a0:	78ba      	ldrb	r2, [r7, #2]
 80045a2:	78f9      	ldrb	r1, [r7, #3]
 80045a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045a6:	9302      	str	r3, [sp, #8]
 80045a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4623      	mov	r3, r4
 80045b6:	f004 fd15 	bl	8008fe4 <USB_HC_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd90      	pop	{r4, r7, pc}

080045d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_HCD_HC_Halt+0x1e>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e00f      	b.n	800460e <HAL_HCD_HC_Halt+0x3e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f004 fef3 	bl	80093ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	4608      	mov	r0, r1
 8004622:	4611      	mov	r1, r2
 8004624:	461a      	mov	r2, r3
 8004626:	4603      	mov	r3, r0
 8004628:	70fb      	strb	r3, [r7, #3]
 800462a:	460b      	mov	r3, r1
 800462c:	70bb      	strb	r3, [r7, #2]
 800462e:	4613      	mov	r3, r2
 8004630:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	440b      	add	r3, r1
 8004640:	333b      	adds	r3, #59	; 0x3b
 8004642:	78ba      	ldrb	r2, [r7, #2]
 8004644:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	440b      	add	r3, r1
 8004654:	333f      	adds	r3, #63	; 0x3f
 8004656:	787a      	ldrb	r2, [r7, #1]
 8004658:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800465a:	7c3b      	ldrb	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d114      	bne.n	800468a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	440b      	add	r3, r1
 800466e:	3342      	adds	r3, #66	; 0x42
 8004670:	2203      	movs	r2, #3
 8004672:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	440b      	add	r3, r1
 8004682:	333d      	adds	r3, #61	; 0x3d
 8004684:	7f3a      	ldrb	r2, [r7, #28]
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	e009      	b.n	800469e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	440b      	add	r3, r1
 8004698:	3342      	adds	r3, #66	; 0x42
 800469a:	2202      	movs	r2, #2
 800469c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800469e:	787b      	ldrb	r3, [r7, #1]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	f200 80d6 	bhi.w	8004852 <HAL_HCD_HC_SubmitRequest+0x23a>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <HAL_HCD_HC_SubmitRequest+0x94>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	0800483d 	.word	0x0800483d
 80046b4:	08004729 	.word	0x08004729
 80046b8:	080047b3 	.word	0x080047b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80046bc:	7c3b      	ldrb	r3, [r7, #16]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	f040 80c9 	bne.w	8004856 <HAL_HCD_HC_SubmitRequest+0x23e>
 80046c4:	78bb      	ldrb	r3, [r7, #2]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 80c5 	bne.w	8004856 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80046cc:	8b3b      	ldrh	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	440b      	add	r3, r1
 80046e0:	3351      	adds	r3, #81	; 0x51
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	440b      	add	r3, r1
 80046f4:	3351      	adds	r3, #81	; 0x51
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046fc:	78fa      	ldrb	r2, [r7, #3]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	440b      	add	r3, r1
 800470a:	3342      	adds	r3, #66	; 0x42
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004710:	e0a1      	b.n	8004856 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	440b      	add	r3, r1
 8004720:	3342      	adds	r3, #66	; 0x42
 8004722:	2202      	movs	r2, #2
 8004724:	701a      	strb	r2, [r3, #0]
      break;
 8004726:	e096      	b.n	8004856 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004728:	78bb      	ldrb	r3, [r7, #2]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d120      	bne.n	8004770 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800472e:	78fa      	ldrb	r2, [r7, #3]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	440b      	add	r3, r1
 800473c:	3351      	adds	r3, #81	; 0x51
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	3342      	adds	r3, #66	; 0x42
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004758:	e07e      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	440b      	add	r3, r1
 8004768:	3342      	adds	r3, #66	; 0x42
 800476a:	2202      	movs	r2, #2
 800476c:	701a      	strb	r2, [r3, #0]
      break;
 800476e:	e073      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	440b      	add	r3, r1
 800477e:	3350      	adds	r3, #80	; 0x50
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	440b      	add	r3, r1
 8004794:	3342      	adds	r3, #66	; 0x42
 8004796:	2200      	movs	r2, #0
 8004798:	701a      	strb	r2, [r3, #0]
      break;
 800479a:	e05d      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	440b      	add	r3, r1
 80047aa:	3342      	adds	r3, #66	; 0x42
 80047ac:	2202      	movs	r2, #2
 80047ae:	701a      	strb	r2, [r3, #0]
      break;
 80047b0:	e052      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80047b2:	78bb      	ldrb	r3, [r7, #2]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d120      	bne.n	80047fa <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	3351      	adds	r3, #81	; 0x51
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	440b      	add	r3, r1
 80047dc:	3342      	adds	r3, #66	; 0x42
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80047e2:	e039      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	440b      	add	r3, r1
 80047f2:	3342      	adds	r3, #66	; 0x42
 80047f4:	2202      	movs	r2, #2
 80047f6:	701a      	strb	r2, [r3, #0]
      break;
 80047f8:	e02e      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	440b      	add	r3, r1
 8004808:	3350      	adds	r3, #80	; 0x50
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	440b      	add	r3, r1
 800481e:	3342      	adds	r3, #66	; 0x42
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
      break;
 8004824:	e018      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	440b      	add	r3, r1
 8004834:	3342      	adds	r3, #66	; 0x42
 8004836:	2202      	movs	r2, #2
 8004838:	701a      	strb	r2, [r3, #0]
      break;
 800483a:	e00d      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	3342      	adds	r3, #66	; 0x42
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
      break;
 8004850:	e002      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004852:	bf00      	nop
 8004854:	e000      	b.n	8004858 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004856:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	440b      	add	r3, r1
 8004866:	3344      	adds	r3, #68	; 0x44
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	8b39      	ldrh	r1, [r7, #24]
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4403      	add	r3, r0
 800487c:	3348      	adds	r3, #72	; 0x48
 800487e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	335c      	adds	r3, #92	; 0x5c
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	440b      	add	r3, r1
 80048a2:	334c      	adds	r3, #76	; 0x4c
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	440b      	add	r3, r1
 80048b6:	3339      	adds	r3, #57	; 0x39
 80048b8:	78fa      	ldrb	r2, [r7, #3]
 80048ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	440b      	add	r3, r1
 80048ca:	335d      	adds	r3, #93	; 0x5d
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	3338      	adds	r3, #56	; 0x38
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	f004 fc6f 	bl	80091c8 <USB_HC_StartXfer>
 80048ea:	4603      	mov	r3, r0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f004 f9e3 	bl	8008cd6 <USB_GetMode>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	f040 80ef 	bne.w	8004af6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f004 f9c7 	bl	8008cb0 <USB_ReadInterrupts>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80e5 	beq.w	8004af4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f004 f9be 	bl	8008cb0 <USB_ReadInterrupts>
 8004934:	4603      	mov	r3, r0
 8004936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800493e:	d104      	bne.n	800494a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004948:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f004 f9ae 	bl	8008cb0 <USB_ReadInterrupts>
 8004954:	4603      	mov	r3, r0
 8004956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495e:	d104      	bne.n	800496a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004968:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f004 f99e 	bl	8008cb0 <USB_ReadInterrupts>
 8004974:	4603      	mov	r3, r0
 8004976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800497a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800497e:	d104      	bne.n	800498a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004988:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f004 f98e 	bl	8008cb0 <USB_ReadInterrupts>
 8004994:	4603      	mov	r3, r0
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d103      	bne.n	80049a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2202      	movs	r2, #2
 80049a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f004 f980 	bl	8008cb0 <USB_ReadInterrupts>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ba:	d115      	bne.n	80049e8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80049c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f00b fd00 	bl	80103dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2101      	movs	r1, #1
 80049e2:	4618      	mov	r0, r3
 80049e4:	f004 fa38 	bl	8008e58 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f004 f95f 	bl	8008cb0 <USB_ReadInterrupts>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049fc:	d102      	bne.n	8004a04 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f001 f8aa 	bl	8005b58 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f004 f951 	bl	8008cb0 <USB_ReadInterrupts>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d106      	bne.n	8004a26 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f00b fcc3 	bl	80103a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2208      	movs	r2, #8
 8004a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f004 f940 	bl	8008cb0 <USB_ReadInterrupts>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a3a:	d138      	bne.n	8004aae <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f004 fcc1 	bl	80093c8 <USB_HC_ReadInterrupt>
 8004a46:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e025      	b.n	8004a9a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d018      	beq.n	8004a94 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a78:	d106      	bne.n	8004a88 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8cf 	bl	8004c24 <HCD_HC_IN_IRQHandler>
 8004a86:	e005      	b.n	8004a94 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fc61 	bl	8005356 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	3301      	adds	r3, #1
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d3d4      	bcc.n	8004a4e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f004 f8fc 	bl	8008cb0 <USB_ReadInterrupts>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b10      	cmp	r3, #16
 8004ac0:	d101      	bne.n	8004ac6 <HAL_HCD_IRQHandler+0x1d2>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_HCD_IRQHandler+0x1d4>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d014      	beq.n	8004af6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0210 	bic.w	r2, r2, #16
 8004ada:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 ff8f 	bl	8005a00 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0210 	orr.w	r2, r2, #16
 8004af0:	619a      	str	r2, [r3, #24]
 8004af2:	e000      	b.n	8004af6 <HAL_HCD_IRQHandler+0x202>
      return;
 8004af4:	bf00      	nop
    }
  }
}
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_HCD_Start+0x16>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e013      	b.n	8004b3a <HAL_HCD_Start+0x3e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f003 ffd7 	bl	8008ad2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f004 f9f8 	bl	8008f20 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_HCD_Stop+0x16>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e00d      	b.n	8004b74 <HAL_HCD_Stop+0x32>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f004 fd3f 	bl	80095e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f004 f99f 	bl	8008ecc <USB_ResetPort>
 8004b8e:	4603      	mov	r3, r0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	335c      	adds	r3, #92	; 0x5c
 8004bb4:	781b      	ldrb	r3, [r3, #0]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	440b      	add	r3, r1
 8004bdc:	334c      	adds	r3, #76	; 0x4c
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f004 f9e1 	bl	8008fc0 <USB_GetCurrentFrame>
 8004bfe:	4603      	mov	r3, r0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f004 f9bc 	bl	8008f92 <USB_GetHostSpeed>
 8004c1a:	4603      	mov	r3, r0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d119      	bne.n	8004c88 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	2304      	movs	r3, #4
 8004c64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c80:	f043 0302 	orr.w	r3, r3, #2
 8004c84:	60d3      	str	r3, [r2, #12]
 8004c86:	e095      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d109      	bne.n	8004cb2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	461a      	mov	r2, r3
 8004cac:	2320      	movs	r3, #32
 8004cae:	6093      	str	r3, [r2, #8]
 8004cb0:	e080      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d134      	bne.n	8004d32 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ce2:	f043 0302 	orr.w	r3, r3, #2
 8004ce6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	440b      	add	r3, r1
 8004cf6:	335d      	adds	r3, #93	; 0x5d
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2310      	movs	r3, #16
 8004d0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f004 fb5d 	bl	80093ea <USB_HC_Halt>
 8004d30:	e040      	b.n	8004db4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d134      	bne.n	8004db4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d64:	f043 0302 	orr.w	r3, r3, #2
 8004d68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f004 fb38 	bl	80093ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d86:	461a      	mov	r2, r3
 8004d88:	2310      	movs	r3, #16
 8004d8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	440b      	add	r3, r1
 8004d9a:	335d      	adds	r3, #93	; 0x5d
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	461a      	mov	r2, r3
 8004dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dca:	d122      	bne.n	8004e12 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de6:	f043 0302 	orr.w	r3, r3, #2
 8004dea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	4611      	mov	r1, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f004 faf7 	bl	80093ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e0e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004e10:	e29d      	b.n	800534e <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	f040 80c7 	bne.w	8004fb8 <HCD_HC_IN_IRQHandler+0x394>
    hhcd->hc[ch_num].state = HC_XFRC;
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	440b      	add	r3, r1
 8004e38:	335d      	adds	r3, #93	; 0x5d
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3358      	adds	r3, #88	; 0x58
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2301      	movs	r3, #1
 8004e62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	440b      	add	r3, r1
 8004e72:	333f      	adds	r3, #63	; 0x3f
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HCD_HC_IN_IRQHandler+0x26c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	440b      	add	r3, r1
 8004e88:	333f      	adds	r3, #63	; 0x3f
 8004e8a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d121      	bne.n	8004ed4 <HCD_HC_IN_IRQHandler+0x2b0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eaa:	f043 0302 	orr.w	r3, r3, #2
 8004eae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f004 fa95 	bl	80093ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2310      	movs	r3, #16
 8004ed0:	6093      	str	r3, [r2, #8]
 8004ed2:	e05a      	b.n	8004f8a <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	440b      	add	r3, r1
 8004ee2:	333f      	adds	r3, #63	; 0x3f
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d12a      	bne.n	8004f40 <HCD_HC_IN_IRQHandler+0x31c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f08:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	440b      	add	r3, r1
 8004f18:	335c      	adds	r3, #92	; 0x5c
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	b2d8      	uxtb	r0, r3
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	440b      	add	r3, r1
 8004f30:	335c      	adds	r3, #92	; 0x5c
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	4601      	mov	r1, r0
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f00b fa5d 	bl	80103f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f3e:	e024      	b.n	8004f8a <HCD_HC_IN_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	333f      	adds	r3, #63	; 0x3f
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d119      	bne.n	8004f8a <HCD_HC_IN_IRQHandler+0x366>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	335c      	adds	r3, #92	; 0x5c
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	b2d8      	uxtb	r0, r3
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	335c      	adds	r3, #92	; 0x5c
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	4601      	mov	r1, r0
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f00b fa37 	bl	80103f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	440b      	add	r3, r1
 8004f98:	3350      	adds	r3, #80	; 0x50
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f083 0301 	eor.w	r3, r3, #1
 8004fa0:	b2d8      	uxtb	r0, r3
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	440b      	add	r3, r1
 8004fb0:	3350      	adds	r3, #80	; 0x50
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	701a      	strb	r2, [r3, #0]
}
 8004fb6:	e1ca      	b.n	800534e <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	f040 80f1 	bne.w	80051b2 <HCD_HC_IN_IRQHandler+0x58e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fea:	f023 0302 	bic.w	r3, r3, #2
 8004fee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	440b      	add	r3, r1
 8004ffe:	335d      	adds	r3, #93	; 0x5d
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10a      	bne.n	800501c <HCD_HC_IN_IRQHandler+0x3f8>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	440b      	add	r3, r1
 8005014:	335c      	adds	r3, #92	; 0x5c
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e0b0      	b.n	800517e <HCD_HC_IN_IRQHandler+0x55a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	440b      	add	r3, r1
 800502a:	335d      	adds	r3, #93	; 0x5d
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b05      	cmp	r3, #5
 8005030:	d10a      	bne.n	8005048 <HCD_HC_IN_IRQHandler+0x424>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	440b      	add	r3, r1
 8005040:	335c      	adds	r3, #92	; 0x5c
 8005042:	2205      	movs	r2, #5
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e09a      	b.n	800517e <HCD_HC_IN_IRQHandler+0x55a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	440b      	add	r3, r1
 8005056:	335d      	adds	r3, #93	; 0x5d
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b06      	cmp	r3, #6
 800505c:	d00a      	beq.n	8005074 <HCD_HC_IN_IRQHandler+0x450>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	335d      	adds	r3, #93	; 0x5d
 800506e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005070:	2b08      	cmp	r3, #8
 8005072:	d156      	bne.n	8005122 <HCD_HC_IN_IRQHandler+0x4fe>
      hhcd->hc[ch_num].ErrCnt++;
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	440b      	add	r3, r1
 8005082:	3358      	adds	r3, #88	; 0x58
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4403      	add	r3, r0
 8005096:	3358      	adds	r3, #88	; 0x58
 8005098:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	440b      	add	r3, r1
 80050a8:	3358      	adds	r3, #88	; 0x58
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d914      	bls.n	80050da <HCD_HC_IN_IRQHandler+0x4b6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	440b      	add	r3, r1
 80050be:	3358      	adds	r3, #88	; 0x58
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	440b      	add	r3, r1
 80050d2:	335c      	adds	r3, #92	; 0x5c
 80050d4:	2204      	movs	r2, #4
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	e009      	b.n	80050ee <HCD_HC_IN_IRQHandler+0x4ca>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	440b      	add	r3, r1
 80050e8:	335c      	adds	r3, #92	; 0x5c
 80050ea:	2202      	movs	r2, #2
 80050ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005104:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800510c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	461a      	mov	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e02d      	b.n	800517e <HCD_HC_IN_IRQHandler+0x55a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	440b      	add	r3, r1
 8005130:	335d      	adds	r3, #93	; 0x5d
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d122      	bne.n	800517e <HCD_HC_IN_IRQHandler+0x55a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	440b      	add	r3, r1
 8005146:	335c      	adds	r3, #92	; 0x5c
 8005148:	2202      	movs	r2, #2
 800514a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005162:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800516a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4413      	add	r3, r2
 8005174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005178:	461a      	mov	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	461a      	mov	r2, r3
 800518c:	2302      	movs	r3, #2
 800518e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	b2d8      	uxtb	r0, r3
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	440b      	add	r3, r1
 80051a2:	335c      	adds	r3, #92	; 0x5c
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	4601      	mov	r1, r0
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f00b f924 	bl	80103f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80051b0:	e0cd      	b.n	800534e <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c4:	2b80      	cmp	r3, #128	; 0x80
 80051c6:	d13e      	bne.n	8005246 <HCD_HC_IN_IRQHandler+0x622>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e2:	f043 0302 	orr.w	r3, r3, #2
 80051e6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	440b      	add	r3, r1
 80051f6:	3358      	adds	r3, #88	; 0x58
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	1c59      	adds	r1, r3, #1
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4403      	add	r3, r0
 800520a:	3358      	adds	r3, #88	; 0x58
 800520c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	440b      	add	r3, r1
 800521c:	335d      	adds	r3, #93	; 0x5d
 800521e:	2206      	movs	r2, #6
 8005220:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	4611      	mov	r1, r2
 800522c:	4618      	mov	r0, r3
 800522e:	f004 f8dc 	bl	80093ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523e:	461a      	mov	r2, r3
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	6093      	str	r3, [r2, #8]
}
 8005244:	e083      	b.n	800534e <HCD_HC_IN_IRQHandler+0x72a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d178      	bne.n	800534e <HCD_HC_IN_IRQHandler+0x72a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	333f      	adds	r3, #63	; 0x3f
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d122      	bne.n	80052b8 <HCD_HC_IN_IRQHandler+0x694>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	3358      	adds	r3, #88	; 0x58
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	440a      	add	r2, r1
 800529c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a0:	f043 0302 	orr.w	r3, r3, #2
 80052a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f004 f89a 	bl	80093ea <USB_HC_Halt>
 80052b6:	e041      	b.n	800533c <HCD_HC_IN_IRQHandler+0x718>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	440b      	add	r3, r1
 80052c6:	333f      	adds	r3, #63	; 0x3f
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HCD_HC_IN_IRQHandler+0x6c0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	440b      	add	r3, r1
 80052dc:	333f      	adds	r3, #63	; 0x3f
 80052de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d12b      	bne.n	800533c <HCD_HC_IN_IRQHandler+0x718>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	440b      	add	r3, r1
 80052f2:	3358      	adds	r3, #88	; 0x58
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	440b      	add	r3, r1
 8005306:	335d      	adds	r3, #93	; 0x5d
 8005308:	2203      	movs	r2, #3
 800530a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	440a      	add	r2, r1
 8005322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005326:	f043 0302 	orr.w	r3, r3, #2
 800532a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f004 f857 	bl	80093ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	461a      	mov	r2, r3
 800534a:	2310      	movs	r3, #16
 800534c:	6093      	str	r3, [r2, #8]
}
 800534e:	bf00      	nop
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b086      	sub	sp, #24
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b04      	cmp	r3, #4
 8005384:	d119      	bne.n	80053ba <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005392:	461a      	mov	r2, r3
 8005394:	2304      	movs	r3, #4
 8005396:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b2:	f043 0302 	orr.w	r3, r3, #2
 80053b6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80053b8:	e31e      	b.n	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d141      	bne.n	8005454 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053dc:	461a      	mov	r2, r3
 80053de:	2320      	movs	r3, #32
 80053e0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	440b      	add	r3, r1
 80053f0:	333d      	adds	r3, #61	; 0x3d
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	f040 82ff 	bne.w	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4613      	mov	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	440b      	add	r3, r1
 8005408:	333d      	adds	r3, #61	; 0x3d
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	440b      	add	r3, r1
 800541c:	335c      	adds	r3, #92	; 0x5c
 800541e:	2202      	movs	r2, #2
 8005420:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	4413      	add	r3, r2
 800542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	440a      	add	r2, r1
 8005438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800543c:	f043 0302 	orr.w	r3, r3, #2
 8005440:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f003 ffcc 	bl	80093ea <USB_HC_Halt>
}
 8005452:	e2d1      	b.n	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	4413      	add	r3, r2
 800545c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d13f      	bne.n	80054ea <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	440b      	add	r3, r1
 8005478:	335d      	adds	r3, #93	; 0x5d
 800547a:	2204      	movs	r2, #4
 800547c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	440b      	add	r3, r1
 800548c:	333d      	adds	r3, #61	; 0x3d
 800548e:	2201      	movs	r2, #1
 8005490:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	440b      	add	r3, r1
 80054a0:	3358      	adds	r3, #88	; 0x58
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c0:	f043 0302 	orr.w	r3, r3, #2
 80054c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	4611      	mov	r1, r2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f003 ff8a 	bl	80093ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e2:	461a      	mov	r2, r3
 80054e4:	2340      	movs	r3, #64	; 0x40
 80054e6:	6093      	str	r3, [r2, #8]
}
 80054e8:	e286      	b.n	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005500:	d122      	bne.n	8005548 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4413      	add	r3, r2
 800550a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	440a      	add	r2, r1
 8005518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551c:	f043 0302 	orr.w	r3, r3, #2
 8005520:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f003 ff5c 	bl	80093ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4413      	add	r3, r2
 800553a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553e:	461a      	mov	r2, r3
 8005540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005544:	6093      	str	r3, [r2, #8]
}
 8005546:	e257      	b.n	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4413      	add	r3, r2
 8005550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b01      	cmp	r3, #1
 800555c:	d135      	bne.n	80055ca <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	440b      	add	r3, r1
 800556c:	3358      	adds	r3, #88	; 0x58
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	440a      	add	r2, r1
 8005588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	4611      	mov	r1, r2
 800559c:	4618      	mov	r0, r3
 800559e:	f003 ff24 	bl	80093ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ae:	461a      	mov	r2, r3
 80055b0:	2301      	movs	r3, #1
 80055b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	440b      	add	r3, r1
 80055c2:	335d      	adds	r3, #93	; 0x5d
 80055c4:	2201      	movs	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]
}
 80055c8:	e216      	b.n	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d12b      	bne.n	8005638 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ec:	461a      	mov	r2, r3
 80055ee:	2308      	movs	r3, #8
 80055f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	440a      	add	r2, r1
 8005608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800560c:	f043 0302 	orr.w	r3, r3, #2
 8005610:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	4611      	mov	r1, r2
 800561c:	4618      	mov	r0, r3
 800561e:	f003 fee4 	bl	80093ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	440b      	add	r3, r1
 8005630:	335d      	adds	r3, #93	; 0x5d
 8005632:	2205      	movs	r2, #5
 8005634:	701a      	strb	r2, [r3, #0]
}
 8005636:	e1df      	b.n	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b10      	cmp	r3, #16
 800564c:	d135      	bne.n	80056ba <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	440b      	add	r3, r1
 800565c:	3358      	adds	r3, #88	; 0x58
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	440b      	add	r3, r1
 8005670:	335d      	adds	r3, #93	; 0x5d
 8005672:	2203      	movs	r2, #3
 8005674:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	440a      	add	r2, r1
 800568c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	4611      	mov	r1, r2
 80056a0:	4618      	mov	r0, r3
 80056a2:	f003 fea2 	bl	80093ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	461a      	mov	r2, r3
 80056b4:	2310      	movs	r3, #16
 80056b6:	6093      	str	r3, [r2, #8]
}
 80056b8:	e19e      	b.n	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056cc:	2b80      	cmp	r3, #128	; 0x80
 80056ce:	d12b      	bne.n	8005728 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ea:	f043 0302 	orr.w	r3, r3, #2
 80056ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f003 fe75 	bl	80093ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	440b      	add	r3, r1
 800570e:	335d      	adds	r3, #93	; 0x5d
 8005710:	2206      	movs	r2, #6
 8005712:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4413      	add	r3, r2
 800571c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005720:	461a      	mov	r2, r3
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	6093      	str	r3, [r2, #8]
}
 8005726:	e167      	b.n	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573e:	d135      	bne.n	80057ac <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	440a      	add	r2, r1
 8005756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575a:	f043 0302 	orr.w	r3, r3, #2
 800575e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	4611      	mov	r1, r2
 800576a:	4618      	mov	r0, r3
 800576c:	f003 fe3d 	bl	80093ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577c:	461a      	mov	r2, r3
 800577e:	2310      	movs	r3, #16
 8005780:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	461a      	mov	r2, r3
 8005790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005794:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	440b      	add	r3, r1
 80057a4:	335d      	adds	r3, #93	; 0x5d
 80057a6:	2208      	movs	r2, #8
 80057a8:	701a      	strb	r2, [r3, #0]
}
 80057aa:	e125      	b.n	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	f040 811a 	bne.w	80059f8 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057de:	f023 0302 	bic.w	r3, r3, #2
 80057e2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	440b      	add	r3, r1
 80057f2:	335d      	adds	r3, #93	; 0x5d
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d137      	bne.n	800586a <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	440b      	add	r3, r1
 8005808:	335c      	adds	r3, #92	; 0x5c
 800580a:	2201      	movs	r2, #1
 800580c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	440b      	add	r3, r1
 800581c:	333f      	adds	r3, #63	; 0x3f
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d00b      	beq.n	800583c <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	440b      	add	r3, r1
 8005832:	333f      	adds	r3, #63	; 0x3f
 8005834:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005836:	2b03      	cmp	r3, #3
 8005838:	f040 80c5 	bne.w	80059c6 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	440b      	add	r3, r1
 800584a:	3351      	adds	r3, #81	; 0x51
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f083 0301 	eor.w	r3, r3, #1
 8005852:	b2d8      	uxtb	r0, r3
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	440b      	add	r3, r1
 8005862:	3351      	adds	r3, #81	; 0x51
 8005864:	4602      	mov	r2, r0
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e0ad      	b.n	80059c6 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	440b      	add	r3, r1
 8005878:	335d      	adds	r3, #93	; 0x5d
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d10a      	bne.n	8005896 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	440b      	add	r3, r1
 800588e:	335c      	adds	r3, #92	; 0x5c
 8005890:	2202      	movs	r2, #2
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	e097      	b.n	80059c6 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	440b      	add	r3, r1
 80058a4:	335d      	adds	r3, #93	; 0x5d
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d10a      	bne.n	80058c2 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	440b      	add	r3, r1
 80058ba:	335c      	adds	r3, #92	; 0x5c
 80058bc:	2202      	movs	r2, #2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	e081      	b.n	80059c6 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	440b      	add	r3, r1
 80058d0:	335d      	adds	r3, #93	; 0x5d
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d10a      	bne.n	80058ee <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	440b      	add	r3, r1
 80058e6:	335c      	adds	r3, #92	; 0x5c
 80058e8:	2205      	movs	r2, #5
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e06b      	b.n	80059c6 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	440b      	add	r3, r1
 80058fc:	335d      	adds	r3, #93	; 0x5d
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b06      	cmp	r3, #6
 8005902:	d00a      	beq.n	800591a <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	440b      	add	r3, r1
 8005912:	335d      	adds	r3, #93	; 0x5d
 8005914:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005916:	2b08      	cmp	r3, #8
 8005918:	d155      	bne.n	80059c6 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	440b      	add	r3, r1
 8005928:	3358      	adds	r3, #88	; 0x58
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4403      	add	r3, r0
 800593c:	3358      	adds	r3, #88	; 0x58
 800593e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	440b      	add	r3, r1
 800594e:	3358      	adds	r3, #88	; 0x58
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b03      	cmp	r3, #3
 8005954:	d914      	bls.n	8005980 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	3358      	adds	r3, #88	; 0x58
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	440b      	add	r3, r1
 8005978:	335c      	adds	r3, #92	; 0x5c
 800597a:	2204      	movs	r2, #4
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e009      	b.n	8005994 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	440b      	add	r3, r1
 800598e:	335c      	adds	r3, #92	; 0x5c
 8005990:	2202      	movs	r2, #2
 8005992:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c0:	461a      	mov	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d2:	461a      	mov	r2, r3
 80059d4:	2302      	movs	r3, #2
 80059d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	b2d8      	uxtb	r0, r3
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	440b      	add	r3, r1
 80059ea:	335c      	adds	r3, #92	; 0x5c
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	4601      	mov	r1, r0
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f00a fd00 	bl	80103f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80059f8:	bf00      	nop
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	0c5b      	lsrs	r3, r3, #17
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a34:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d003      	beq.n	8005a44 <HCD_RXQLVL_IRQHandler+0x44>
 8005a3c:	2b05      	cmp	r3, #5
 8005a3e:	f000 8082 	beq.w	8005b46 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005a42:	e083      	b.n	8005b4c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d07f      	beq.n	8005b4a <HCD_RXQLVL_IRQHandler+0x14a>
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	440b      	add	r3, r1
 8005a58:	3344      	adds	r3, #68	; 0x44
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d074      	beq.n	8005b4a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	440b      	add	r3, r1
 8005a72:	3344      	adds	r3, #68	; 0x44
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	b292      	uxth	r2, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f003 f8ef 	bl	8008c5e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	440b      	add	r3, r1
 8005a8e:	3344      	adds	r3, #68	; 0x44
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	18d1      	adds	r1, r2, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4403      	add	r3, r0
 8005aa4:	3344      	adds	r3, #68	; 0x44
 8005aa6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	440b      	add	r3, r1
 8005ab6:	334c      	adds	r3, #76	; 0x4c
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	18d1      	adds	r1, r2, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4403      	add	r3, r0
 8005acc:	334c      	adds	r3, #76	; 0x4c
 8005ace:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <HCD_RXQLVL_IRQHandler+0x154>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d031      	beq.n	8005b4a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005afc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b12:	461a      	mov	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	440b      	add	r3, r1
 8005b26:	3350      	adds	r3, #80	; 0x50
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	f083 0301 	eor.w	r3, r3, #1
 8005b2e:	b2d8      	uxtb	r0, r3
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	440b      	add	r3, r1
 8005b3e:	3350      	adds	r3, #80	; 0x50
 8005b40:	4602      	mov	r2, r0
 8005b42:	701a      	strb	r2, [r3, #0]
      break;
 8005b44:	e001      	b.n	8005b4a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005b46:	bf00      	nop
 8005b48:	e000      	b.n	8005b4c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005b4a:	bf00      	nop
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	3728      	adds	r7, #40	; 0x28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	1ff80000 	.word	0x1ff80000

08005b58 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b84:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d10b      	bne.n	8005ba8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d102      	bne.n	8005ba0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f00a fc10 	bl	80103c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f043 0302 	orr.w	r3, r3, #2
 8005ba6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d132      	bne.n	8005c18 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f043 0308 	orr.w	r3, r3, #8
 8005bb8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d126      	bne.n	8005c12 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d113      	bne.n	8005bf4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005bd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bd6:	d106      	bne.n	8005be6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2102      	movs	r1, #2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f003 f93a 	bl	8008e58 <USB_InitFSLSPClkSel>
 8005be4:	e011      	b.n	8005c0a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2101      	movs	r1, #1
 8005bec:	4618      	mov	r0, r3
 8005bee:	f003 f933 	bl	8008e58 <USB_InitFSLSPClkSel>
 8005bf2:	e00a      	b.n	8005c0a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c02:	461a      	mov	r2, r3
 8005c04:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005c08:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f00a fc02 	bl	8010414 <HAL_HCD_PortEnabled_Callback>
 8005c10:	e002      	b.n	8005c18 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f00a fc0c 	bl	8010430 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d103      	bne.n	8005c2a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f043 0320 	orr.w	r3, r3, #32
 8005c28:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c30:	461a      	mov	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6013      	str	r3, [r2, #0]
}
 8005c36:	bf00      	nop
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4c:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	6613      	str	r3, [r2, #96]	; 0x60
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005c60:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	4905      	ldr	r1, [pc, #20]	; (8005c7c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	604b      	str	r3, [r1, #4]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40010000 	.word	0x40010000

08005c80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <HAL_PWREx_GetVoltageRange+0x18>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40007000 	.word	0x40007000

08005c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005caa:	d130      	bne.n	8005d0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cac:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	d038      	beq.n	8005d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cba:	4b20      	ldr	r3, [pc, #128]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cc2:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cca:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2232      	movs	r2, #50	; 0x32
 8005cd0:	fb02 f303 	mul.w	r3, r2, r3
 8005cd4:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cda:	0c9b      	lsrs	r3, r3, #18
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ce0:	e002      	b.n	8005ce8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ce8:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf4:	d102      	bne.n	8005cfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f2      	bne.n	8005ce2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d08:	d110      	bne.n	8005d2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e00f      	b.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1a:	d007      	beq.n	8005d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d1c:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d24:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	20000000 	.word	0x20000000
 8005d44:	431bde83 	.word	0x431bde83

08005d48 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	4a04      	ldr	r2, [pc, #16]	; (8005d64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d56:	6053      	str	r3, [r2, #4]
}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40007000 	.word	0x40007000

08005d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e3d4      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d7a:	4ba1      	ldr	r3, [pc, #644]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d84:	4b9e      	ldr	r3, [pc, #632]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80e4 	beq.w	8005f64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <HAL_RCC_OscConfig+0x4a>
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b0c      	cmp	r3, #12
 8005da6:	f040 808b 	bne.w	8005ec0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	f040 8087 	bne.w	8005ec0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005db2:	4b93      	ldr	r3, [pc, #588]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x62>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e3ac      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1a      	ldr	r2, [r3, #32]
 8005dce:	4b8c      	ldr	r3, [pc, #560]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d004      	beq.n	8005de4 <HAL_RCC_OscConfig+0x7c>
 8005dda:	4b89      	ldr	r3, [pc, #548]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de2:	e005      	b.n	8005df0 <HAL_RCC_OscConfig+0x88>
 8005de4:	4b86      	ldr	r3, [pc, #536]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d223      	bcs.n	8005e3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fd3f 	bl	800687c <RCC_SetFlashLatencyFromMSIRange>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e38d      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e08:	4b7d      	ldr	r3, [pc, #500]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a7c      	ldr	r2, [pc, #496]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e0e:	f043 0308 	orr.w	r3, r3, #8
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	4b7a      	ldr	r3, [pc, #488]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	4977      	ldr	r1, [pc, #476]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e26:	4b76      	ldr	r3, [pc, #472]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	021b      	lsls	r3, r3, #8
 8005e34:	4972      	ldr	r1, [pc, #456]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	604b      	str	r3, [r1, #4]
 8005e3a:	e025      	b.n	8005e88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e3c:	4b70      	ldr	r3, [pc, #448]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6f      	ldr	r2, [pc, #444]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e42:	f043 0308 	orr.w	r3, r3, #8
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	4b6d      	ldr	r3, [pc, #436]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	496a      	ldr	r1, [pc, #424]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e5a:	4b69      	ldr	r3, [pc, #420]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	4965      	ldr	r1, [pc, #404]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d109      	bne.n	8005e88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fcff 	bl	800687c <RCC_SetFlashLatencyFromMSIRange>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e34d      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e88:	f000 fc36 	bl	80066f8 <HAL_RCC_GetSysClockFreq>
 8005e8c:	4601      	mov	r1, r0
 8005e8e:	4b5c      	ldr	r3, [pc, #368]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	4a5a      	ldr	r2, [pc, #360]	; (8006004 <HAL_RCC_OscConfig+0x29c>)
 8005e9a:	5cd3      	ldrb	r3, [r2, r3]
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	fa21 f303 	lsr.w	r3, r1, r3
 8005ea4:	4a58      	ldr	r2, [pc, #352]	; (8006008 <HAL_RCC_OscConfig+0x2a0>)
 8005ea6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ea8:	4b58      	ldr	r3, [pc, #352]	; (800600c <HAL_RCC_OscConfig+0x2a4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fd ff09 	bl	8003cc4 <HAL_InitTick>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d052      	beq.n	8005f62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	e331      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d032      	beq.n	8005f2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ec8:	4b4d      	ldr	r3, [pc, #308]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a4c      	ldr	r2, [pc, #304]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ed4:	f7fd ff42 	bl	8003d5c <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005edc:	f7fd ff3e 	bl	8003d5c <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e31a      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005eee:	4b44      	ldr	r3, [pc, #272]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005efa:	4b41      	ldr	r3, [pc, #260]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a40      	ldr	r2, [pc, #256]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005f00:	f043 0308 	orr.w	r3, r3, #8
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	4b3e      	ldr	r3, [pc, #248]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	493b      	ldr	r1, [pc, #236]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f18:	4b39      	ldr	r3, [pc, #228]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	4936      	ldr	r1, [pc, #216]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	604b      	str	r3, [r1, #4]
 8005f2c:	e01a      	b.n	8005f64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f2e:	4b34      	ldr	r3, [pc, #208]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a33      	ldr	r2, [pc, #204]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f3a:	f7fd ff0f 	bl	8003d5c <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f42:	f7fd ff0b 	bl	8003d5c <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e2e7      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f54:	4b2a      	ldr	r3, [pc, #168]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCC_OscConfig+0x1da>
 8005f60:	e000      	b.n	8005f64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d074      	beq.n	800605a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d005      	beq.n	8005f82 <HAL_RCC_OscConfig+0x21a>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b0c      	cmp	r3, #12
 8005f7a:	d10e      	bne.n	8005f9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d10b      	bne.n	8005f9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f82:	4b1f      	ldr	r3, [pc, #124]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d064      	beq.n	8006058 <HAL_RCC_OscConfig+0x2f0>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d160      	bne.n	8006058 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e2c4      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa2:	d106      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x24a>
 8005fa4:	4b16      	ldr	r3, [pc, #88]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a15      	ldr	r2, [pc, #84]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	e01d      	b.n	8005fee <HAL_RCC_OscConfig+0x286>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fba:	d10c      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x26e>
 8005fbc:	4b10      	ldr	r3, [pc, #64]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a0f      	ldr	r2, [pc, #60]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005fc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a0c      	ldr	r2, [pc, #48]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	e00b      	b.n	8005fee <HAL_RCC_OscConfig+0x286>
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a09      	ldr	r2, [pc, #36]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	4b07      	ldr	r3, [pc, #28]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a06      	ldr	r2, [pc, #24]	; (8006000 <HAL_RCC_OscConfig+0x298>)
 8005fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01c      	beq.n	8006030 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff6:	f7fd feb1 	bl	8003d5c <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ffc:	e011      	b.n	8006022 <HAL_RCC_OscConfig+0x2ba>
 8005ffe:	bf00      	nop
 8006000:	40021000 	.word	0x40021000
 8006004:	0801283c 	.word	0x0801283c
 8006008:	20000000 	.word	0x20000000
 800600c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006010:	f7fd fea4 	bl	8003d5c <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b64      	cmp	r3, #100	; 0x64
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e280      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006022:	4baf      	ldr	r3, [pc, #700]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0f0      	beq.n	8006010 <HAL_RCC_OscConfig+0x2a8>
 800602e:	e014      	b.n	800605a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fd fe94 	bl	8003d5c <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006038:	f7fd fe90 	bl	8003d5c <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b64      	cmp	r3, #100	; 0x64
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e26c      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800604a:	4ba5      	ldr	r3, [pc, #660]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x2d0>
 8006056:	e000      	b.n	800605a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d060      	beq.n	8006128 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b04      	cmp	r3, #4
 800606a:	d005      	beq.n	8006078 <HAL_RCC_OscConfig+0x310>
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b0c      	cmp	r3, #12
 8006070:	d119      	bne.n	80060a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d116      	bne.n	80060a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006078:	4b99      	ldr	r3, [pc, #612]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_RCC_OscConfig+0x328>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e249      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006090:	4b93      	ldr	r3, [pc, #588]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	061b      	lsls	r3, r3, #24
 800609e:	4990      	ldr	r1, [pc, #576]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060a4:	e040      	b.n	8006128 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d023      	beq.n	80060f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060ae:	4b8c      	ldr	r3, [pc, #560]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a8b      	ldr	r2, [pc, #556]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80060b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ba:	f7fd fe4f 	bl	8003d5c <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c2:	f7fd fe4b 	bl	8003d5c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e227      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060d4:	4b82      	ldr	r3, [pc, #520]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e0:	4b7f      	ldr	r3, [pc, #508]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	061b      	lsls	r3, r3, #24
 80060ee:	497c      	ldr	r1, [pc, #496]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	604b      	str	r3, [r1, #4]
 80060f4:	e018      	b.n	8006128 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f6:	4b7a      	ldr	r3, [pc, #488]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a79      	ldr	r2, [pc, #484]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80060fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006102:	f7fd fe2b 	bl	8003d5c <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800610a:	f7fd fe27 	bl	8003d5c <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e203      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800611c:	4b70      	ldr	r3, [pc, #448]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1f0      	bne.n	800610a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d03c      	beq.n	80061ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01c      	beq.n	8006176 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800613c:	4b68      	ldr	r3, [pc, #416]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 800613e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006142:	4a67      	ldr	r2, [pc, #412]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614c:	f7fd fe06 	bl	8003d5c <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006154:	f7fd fe02 	bl	8003d5c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e1de      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006166:	4b5e      	ldr	r3, [pc, #376]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0ef      	beq.n	8006154 <HAL_RCC_OscConfig+0x3ec>
 8006174:	e01b      	b.n	80061ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006176:	4b5a      	ldr	r3, [pc, #360]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800617c:	4a58      	ldr	r2, [pc, #352]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 800617e:	f023 0301 	bic.w	r3, r3, #1
 8006182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006186:	f7fd fde9 	bl	8003d5c <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800618e:	f7fd fde5 	bl	8003d5c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e1c1      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061a0:	4b4f      	ldr	r3, [pc, #316]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80061a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1ef      	bne.n	800618e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80a6 	beq.w	8006308 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061bc:	2300      	movs	r3, #0
 80061be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80061c0:	4b47      	ldr	r3, [pc, #284]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10d      	bne.n	80061e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061cc:	4b44      	ldr	r3, [pc, #272]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80061ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d0:	4a43      	ldr	r2, [pc, #268]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80061d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d6:	6593      	str	r3, [r2, #88]	; 0x58
 80061d8:	4b41      	ldr	r3, [pc, #260]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80061da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061e4:	2301      	movs	r3, #1
 80061e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061e8:	4b3e      	ldr	r3, [pc, #248]	; (80062e4 <HAL_RCC_OscConfig+0x57c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d118      	bne.n	8006226 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061f4:	4b3b      	ldr	r3, [pc, #236]	; (80062e4 <HAL_RCC_OscConfig+0x57c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a3a      	ldr	r2, [pc, #232]	; (80062e4 <HAL_RCC_OscConfig+0x57c>)
 80061fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006200:	f7fd fdac 	bl	8003d5c <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006208:	f7fd fda8 	bl	8003d5c <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e184      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800621a:	4b32      	ldr	r3, [pc, #200]	; (80062e4 <HAL_RCC_OscConfig+0x57c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f0      	beq.n	8006208 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d108      	bne.n	8006240 <HAL_RCC_OscConfig+0x4d8>
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006234:	4a2a      	ldr	r2, [pc, #168]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006236:	f043 0301 	orr.w	r3, r3, #1
 800623a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800623e:	e024      	b.n	800628a <HAL_RCC_OscConfig+0x522>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b05      	cmp	r3, #5
 8006246:	d110      	bne.n	800626a <HAL_RCC_OscConfig+0x502>
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624e:	4a24      	ldr	r2, [pc, #144]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006250:	f043 0304 	orr.w	r3, r3, #4
 8006254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006258:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625e:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006268:	e00f      	b.n	800628a <HAL_RCC_OscConfig+0x522>
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800627a:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006280:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 8006282:	f023 0304 	bic.w	r3, r3, #4
 8006286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d016      	beq.n	80062c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fd fd63 	bl	8003d5c <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006298:	e00a      	b.n	80062b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fd fd5f 	bl	8003d5c <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e139      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <HAL_RCC_OscConfig+0x578>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0ed      	beq.n	800629a <HAL_RCC_OscConfig+0x532>
 80062be:	e01a      	b.n	80062f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c0:	f7fd fd4c 	bl	8003d5c <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062c6:	e00f      	b.n	80062e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c8:	f7fd fd48 	bl	8003d5c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d906      	bls.n	80062e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e122      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
 80062de:	bf00      	nop
 80062e0:	40021000 	.word	0x40021000
 80062e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062e8:	4b90      	ldr	r3, [pc, #576]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e8      	bne.n	80062c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f6:	7ffb      	ldrb	r3, [r7, #31]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d105      	bne.n	8006308 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062fc:	4b8b      	ldr	r3, [pc, #556]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80062fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006300:	4a8a      	ldr	r2, [pc, #552]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 8006302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006306:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8108 	beq.w	8006522 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	2b02      	cmp	r3, #2
 8006318:	f040 80d0 	bne.w	80064bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800631c:	4b83      	ldr	r3, [pc, #524]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f003 0203 	and.w	r2, r3, #3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	429a      	cmp	r2, r3
 800632e:	d130      	bne.n	8006392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	3b01      	subs	r3, #1
 800633c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800633e:	429a      	cmp	r2, r3
 8006340:	d127      	bne.n	8006392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800634e:	429a      	cmp	r2, r3
 8006350:	d11f      	bne.n	8006392 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800635c:	2a07      	cmp	r2, #7
 800635e:	bf14      	ite	ne
 8006360:	2201      	movne	r2, #1
 8006362:	2200      	moveq	r2, #0
 8006364:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006366:	4293      	cmp	r3, r2
 8006368:	d113      	bne.n	8006392 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006374:	085b      	lsrs	r3, r3, #1
 8006376:	3b01      	subs	r3, #1
 8006378:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800637a:	429a      	cmp	r2, r3
 800637c:	d109      	bne.n	8006392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	3b01      	subs	r3, #1
 800638c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800638e:	429a      	cmp	r2, r3
 8006390:	d06e      	beq.n	8006470 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b0c      	cmp	r3, #12
 8006396:	d069      	beq.n	800646c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006398:	4b64      	ldr	r3, [pc, #400]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80063a4:	4b61      	ldr	r3, [pc, #388]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e0b7      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80063b4:	4b5d      	ldr	r3, [pc, #372]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a5c      	ldr	r2, [pc, #368]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80063ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063c0:	f7fd fccc 	bl	8003d5c <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c8:	f7fd fcc8 	bl	8003d5c <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e0a4      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063da:	4b54      	ldr	r3, [pc, #336]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f0      	bne.n	80063c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063e6:	4b51      	ldr	r3, [pc, #324]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	4b51      	ldr	r3, [pc, #324]	; (8006530 <HAL_RCC_OscConfig+0x7c8>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063f6:	3a01      	subs	r2, #1
 80063f8:	0112      	lsls	r2, r2, #4
 80063fa:	4311      	orrs	r1, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006400:	0212      	lsls	r2, r2, #8
 8006402:	4311      	orrs	r1, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006408:	0852      	lsrs	r2, r2, #1
 800640a:	3a01      	subs	r2, #1
 800640c:	0552      	lsls	r2, r2, #21
 800640e:	4311      	orrs	r1, r2
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006414:	0852      	lsrs	r2, r2, #1
 8006416:	3a01      	subs	r2, #1
 8006418:	0652      	lsls	r2, r2, #25
 800641a:	4311      	orrs	r1, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006420:	0912      	lsrs	r2, r2, #4
 8006422:	0452      	lsls	r2, r2, #17
 8006424:	430a      	orrs	r2, r1
 8006426:	4941      	ldr	r1, [pc, #260]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 8006428:	4313      	orrs	r3, r2
 800642a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800642c:	4b3f      	ldr	r3, [pc, #252]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a3e      	ldr	r2, [pc, #248]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 8006432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006438:	4b3c      	ldr	r3, [pc, #240]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4a3b      	ldr	r2, [pc, #236]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 800643e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006444:	f7fd fc8a 	bl	8003d5c <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800644c:	f7fd fc86 	bl	8003d5c <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e062      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800645e:	4b33      	ldr	r3, [pc, #204]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0f0      	beq.n	800644c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800646a:	e05a      	b.n	8006522 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e059      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006470:	4b2e      	ldr	r3, [pc, #184]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d152      	bne.n	8006522 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800647c:	4b2b      	ldr	r3, [pc, #172]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2a      	ldr	r2, [pc, #168]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 8006482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006488:	4b28      	ldr	r3, [pc, #160]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	4a27      	ldr	r2, [pc, #156]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 800648e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006494:	f7fd fc62 	bl	8003d5c <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800649c:	f7fd fc5e 	bl	8003d5c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e03a      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0x734>
 80064ba:	e032      	b.n	8006522 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b0c      	cmp	r3, #12
 80064c0:	d02d      	beq.n	800651e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c2:	4b1a      	ldr	r3, [pc, #104]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a19      	ldr	r2, [pc, #100]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80064c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80064ce:	4b17      	ldr	r3, [pc, #92]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80064da:	4b14      	ldr	r3, [pc, #80]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	4a13      	ldr	r2, [pc, #76]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80064e0:	f023 0303 	bic.w	r3, r3, #3
 80064e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80064e6:	4b11      	ldr	r3, [pc, #68]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	4a10      	ldr	r2, [pc, #64]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 80064ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80064f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f6:	f7fd fc31 	bl	8003d5c <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fe:	f7fd fc2d 	bl	8003d5c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e009      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <HAL_RCC_OscConfig+0x7c4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f0      	bne.n	80064fe <HAL_RCC_OscConfig+0x796>
 800651c:	e001      	b.n	8006522 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3720      	adds	r7, #32
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40021000 	.word	0x40021000
 8006530:	f99d808c 	.word	0xf99d808c

08006534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0c8      	b.n	80066da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006548:	4b66      	ldr	r3, [pc, #408]	; (80066e4 <HAL_RCC_ClockConfig+0x1b0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d910      	bls.n	8006578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006556:	4b63      	ldr	r3, [pc, #396]	; (80066e4 <HAL_RCC_ClockConfig+0x1b0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 0207 	bic.w	r2, r3, #7
 800655e:	4961      	ldr	r1, [pc, #388]	; (80066e4 <HAL_RCC_ClockConfig+0x1b0>)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006566:	4b5f      	ldr	r3, [pc, #380]	; (80066e4 <HAL_RCC_ClockConfig+0x1b0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0b0      	b.n	80066da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d04c      	beq.n	800661e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2b03      	cmp	r3, #3
 800658a:	d107      	bne.n	800659c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800658c:	4b56      	ldr	r3, [pc, #344]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d121      	bne.n	80065dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e09e      	b.n	80066da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d107      	bne.n	80065b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065a4:	4b50      	ldr	r3, [pc, #320]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d115      	bne.n	80065dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e092      	b.n	80066da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d107      	bne.n	80065cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065bc:	4b4a      	ldr	r3, [pc, #296]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e086      	b.n	80066da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065cc:	4b46      	ldr	r3, [pc, #280]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e07e      	b.n	80066da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065dc:	4b42      	ldr	r3, [pc, #264]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f023 0203 	bic.w	r2, r3, #3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	493f      	ldr	r1, [pc, #252]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ee:	f7fd fbb5 	bl	8003d5c <HAL_GetTick>
 80065f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f4:	e00a      	b.n	800660c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f6:	f7fd fbb1 	bl	8003d5c <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	f241 3288 	movw	r2, #5000	; 0x1388
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e066      	b.n	80066da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660c:	4b36      	ldr	r3, [pc, #216]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 020c 	and.w	r2, r3, #12
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	429a      	cmp	r2, r3
 800661c:	d1eb      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800662a:	4b2f      	ldr	r3, [pc, #188]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	492c      	ldr	r1, [pc, #176]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 8006638:	4313      	orrs	r3, r2
 800663a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800663c:	4b29      	ldr	r3, [pc, #164]	; (80066e4 <HAL_RCC_ClockConfig+0x1b0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d210      	bcs.n	800666c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664a:	4b26      	ldr	r3, [pc, #152]	; (80066e4 <HAL_RCC_ClockConfig+0x1b0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f023 0207 	bic.w	r2, r3, #7
 8006652:	4924      	ldr	r1, [pc, #144]	; (80066e4 <HAL_RCC_ClockConfig+0x1b0>)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	4313      	orrs	r3, r2
 8006658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800665a:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <HAL_RCC_ClockConfig+0x1b0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d001      	beq.n	800666c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e036      	b.n	80066da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d008      	beq.n	800668a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006678:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4918      	ldr	r1, [pc, #96]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 8006686:	4313      	orrs	r3, r2
 8006688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	4910      	ldr	r1, [pc, #64]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066aa:	f000 f825 	bl	80066f8 <HAL_RCC_GetSysClockFreq>
 80066ae:	4601      	mov	r1, r0
 80066b0:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <HAL_RCC_ClockConfig+0x1b4>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	091b      	lsrs	r3, r3, #4
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	4a0c      	ldr	r2, [pc, #48]	; (80066ec <HAL_RCC_ClockConfig+0x1b8>)
 80066bc:	5cd3      	ldrb	r3, [r2, r3]
 80066be:	f003 031f 	and.w	r3, r3, #31
 80066c2:	fa21 f303 	lsr.w	r3, r1, r3
 80066c6:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <HAL_RCC_ClockConfig+0x1bc>)
 80066c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80066ca:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <HAL_RCC_ClockConfig+0x1c0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fd faf8 	bl	8003cc4 <HAL_InitTick>
 80066d4:	4603      	mov	r3, r0
 80066d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80066d8:	7afb      	ldrb	r3, [r7, #11]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40022000 	.word	0x40022000
 80066e8:	40021000 	.word	0x40021000
 80066ec:	0801283c 	.word	0x0801283c
 80066f0:	20000000 	.word	0x20000000
 80066f4:	20000004 	.word	0x20000004

080066f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006706:	4b3d      	ldr	r3, [pc, #244]	; (80067fc <HAL_RCC_GetSysClockFreq+0x104>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 030c 	and.w	r3, r3, #12
 800670e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006710:	4b3a      	ldr	r3, [pc, #232]	; (80067fc <HAL_RCC_GetSysClockFreq+0x104>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_GetSysClockFreq+0x34>
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b0c      	cmp	r3, #12
 8006724:	d121      	bne.n	800676a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d11e      	bne.n	800676a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800672c:	4b33      	ldr	r3, [pc, #204]	; (80067fc <HAL_RCC_GetSysClockFreq+0x104>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d107      	bne.n	8006748 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006738:	4b30      	ldr	r3, [pc, #192]	; (80067fc <HAL_RCC_GetSysClockFreq+0x104>)
 800673a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	e005      	b.n	8006754 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006748:	4b2c      	ldr	r3, [pc, #176]	; (80067fc <HAL_RCC_GetSysClockFreq+0x104>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	091b      	lsrs	r3, r3, #4
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006754:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <HAL_RCC_GetSysClockFreq+0x108>)
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800675c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10d      	bne.n	8006780 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006768:	e00a      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b04      	cmp	r3, #4
 800676e:	d102      	bne.n	8006776 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006770:	4b24      	ldr	r3, [pc, #144]	; (8006804 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006772:	61bb      	str	r3, [r7, #24]
 8006774:	e004      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b08      	cmp	r3, #8
 800677a:	d101      	bne.n	8006780 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800677c:	4b22      	ldr	r3, [pc, #136]	; (8006808 <HAL_RCC_GetSysClockFreq+0x110>)
 800677e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b0c      	cmp	r3, #12
 8006784:	d133      	bne.n	80067ee <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006786:	4b1d      	ldr	r3, [pc, #116]	; (80067fc <HAL_RCC_GetSysClockFreq+0x104>)
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d002      	beq.n	800679c <HAL_RCC_GetSysClockFreq+0xa4>
 8006796:	2b03      	cmp	r3, #3
 8006798:	d003      	beq.n	80067a2 <HAL_RCC_GetSysClockFreq+0xaa>
 800679a:	e005      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800679c:	4b19      	ldr	r3, [pc, #100]	; (8006804 <HAL_RCC_GetSysClockFreq+0x10c>)
 800679e:	617b      	str	r3, [r7, #20]
      break;
 80067a0:	e005      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80067a2:	4b19      	ldr	r3, [pc, #100]	; (8006808 <HAL_RCC_GetSysClockFreq+0x110>)
 80067a4:	617b      	str	r3, [r7, #20]
      break;
 80067a6:	e002      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	617b      	str	r3, [r7, #20]
      break;
 80067ac:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <HAL_RCC_GetSysClockFreq+0x104>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	091b      	lsrs	r3, r3, #4
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	3301      	adds	r3, #1
 80067ba:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80067bc:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <HAL_RCC_GetSysClockFreq+0x104>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	0a1b      	lsrs	r3, r3, #8
 80067c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	fb02 f203 	mul.w	r2, r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <HAL_RCC_GetSysClockFreq+0x104>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	0e5b      	lsrs	r3, r3, #25
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	3301      	adds	r3, #1
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ec:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80067ee:	69bb      	ldr	r3, [r7, #24]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3724      	adds	r7, #36	; 0x24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	40021000 	.word	0x40021000
 8006800:	08012854 	.word	0x08012854
 8006804:	00f42400 	.word	0x00f42400
 8006808:	007a1200 	.word	0x007a1200

0800680c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006810:	4b03      	ldr	r3, [pc, #12]	; (8006820 <HAL_RCC_GetHCLKFreq+0x14>)
 8006812:	681b      	ldr	r3, [r3, #0]
}
 8006814:	4618      	mov	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20000000 	.word	0x20000000

08006824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006828:	f7ff fff0 	bl	800680c <HAL_RCC_GetHCLKFreq>
 800682c:	4601      	mov	r1, r0
 800682e:	4b06      	ldr	r3, [pc, #24]	; (8006848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	4a04      	ldr	r2, [pc, #16]	; (800684c <HAL_RCC_GetPCLK1Freq+0x28>)
 800683a:	5cd3      	ldrb	r3, [r2, r3]
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006844:	4618      	mov	r0, r3
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40021000 	.word	0x40021000
 800684c:	0801284c 	.word	0x0801284c

08006850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006854:	f7ff ffda 	bl	800680c <HAL_RCC_GetHCLKFreq>
 8006858:	4601      	mov	r1, r0
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <HAL_RCC_GetPCLK2Freq+0x24>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	0adb      	lsrs	r3, r3, #11
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	4a04      	ldr	r2, [pc, #16]	; (8006878 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006866:	5cd3      	ldrb	r3, [r2, r3]
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006870:	4618      	mov	r0, r3
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40021000 	.word	0x40021000
 8006878:	0801284c 	.word	0x0801284c

0800687c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006884:	2300      	movs	r3, #0
 8006886:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006888:	4b2a      	ldr	r3, [pc, #168]	; (8006934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800688a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006894:	f7ff f9f4 	bl	8005c80 <HAL_PWREx_GetVoltageRange>
 8006898:	6178      	str	r0, [r7, #20]
 800689a:	e014      	b.n	80068c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800689c:	4b25      	ldr	r3, [pc, #148]	; (8006934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a0:	4a24      	ldr	r2, [pc, #144]	; (8006934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a6:	6593      	str	r3, [r2, #88]	; 0x58
 80068a8:	4b22      	ldr	r3, [pc, #136]	; (8006934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80068b4:	f7ff f9e4 	bl	8005c80 <HAL_PWREx_GetVoltageRange>
 80068b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80068ba:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068be:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068cc:	d10b      	bne.n	80068e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b80      	cmp	r3, #128	; 0x80
 80068d2:	d919      	bls.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2ba0      	cmp	r3, #160	; 0xa0
 80068d8:	d902      	bls.n	80068e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068da:	2302      	movs	r3, #2
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	e013      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068e0:	2301      	movs	r3, #1
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	e010      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b80      	cmp	r3, #128	; 0x80
 80068ea:	d902      	bls.n	80068f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80068ec:	2303      	movs	r3, #3
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	e00a      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b80      	cmp	r3, #128	; 0x80
 80068f6:	d102      	bne.n	80068fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068f8:	2302      	movs	r3, #2
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	e004      	b.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b70      	cmp	r3, #112	; 0x70
 8006902:	d101      	bne.n	8006908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006904:	2301      	movs	r3, #1
 8006906:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f023 0207 	bic.w	r2, r3, #7
 8006910:	4909      	ldr	r1, [pc, #36]	; (8006938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d001      	beq.n	800692a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40021000 	.word	0x40021000
 8006938:	40022000 	.word	0x40022000

0800693c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006944:	2300      	movs	r3, #0
 8006946:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006948:	2300      	movs	r3, #0
 800694a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006954:	2b00      	cmp	r3, #0
 8006956:	d03f      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006960:	d01c      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006966:	d802      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00e      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800696c:	e01f      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x72>
 800696e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006972:	d003      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006974:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006978:	d01c      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800697a:	e018      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800697c:	4b85      	ldr	r3, [pc, #532]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a84      	ldr	r2, [pc, #528]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006986:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006988:	e015      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3304      	adds	r3, #4
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fab9 	bl	8006f08 <RCCEx_PLLSAI1_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800699a:	e00c      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3320      	adds	r3, #32
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fba0 	bl	80070e8 <RCCEx_PLLSAI2_Config>
 80069a8:	4603      	mov	r3, r0
 80069aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	74fb      	strb	r3, [r7, #19]
      break;
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80069b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b6:	7cfb      	ldrb	r3, [r7, #19]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069bc:	4b75      	ldr	r3, [pc, #468]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ca:	4972      	ldr	r1, [pc, #456]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80069d2:	e001      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d4:	7cfb      	ldrb	r3, [r7, #19]
 80069d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d03f      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069ec:	d01c      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80069ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069f2:	d802      	bhi.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00e      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80069f8:	e01f      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80069fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069fe:	d003      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006a00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a04:	d01c      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006a06:	e018      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a08:	4b62      	ldr	r3, [pc, #392]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	4a61      	ldr	r2, [pc, #388]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a14:	e015      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fa73 	bl	8006f08 <RCCEx_PLLSAI1_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a26:	e00c      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3320      	adds	r3, #32
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fb5a 	bl	80070e8 <RCCEx_PLLSAI2_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a38:	e003      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	74fb      	strb	r3, [r7, #19]
      break;
 8006a3e:	e000      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a42:	7cfb      	ldrb	r3, [r7, #19]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a48:	4b52      	ldr	r3, [pc, #328]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a56:	494f      	ldr	r1, [pc, #316]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006a5e:	e001      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a60:	7cfb      	ldrb	r3, [r7, #19]
 8006a62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 80a0 	beq.w	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a72:	2300      	movs	r3, #0
 8006a74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a76:	4b47      	ldr	r3, [pc, #284]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006a86:	2300      	movs	r3, #0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00d      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a8c:	4b41      	ldr	r3, [pc, #260]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a90:	4a40      	ldr	r2, [pc, #256]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a96:	6593      	str	r3, [r2, #88]	; 0x58
 8006a98:	4b3e      	ldr	r3, [pc, #248]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006aa8:	4b3b      	ldr	r3, [pc, #236]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a3a      	ldr	r2, [pc, #232]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ab4:	f7fd f952 	bl	8003d5c <HAL_GetTick>
 8006ab8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006aba:	e009      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006abc:	f7fd f94e 	bl	8003d5c <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d902      	bls.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	74fb      	strb	r3, [r7, #19]
        break;
 8006ace:	e005      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ad0:	4b31      	ldr	r3, [pc, #196]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0ef      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8006adc:	7cfb      	ldrb	r3, [r7, #19]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d15c      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ae2:	4b2c      	ldr	r3, [pc, #176]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01f      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d019      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b00:	4b24      	ldr	r3, [pc, #144]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b0c:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b12:	4a20      	ldr	r2, [pc, #128]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b1c:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b22:	4a1c      	ldr	r2, [pc, #112]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b2c:	4a19      	ldr	r2, [pc, #100]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d016      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3e:	f7fd f90d 	bl	8003d5c <HAL_GetTick>
 8006b42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b44:	e00b      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b46:	f7fd f909 	bl	8003d5c <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d902      	bls.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	74fb      	strb	r3, [r7, #19]
            break;
 8006b5c:	e006      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0ec      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8006b6c:	7cfb      	ldrb	r3, [r7, #19]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b72:	4b08      	ldr	r3, [pc, #32]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b82:	4904      	ldr	r1, [pc, #16]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006b8a:	e009      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b8c:	7cfb      	ldrb	r3, [r7, #19]
 8006b8e:	74bb      	strb	r3, [r7, #18]
 8006b90:	e006      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006b92:	bf00      	nop
 8006b94:	40021000 	.word	0x40021000
 8006b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9c:	7cfb      	ldrb	r3, [r7, #19]
 8006b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ba0:	7c7b      	ldrb	r3, [r7, #17]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d105      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba6:	4b9e      	ldr	r3, [pc, #632]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006baa:	4a9d      	ldr	r2, [pc, #628]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bbe:	4b98      	ldr	r3, [pc, #608]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc4:	f023 0203 	bic.w	r2, r3, #3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	4994      	ldr	r1, [pc, #592]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006be0:	4b8f      	ldr	r3, [pc, #572]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be6:	f023 020c 	bic.w	r2, r3, #12
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bee:	498c      	ldr	r1, [pc, #560]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c02:	4b87      	ldr	r3, [pc, #540]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	4983      	ldr	r1, [pc, #524]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c24:	4b7e      	ldr	r3, [pc, #504]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c32:	497b      	ldr	r1, [pc, #492]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c46:	4b76      	ldr	r3, [pc, #472]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c54:	4972      	ldr	r1, [pc, #456]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c68:	4b6d      	ldr	r3, [pc, #436]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c76:	496a      	ldr	r1, [pc, #424]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c8a:	4b65      	ldr	r3, [pc, #404]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c98:	4961      	ldr	r1, [pc, #388]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cac:	4b5c      	ldr	r3, [pc, #368]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cba:	4959      	ldr	r1, [pc, #356]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cce:	4b54      	ldr	r3, [pc, #336]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cdc:	4950      	ldr	r1, [pc, #320]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006cf0:	4b4b      	ldr	r3, [pc, #300]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfe:	4948      	ldr	r1, [pc, #288]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d12:	4b43      	ldr	r3, [pc, #268]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d20:	493f      	ldr	r1, [pc, #252]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d028      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d34:	4b3a      	ldr	r3, [pc, #232]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d42:	4937      	ldr	r1, [pc, #220]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d52:	d106      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d54:	4b32      	ldr	r3, [pc, #200]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	4a31      	ldr	r2, [pc, #196]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d5e:	60d3      	str	r3, [r2, #12]
 8006d60:	e011      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d6a:	d10c      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f8c8 	bl	8006f08 <RCCEx_PLLSAI1_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006d7c:	7cfb      	ldrb	r3, [r7, #19]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8006d82:	7cfb      	ldrb	r3, [r7, #19]
 8006d84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d028      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006d92:	4b23      	ldr	r3, [pc, #140]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da0:	491f      	ldr	r1, [pc, #124]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006db0:	d106      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006db2:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	4a1a      	ldr	r2, [pc, #104]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dbc:	60d3      	str	r3, [r2, #12]
 8006dbe:	e011      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dc8:	d10c      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 f899 	bl	8006f08 <RCCEx_PLLSAI1_Config>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006dda:	7cfb      	ldrb	r3, [r7, #19]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8006de0:	7cfb      	ldrb	r3, [r7, #19]
 8006de2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d02b      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfe:	4908      	ldr	r1, [pc, #32]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e0e:	d109      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e10:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	4a02      	ldr	r2, [pc, #8]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e1a:	60d3      	str	r3, [r2, #12]
 8006e1c:	e014      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006e1e:	bf00      	nop
 8006e20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e2c:	d10c      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3304      	adds	r3, #4
 8006e32:	2101      	movs	r1, #1
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 f867 	bl	8006f08 <RCCEx_PLLSAI1_Config>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e3e:	7cfb      	ldrb	r3, [r7, #19]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8006e44:	7cfb      	ldrb	r3, [r7, #19]
 8006e46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d02f      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e54:	4b2b      	ldr	r3, [pc, #172]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e62:	4928      	ldr	r1, [pc, #160]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e72:	d10d      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	2102      	movs	r1, #2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f844 	bl	8006f08 <RCCEx_PLLSAI1_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e84:	7cfb      	ldrb	r3, [r7, #19]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d014      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006e8a:	7cfb      	ldrb	r3, [r7, #19]
 8006e8c:	74bb      	strb	r3, [r7, #18]
 8006e8e:	e011      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e98:	d10c      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3320      	adds	r3, #32
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 f921 	bl	80070e8 <RCCEx_PLLSAI2_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006eaa:	7cfb      	ldrb	r3, [r7, #19]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006eb0:	7cfb      	ldrb	r3, [r7, #19]
 8006eb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ec0:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ece:	490d      	ldr	r1, [pc, #52]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ee2:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef2:	4904      	ldr	r1, [pc, #16]	; (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006efa:	7cbb      	ldrb	r3, [r7, #18]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40021000 	.word	0x40021000

08006f08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f16:	4b73      	ldr	r3, [pc, #460]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d018      	beq.n	8006f54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f22:	4b70      	ldr	r3, [pc, #448]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f003 0203 	and.w	r2, r3, #3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d10d      	bne.n	8006f4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
       ||
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006f3a:	4b6a      	ldr	r3, [pc, #424]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	091b      	lsrs	r3, r3, #4
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
       ||
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d044      	beq.n	8006fd8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	73fb      	strb	r3, [r7, #15]
 8006f52:	e041      	b.n	8006fd8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d00c      	beq.n	8006f76 <RCCEx_PLLSAI1_Config+0x6e>
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d013      	beq.n	8006f88 <RCCEx_PLLSAI1_Config+0x80>
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d120      	bne.n	8006fa6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f64:	4b5f      	ldr	r3, [pc, #380]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d11d      	bne.n	8006fac <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f74:	e01a      	b.n	8006fac <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f76:	4b5b      	ldr	r3, [pc, #364]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d116      	bne.n	8006fb0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f86:	e013      	b.n	8006fb0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f88:	4b56      	ldr	r3, [pc, #344]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10f      	bne.n	8006fb4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f94:	4b53      	ldr	r3, [pc, #332]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d109      	bne.n	8006fb4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fa4:	e006      	b.n	8006fb4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8006faa:	e004      	b.n	8006fb6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006fac:	bf00      	nop
 8006fae:	e002      	b.n	8006fb6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006fb0:	bf00      	nop
 8006fb2:	e000      	b.n	8006fb6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006fb4:	bf00      	nop
    }

    if(status == HAL_OK)
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10d      	bne.n	8006fd8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006fbc:	4b49      	ldr	r3, [pc, #292]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6819      	ldr	r1, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	4944      	ldr	r1, [pc, #272]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d17d      	bne.n	80070da <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006fde:	4b41      	ldr	r3, [pc, #260]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a40      	ldr	r2, [pc, #256]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fea:	f7fc feb7 	bl	8003d5c <HAL_GetTick>
 8006fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ff0:	e009      	b.n	8007006 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ff2:	f7fc feb3 	bl	8003d5c <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d902      	bls.n	8007006 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	73fb      	strb	r3, [r7, #15]
        break;
 8007004:	e005      	b.n	8007012 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007006:	4b37      	ldr	r3, [pc, #220]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1ef      	bne.n	8006ff2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d160      	bne.n	80070da <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d111      	bne.n	8007042 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800701e:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6892      	ldr	r2, [r2, #8]
 800702e:	0211      	lsls	r1, r2, #8
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	68d2      	ldr	r2, [r2, #12]
 8007034:	0912      	lsrs	r2, r2, #4
 8007036:	0452      	lsls	r2, r2, #17
 8007038:	430a      	orrs	r2, r1
 800703a:	492a      	ldr	r1, [pc, #168]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800703c:	4313      	orrs	r3, r2
 800703e:	610b      	str	r3, [r1, #16]
 8007040:	e027      	b.n	8007092 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d112      	bne.n	800706e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007048:	4b26      	ldr	r3, [pc, #152]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007050:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6892      	ldr	r2, [r2, #8]
 8007058:	0211      	lsls	r1, r2, #8
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6912      	ldr	r2, [r2, #16]
 800705e:	0852      	lsrs	r2, r2, #1
 8007060:	3a01      	subs	r2, #1
 8007062:	0552      	lsls	r2, r2, #21
 8007064:	430a      	orrs	r2, r1
 8007066:	491f      	ldr	r1, [pc, #124]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007068:	4313      	orrs	r3, r2
 800706a:	610b      	str	r3, [r1, #16]
 800706c:	e011      	b.n	8007092 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800706e:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007076:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6892      	ldr	r2, [r2, #8]
 800707e:	0211      	lsls	r1, r2, #8
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6952      	ldr	r2, [r2, #20]
 8007084:	0852      	lsrs	r2, r2, #1
 8007086:	3a01      	subs	r2, #1
 8007088:	0652      	lsls	r2, r2, #25
 800708a:	430a      	orrs	r2, r1
 800708c:	4915      	ldr	r1, [pc, #84]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800708e:	4313      	orrs	r3, r2
 8007090:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007098:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800709c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709e:	f7fc fe5d 	bl	8003d5c <HAL_GetTick>
 80070a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070a4:	e009      	b.n	80070ba <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070a6:	f7fc fe59 	bl	8003d5c <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d902      	bls.n	80070ba <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	73fb      	strb	r3, [r7, #15]
          break;
 80070b8:	e005      	b.n	80070c6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070ba:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0ef      	beq.n	80070a6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d106      	bne.n	80070da <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	4903      	ldr	r1, [pc, #12]	; (80070e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40021000 	.word	0x40021000

080070e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80070f6:	4b68      	ldr	r3, [pc, #416]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d018      	beq.n	8007134 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007102:	4b65      	ldr	r3, [pc, #404]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f003 0203 	and.w	r2, r3, #3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d10d      	bne.n	800712e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
       ||
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800711a:	4b5f      	ldr	r3, [pc, #380]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	091b      	lsrs	r3, r3, #4
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
       ||
 800712a:	429a      	cmp	r2, r3
 800712c:	d044      	beq.n	80071b8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]
 8007132:	e041      	b.n	80071b8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d00c      	beq.n	8007156 <RCCEx_PLLSAI2_Config+0x6e>
 800713c:	2b03      	cmp	r3, #3
 800713e:	d013      	beq.n	8007168 <RCCEx_PLLSAI2_Config+0x80>
 8007140:	2b01      	cmp	r3, #1
 8007142:	d120      	bne.n	8007186 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007144:	4b54      	ldr	r3, [pc, #336]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d11d      	bne.n	800718c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007154:	e01a      	b.n	800718c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007156:	4b50      	ldr	r3, [pc, #320]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800715e:	2b00      	cmp	r3, #0
 8007160:	d116      	bne.n	8007190 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007166:	e013      	b.n	8007190 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007168:	4b4b      	ldr	r3, [pc, #300]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10f      	bne.n	8007194 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007174:	4b48      	ldr	r3, [pc, #288]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d109      	bne.n	8007194 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007184:	e006      	b.n	8007194 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
      break;
 800718a:	e004      	b.n	8007196 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800718c:	bf00      	nop
 800718e:	e002      	b.n	8007196 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007194:	bf00      	nop
    }

    if(status == HAL_OK)
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10d      	bne.n	80071b8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800719c:	4b3e      	ldr	r3, [pc, #248]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6819      	ldr	r1, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	430b      	orrs	r3, r1
 80071b2:	4939      	ldr	r1, [pc, #228]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d167      	bne.n	800728e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80071be:	4b36      	ldr	r3, [pc, #216]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a35      	ldr	r2, [pc, #212]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ca:	f7fc fdc7 	bl	8003d5c <HAL_GetTick>
 80071ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80071d0:	e009      	b.n	80071e6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80071d2:	f7fc fdc3 	bl	8003d5c <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d902      	bls.n	80071e6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	73fb      	strb	r3, [r7, #15]
        break;
 80071e4:	e005      	b.n	80071f2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80071e6:	4b2c      	ldr	r3, [pc, #176]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1ef      	bne.n	80071d2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d14a      	bne.n	800728e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d111      	bne.n	8007222 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80071fe:	4b26      	ldr	r3, [pc, #152]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6892      	ldr	r2, [r2, #8]
 800720e:	0211      	lsls	r1, r2, #8
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	68d2      	ldr	r2, [r2, #12]
 8007214:	0912      	lsrs	r2, r2, #4
 8007216:	0452      	lsls	r2, r2, #17
 8007218:	430a      	orrs	r2, r1
 800721a:	491f      	ldr	r1, [pc, #124]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 800721c:	4313      	orrs	r3, r2
 800721e:	614b      	str	r3, [r1, #20]
 8007220:	e011      	b.n	8007246 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007222:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800722a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6892      	ldr	r2, [r2, #8]
 8007232:	0211      	lsls	r1, r2, #8
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6912      	ldr	r2, [r2, #16]
 8007238:	0852      	lsrs	r2, r2, #1
 800723a:	3a01      	subs	r2, #1
 800723c:	0652      	lsls	r2, r2, #25
 800723e:	430a      	orrs	r2, r1
 8007240:	4915      	ldr	r1, [pc, #84]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007242:	4313      	orrs	r3, r2
 8007244:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a13      	ldr	r2, [pc, #76]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 800724c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007250:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007252:	f7fc fd83 	bl	8003d5c <HAL_GetTick>
 8007256:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007258:	e009      	b.n	800726e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800725a:	f7fc fd7f 	bl	8003d5c <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d902      	bls.n	800726e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	73fb      	strb	r3, [r7, #15]
          break;
 800726c:	e005      	b.n	800727a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800726e:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0ef      	beq.n	800725a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007282:	695a      	ldr	r2, [r3, #20]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	4903      	ldr	r1, [pc, #12]	; (8007298 <RCCEx_PLLSAI2_Config+0x1b0>)
 800728a:	4313      	orrs	r3, r2
 800728c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40021000 	.word	0x40021000

0800729c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e01d      	b.n	80072ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d106      	bne.n	80072c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fc fb7a 	bl	80039bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f000 f97c 	bl	80075d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <HAL_TIM_Base_Start_IT+0x50>)
 8007314:	4013      	ands	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b06      	cmp	r3, #6
 800731c:	d00b      	beq.n	8007336 <HAL_TIM_Base_Start_IT+0x42>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007324:	d007      	beq.n	8007336 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0201 	orr.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	00010007 	.word	0x00010007

08007348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b02      	cmp	r3, #2
 800735c:	d122      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b02      	cmp	r3, #2
 800736a:	d11b      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0202 	mvn.w	r2, #2
 8007374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f905 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 8007390:	e005      	b.n	800739e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f8f7 	bl	8007586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f908 	bl	80075ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d122      	bne.n	80073f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b04      	cmp	r3, #4
 80073be:	d11b      	bne.n	80073f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0204 	mvn.w	r2, #4
 80073c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f8db 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 80073e4:	e005      	b.n	80073f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f8cd 	bl	8007586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f8de 	bl	80075ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b08      	cmp	r3, #8
 8007404:	d122      	bne.n	800744c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b08      	cmp	r3, #8
 8007412:	d11b      	bne.n	800744c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0208 	mvn.w	r2, #8
 800741c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2204      	movs	r2, #4
 8007422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f8b1 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 8007438:	e005      	b.n	8007446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8a3 	bl	8007586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f8b4 	bl	80075ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	f003 0310 	and.w	r3, r3, #16
 8007456:	2b10      	cmp	r3, #16
 8007458:	d122      	bne.n	80074a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b10      	cmp	r3, #16
 8007466:	d11b      	bne.n	80074a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f06f 0210 	mvn.w	r2, #16
 8007470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2208      	movs	r2, #8
 8007476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f887 	bl	800759a <HAL_TIM_IC_CaptureCallback>
 800748c:	e005      	b.n	800749a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f879 	bl	8007586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f88a 	bl	80075ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d10e      	bne.n	80074cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d107      	bne.n	80074cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0201 	mvn.w	r2, #1
 80074c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fc f992 	bl	80037f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d6:	2b80      	cmp	r3, #128	; 0x80
 80074d8:	d10e      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e4:	2b80      	cmp	r3, #128	; 0x80
 80074e6:	d107      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f99c 	bl	8007830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007506:	d10e      	bne.n	8007526 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d107      	bne.n	8007526 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800751e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f98f 	bl	8007844 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007530:	2b40      	cmp	r3, #64	; 0x40
 8007532:	d10e      	bne.n	8007552 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b40      	cmp	r3, #64	; 0x40
 8007540:	d107      	bne.n	8007552 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800754a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f838 	bl	80075c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b20      	cmp	r3, #32
 800755e:	d10e      	bne.n	800757e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b20      	cmp	r3, #32
 800756c:	d107      	bne.n	800757e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f06f 0220 	mvn.w	r2, #32
 8007576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f94f 	bl	800781c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
	...

080075d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a40      	ldr	r2, [pc, #256]	; (80076ec <TIM_Base_SetConfig+0x114>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d013      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f6:	d00f      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a3d      	ldr	r2, [pc, #244]	; (80076f0 <TIM_Base_SetConfig+0x118>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00b      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a3c      	ldr	r2, [pc, #240]	; (80076f4 <TIM_Base_SetConfig+0x11c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d007      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a3b      	ldr	r2, [pc, #236]	; (80076f8 <TIM_Base_SetConfig+0x120>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_Base_SetConfig+0x40>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a3a      	ldr	r2, [pc, #232]	; (80076fc <TIM_Base_SetConfig+0x124>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d108      	bne.n	800762a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a2f      	ldr	r2, [pc, #188]	; (80076ec <TIM_Base_SetConfig+0x114>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d01f      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007638:	d01b      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a2c      	ldr	r2, [pc, #176]	; (80076f0 <TIM_Base_SetConfig+0x118>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d017      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a2b      	ldr	r2, [pc, #172]	; (80076f4 <TIM_Base_SetConfig+0x11c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d013      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a2a      	ldr	r2, [pc, #168]	; (80076f8 <TIM_Base_SetConfig+0x120>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00f      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a29      	ldr	r2, [pc, #164]	; (80076fc <TIM_Base_SetConfig+0x124>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00b      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a28      	ldr	r2, [pc, #160]	; (8007700 <TIM_Base_SetConfig+0x128>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d007      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a27      	ldr	r2, [pc, #156]	; (8007704 <TIM_Base_SetConfig+0x12c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d003      	beq.n	8007672 <TIM_Base_SetConfig+0x9a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a26      	ldr	r2, [pc, #152]	; (8007708 <TIM_Base_SetConfig+0x130>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d108      	bne.n	8007684 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a10      	ldr	r2, [pc, #64]	; (80076ec <TIM_Base_SetConfig+0x114>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00f      	beq.n	80076d0 <TIM_Base_SetConfig+0xf8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a12      	ldr	r2, [pc, #72]	; (80076fc <TIM_Base_SetConfig+0x124>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d00b      	beq.n	80076d0 <TIM_Base_SetConfig+0xf8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a11      	ldr	r2, [pc, #68]	; (8007700 <TIM_Base_SetConfig+0x128>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <TIM_Base_SetConfig+0xf8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a10      	ldr	r2, [pc, #64]	; (8007704 <TIM_Base_SetConfig+0x12c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_Base_SetConfig+0xf8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a0f      	ldr	r2, [pc, #60]	; (8007708 <TIM_Base_SetConfig+0x130>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d103      	bne.n	80076d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	615a      	str	r2, [r3, #20]
}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40013400 	.word	0x40013400
 8007700:	40014000 	.word	0x40014000
 8007704:	40014400 	.word	0x40014400
 8007708:	40014800 	.word	0x40014800

0800770c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007720:	2302      	movs	r3, #2
 8007722:	e068      	b.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a2e      	ldr	r2, [pc, #184]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d004      	beq.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a2d      	ldr	r2, [pc, #180]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d108      	bne.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800775e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007770:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d01d      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007796:	d018      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1b      	ldr	r2, [pc, #108]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d013      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1a      	ldr	r2, [pc, #104]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00e      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a18      	ldr	r2, [pc, #96]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d009      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a13      	ldr	r2, [pc, #76]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a14      	ldr	r2, [pc, #80]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d10c      	bne.n	80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40012c00 	.word	0x40012c00
 8007808:	40013400 	.word	0x40013400
 800780c:	40000400 	.word	0x40000400
 8007810:	40000800 	.word	0x40000800
 8007814:	40000c00 	.word	0x40000c00
 8007818:	40014000 	.word	0x40014000

0800781c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e040      	b.n	80078ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fc f8c4 	bl	8003a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2224      	movs	r2, #36	; 0x24
 8007884:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0201 	bic.w	r2, r2, #1
 8007894:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa7a 	bl	8007d90 <UART_SetConfig>
 800789c:	4603      	mov	r3, r0
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d101      	bne.n	80078a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e022      	b.n	80078ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fde0 	bl	8008474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fe67 	bl	80085b8 <UART_CheckIdleState>
 80078ea:	4603      	mov	r3, r0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	4613      	mov	r3, r2
 8007900:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007906:	2b20      	cmp	r3, #32
 8007908:	d144      	bne.n	8007994 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <HAL_UART_Transmit_IT+0x22>
 8007910:	88fb      	ldrh	r3, [r7, #6]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e03d      	b.n	8007996 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007920:	2b01      	cmp	r3, #1
 8007922:	d101      	bne.n	8007928 <HAL_UART_Transmit_IT+0x34>
 8007924:	2302      	movs	r3, #2
 8007926:	e036      	b.n	8007996 <HAL_UART_Transmit_IT+0xa2>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	88fa      	ldrh	r2, [r7, #6]
 800793a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	88fa      	ldrh	r2, [r7, #6]
 8007942:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2221      	movs	r2, #33	; 0x21
 8007956:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007960:	d107      	bne.n	8007972 <HAL_UART_Transmit_IT+0x7e>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4a0d      	ldr	r2, [pc, #52]	; (80079a4 <HAL_UART_Transmit_IT+0xb0>)
 800796e:	665a      	str	r2, [r3, #100]	; 0x64
 8007970:	e002      	b.n	8007978 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a0c      	ldr	r2, [pc, #48]	; (80079a8 <HAL_UART_Transmit_IT+0xb4>)
 8007976:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800798e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	e000      	b.n	8007996 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
  }
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	08008819 	.word	0x08008819
 80079a8:	080087a5 	.word	0x080087a5

080079ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079be:	2b20      	cmp	r3, #32
 80079c0:	f040 808a 	bne.w	8007ad8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_UART_Receive_IT+0x24>
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e082      	b.n	8007ada <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d101      	bne.n	80079e2 <HAL_UART_Receive_IT+0x36>
 80079de:	2302      	movs	r3, #2
 80079e0:	e07b      	b.n	8007ada <HAL_UART_Receive_IT+0x12e>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	88fa      	ldrh	r2, [r7, #6]
 80079f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	88fa      	ldrh	r2, [r7, #6]
 80079fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0e:	d10e      	bne.n	8007a2e <HAL_UART_Receive_IT+0x82>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <HAL_UART_Receive_IT+0x78>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a22:	e02d      	b.n	8007a80 <HAL_UART_Receive_IT+0xd4>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	22ff      	movs	r2, #255	; 0xff
 8007a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a2c:	e028      	b.n	8007a80 <HAL_UART_Receive_IT+0xd4>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10d      	bne.n	8007a52 <HAL_UART_Receive_IT+0xa6>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <HAL_UART_Receive_IT+0x9c>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	22ff      	movs	r2, #255	; 0xff
 8007a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a46:	e01b      	b.n	8007a80 <HAL_UART_Receive_IT+0xd4>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	227f      	movs	r2, #127	; 0x7f
 8007a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a50:	e016      	b.n	8007a80 <HAL_UART_Receive_IT+0xd4>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a5a:	d10d      	bne.n	8007a78 <HAL_UART_Receive_IT+0xcc>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <HAL_UART_Receive_IT+0xc2>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	227f      	movs	r2, #127	; 0x7f
 8007a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a6c:	e008      	b.n	8007a80 <HAL_UART_Receive_IT+0xd4>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	223f      	movs	r2, #63	; 0x3f
 8007a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a76:	e003      	b.n	8007a80 <HAL_UART_Receive_IT+0xd4>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2222      	movs	r2, #34	; 0x22
 8007a8a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa4:	d107      	bne.n	8007ab6 <HAL_UART_Receive_IT+0x10a>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4a0d      	ldr	r2, [pc, #52]	; (8007ae8 <HAL_UART_Receive_IT+0x13c>)
 8007ab2:	661a      	str	r2, [r3, #96]	; 0x60
 8007ab4:	e002      	b.n	8007abc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4a0c      	ldr	r2, [pc, #48]	; (8007aec <HAL_UART_Receive_IT+0x140>)
 8007aba:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007ad2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e000      	b.n	8007ada <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007ad8:	2302      	movs	r3, #2
  }
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	08008971 	.word	0x08008971
 8007aec:	080088c7 	.word	0x080088c7

08007af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b16:	4013      	ands	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d113      	bne.n	8007b48 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00e      	beq.n	8007b48 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d009      	beq.n	8007b48 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 8114 	beq.w	8007d66 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
      }
      return;
 8007b46:	e10e      	b.n	8007d66 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 80d6 	beq.w	8007cfc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d105      	bne.n	8007b66 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80cb 	beq.w	8007cfc <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00e      	beq.n	8007b8e <HAL_UART_IRQHandler+0x9e>
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b86:	f043 0201 	orr.w	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00e      	beq.n	8007bb6 <HAL_UART_IRQHandler+0xc6>
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bae:	f043 0204 	orr.w	r2, r3, #4
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00e      	beq.n	8007bde <HAL_UART_IRQHandler+0xee>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2204      	movs	r2, #4
 8007bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bd6:	f043 0202 	orr.w	r2, r3, #2
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d013      	beq.n	8007c10 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d104      	bne.n	8007bfc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2208      	movs	r2, #8
 8007c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c08:	f043 0208 	orr.w	r2, r3, #8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00f      	beq.n	8007c3a <HAL_UART_IRQHandler+0x14a>
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00a      	beq.n	8007c3a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c32:	f043 0220 	orr.w	r2, r3, #32
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 8093 	beq.w	8007d6a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00c      	beq.n	8007c68 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b40      	cmp	r3, #64	; 0x40
 8007c7a:	d004      	beq.n	8007c86 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d031      	beq.n	8007cea <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fd56 	bl	8008738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c96:	2b40      	cmp	r3, #64	; 0x40
 8007c98:	d123      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d013      	beq.n	8007cda <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb6:	4a30      	ldr	r2, [pc, #192]	; (8007d78 <HAL_UART_IRQHandler+0x288>)
 8007cb8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fc f98b 	bl	8003fda <HAL_DMA_Abort_IT>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	e00e      	b.n	8007cf8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f84e 	bl	8007d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	e00a      	b.n	8007cf8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f84a 	bl	8007d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce8:	e006      	b.n	8007cf8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f846 	bl	8007d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007cf6:	e038      	b.n	8007d6a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf8:	bf00      	nop
    return;
 8007cfa:	e036      	b.n	8007d6a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00d      	beq.n	8007d22 <HAL_UART_IRQHandler+0x232>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fe7d 	bl	8008a1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d20:	e026      	b.n	8007d70 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00d      	beq.n	8007d48 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d008      	beq.n	8007d48 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d017      	beq.n	8007d6e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
    }
    return;
 8007d46:	e012      	b.n	8007d6e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00e      	beq.n	8007d70 <HAL_UART_IRQHandler+0x280>
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d009      	beq.n	8007d70 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fd99 	bl	8008894 <UART_EndTransmit_IT>
    return;
 8007d62:	bf00      	nop
 8007d64:	e004      	b.n	8007d70 <HAL_UART_IRQHandler+0x280>
      return;
 8007d66:	bf00      	nop
 8007d68:	e002      	b.n	8007d70 <HAL_UART_IRQHandler+0x280>
    return;
 8007d6a:	bf00      	nop
 8007d6c:	e000      	b.n	8007d70 <HAL_UART_IRQHandler+0x280>
    return;
 8007d6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d70:	3720      	adds	r7, #32
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	08008779 	.word	0x08008779

08007d7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007d94:	b08a      	sub	sp, #40	; 0x28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	431a      	orrs	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	4bb8      	ldr	r3, [pc, #736]	; (80080a8 <UART_SetConfig+0x318>)
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4aae      	ldr	r2, [pc, #696]	; (80080ac <UART_SetConfig+0x31c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d004      	beq.n	8007e02 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e12:	430a      	orrs	r2, r1
 8007e14:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4aa5      	ldr	r2, [pc, #660]	; (80080b0 <UART_SetConfig+0x320>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d126      	bne.n	8007e6e <UART_SetConfig+0xde>
 8007e20:	4ba4      	ldr	r3, [pc, #656]	; (80080b4 <UART_SetConfig+0x324>)
 8007e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d81a      	bhi.n	8007e64 <UART_SetConfig+0xd4>
 8007e2e:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <UART_SetConfig+0xa4>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007e45 	.word	0x08007e45
 8007e38:	08007e55 	.word	0x08007e55
 8007e3c:	08007e4d 	.word	0x08007e4d
 8007e40:	08007e5d 	.word	0x08007e5d
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e4a:	e105      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e52:	e101      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007e54:	2304      	movs	r3, #4
 8007e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e5a:	e0fd      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e62:	e0f9      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007e64:	2310      	movs	r3, #16
 8007e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e6a:	bf00      	nop
 8007e6c:	e0f4      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a91      	ldr	r2, [pc, #580]	; (80080b8 <UART_SetConfig+0x328>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d138      	bne.n	8007eea <UART_SetConfig+0x15a>
 8007e78:	4b8e      	ldr	r3, [pc, #568]	; (80080b4 <UART_SetConfig+0x324>)
 8007e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7e:	f003 030c 	and.w	r3, r3, #12
 8007e82:	2b0c      	cmp	r3, #12
 8007e84:	d82c      	bhi.n	8007ee0 <UART_SetConfig+0x150>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <UART_SetConfig+0xfc>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007ec1 	.word	0x08007ec1
 8007e90:	08007ee1 	.word	0x08007ee1
 8007e94:	08007ee1 	.word	0x08007ee1
 8007e98:	08007ee1 	.word	0x08007ee1
 8007e9c:	08007ed1 	.word	0x08007ed1
 8007ea0:	08007ee1 	.word	0x08007ee1
 8007ea4:	08007ee1 	.word	0x08007ee1
 8007ea8:	08007ee1 	.word	0x08007ee1
 8007eac:	08007ec9 	.word	0x08007ec9
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	08007ee1 	.word	0x08007ee1
 8007ebc:	08007ed9 	.word	0x08007ed9
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ec6:	e0c7      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ece:	e0c3      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007ed0:	2304      	movs	r3, #4
 8007ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ed6:	e0bf      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ede:	e0bb      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ee6:	bf00      	nop
 8007ee8:	e0b6      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a73      	ldr	r2, [pc, #460]	; (80080bc <UART_SetConfig+0x32c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d125      	bne.n	8007f40 <UART_SetConfig+0x1b0>
 8007ef4:	4b6f      	ldr	r3, [pc, #444]	; (80080b4 <UART_SetConfig+0x324>)
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007efe:	2b10      	cmp	r3, #16
 8007f00:	d011      	beq.n	8007f26 <UART_SetConfig+0x196>
 8007f02:	2b10      	cmp	r3, #16
 8007f04:	d802      	bhi.n	8007f0c <UART_SetConfig+0x17c>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <UART_SetConfig+0x186>
 8007f0a:	e014      	b.n	8007f36 <UART_SetConfig+0x1a6>
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d006      	beq.n	8007f1e <UART_SetConfig+0x18e>
 8007f10:	2b30      	cmp	r3, #48	; 0x30
 8007f12:	d00c      	beq.n	8007f2e <UART_SetConfig+0x19e>
 8007f14:	e00f      	b.n	8007f36 <UART_SetConfig+0x1a6>
 8007f16:	2300      	movs	r3, #0
 8007f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f1c:	e09c      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f24:	e098      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f26:	2304      	movs	r3, #4
 8007f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f2c:	e094      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f2e:	2308      	movs	r3, #8
 8007f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f34:	e090      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f36:	2310      	movs	r3, #16
 8007f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f3c:	bf00      	nop
 8007f3e:	e08b      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a5e      	ldr	r2, [pc, #376]	; (80080c0 <UART_SetConfig+0x330>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d125      	bne.n	8007f96 <UART_SetConfig+0x206>
 8007f4a:	4b5a      	ldr	r3, [pc, #360]	; (80080b4 <UART_SetConfig+0x324>)
 8007f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	d011      	beq.n	8007f7c <UART_SetConfig+0x1ec>
 8007f58:	2b40      	cmp	r3, #64	; 0x40
 8007f5a:	d802      	bhi.n	8007f62 <UART_SetConfig+0x1d2>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <UART_SetConfig+0x1dc>
 8007f60:	e014      	b.n	8007f8c <UART_SetConfig+0x1fc>
 8007f62:	2b80      	cmp	r3, #128	; 0x80
 8007f64:	d006      	beq.n	8007f74 <UART_SetConfig+0x1e4>
 8007f66:	2bc0      	cmp	r3, #192	; 0xc0
 8007f68:	d00c      	beq.n	8007f84 <UART_SetConfig+0x1f4>
 8007f6a:	e00f      	b.n	8007f8c <UART_SetConfig+0x1fc>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f72:	e071      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f74:	2302      	movs	r3, #2
 8007f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f7a:	e06d      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f82:	e069      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f84:	2308      	movs	r3, #8
 8007f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f8a:	e065      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f8c:	2310      	movs	r3, #16
 8007f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f92:	bf00      	nop
 8007f94:	e060      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a4a      	ldr	r2, [pc, #296]	; (80080c4 <UART_SetConfig+0x334>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d129      	bne.n	8007ff4 <UART_SetConfig+0x264>
 8007fa0:	4b44      	ldr	r3, [pc, #272]	; (80080b4 <UART_SetConfig+0x324>)
 8007fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fae:	d014      	beq.n	8007fda <UART_SetConfig+0x24a>
 8007fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb4:	d802      	bhi.n	8007fbc <UART_SetConfig+0x22c>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <UART_SetConfig+0x23a>
 8007fba:	e016      	b.n	8007fea <UART_SetConfig+0x25a>
 8007fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fc0:	d007      	beq.n	8007fd2 <UART_SetConfig+0x242>
 8007fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fc6:	d00c      	beq.n	8007fe2 <UART_SetConfig+0x252>
 8007fc8:	e00f      	b.n	8007fea <UART_SetConfig+0x25a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd0:	e042      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd8:	e03e      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007fda:	2304      	movs	r3, #4
 8007fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fe0:	e03a      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007fe2:	2308      	movs	r3, #8
 8007fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fe8:	e036      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007fea:	2310      	movs	r3, #16
 8007fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ff0:	bf00      	nop
 8007ff2:	e031      	b.n	8008058 <UART_SetConfig+0x2c8>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a2c      	ldr	r2, [pc, #176]	; (80080ac <UART_SetConfig+0x31c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d129      	bne.n	8008052 <UART_SetConfig+0x2c2>
 8007ffe:	4b2d      	ldr	r3, [pc, #180]	; (80080b4 <UART_SetConfig+0x324>)
 8008000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008004:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800800c:	d014      	beq.n	8008038 <UART_SetConfig+0x2a8>
 800800e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008012:	d802      	bhi.n	800801a <UART_SetConfig+0x28a>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d007      	beq.n	8008028 <UART_SetConfig+0x298>
 8008018:	e016      	b.n	8008048 <UART_SetConfig+0x2b8>
 800801a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800801e:	d007      	beq.n	8008030 <UART_SetConfig+0x2a0>
 8008020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008024:	d00c      	beq.n	8008040 <UART_SetConfig+0x2b0>
 8008026:	e00f      	b.n	8008048 <UART_SetConfig+0x2b8>
 8008028:	2300      	movs	r3, #0
 800802a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800802e:	e013      	b.n	8008058 <UART_SetConfig+0x2c8>
 8008030:	2302      	movs	r3, #2
 8008032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008036:	e00f      	b.n	8008058 <UART_SetConfig+0x2c8>
 8008038:	2304      	movs	r3, #4
 800803a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800803e:	e00b      	b.n	8008058 <UART_SetConfig+0x2c8>
 8008040:	2308      	movs	r3, #8
 8008042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008046:	e007      	b.n	8008058 <UART_SetConfig+0x2c8>
 8008048:	2310      	movs	r3, #16
 800804a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800804e:	bf00      	nop
 8008050:	e002      	b.n	8008058 <UART_SetConfig+0x2c8>
 8008052:	2310      	movs	r3, #16
 8008054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a13      	ldr	r2, [pc, #76]	; (80080ac <UART_SetConfig+0x31c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	f040 80fe 	bne.w	8008260 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008068:	2b08      	cmp	r3, #8
 800806a:	d837      	bhi.n	80080dc <UART_SetConfig+0x34c>
 800806c:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <UART_SetConfig+0x2e4>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	08008099 	.word	0x08008099
 8008078:	080080dd 	.word	0x080080dd
 800807c:	080080a1 	.word	0x080080a1
 8008080:	080080dd 	.word	0x080080dd
 8008084:	080080cd 	.word	0x080080cd
 8008088:	080080dd 	.word	0x080080dd
 800808c:	080080dd 	.word	0x080080dd
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080d5 	.word	0x080080d5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8008098:	f7fe fbc4 	bl	8006824 <HAL_RCC_GetPCLK1Freq>
 800809c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800809e:	e020      	b.n	80080e2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80080a0:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <UART_SetConfig+0x338>)
 80080a2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80080a4:	e01d      	b.n	80080e2 <UART_SetConfig+0x352>
 80080a6:	bf00      	nop
 80080a8:	efff69f3 	.word	0xefff69f3
 80080ac:	40008000 	.word	0x40008000
 80080b0:	40013800 	.word	0x40013800
 80080b4:	40021000 	.word	0x40021000
 80080b8:	40004400 	.word	0x40004400
 80080bc:	40004800 	.word	0x40004800
 80080c0:	40004c00 	.word	0x40004c00
 80080c4:	40005000 	.word	0x40005000
 80080c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80080cc:	f7fe fb14 	bl	80066f8 <HAL_RCC_GetSysClockFreq>
 80080d0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80080d2:	e006      	b.n	80080e2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80080d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80080da:	e002      	b.n	80080e2 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	76fb      	strb	r3, [r7, #27]
        break;
 80080e0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 81b9 	beq.w	800845c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	4413      	add	r3, r2
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d305      	bcc.n	8008106 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	429a      	cmp	r2, r3
 8008104:	d902      	bls.n	800810c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	76fb      	strb	r3, [r7, #27]
 800810a:	e1a7      	b.n	800845c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800810c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008110:	2b08      	cmp	r3, #8
 8008112:	f200 8092 	bhi.w	800823a <UART_SetConfig+0x4aa>
 8008116:	a201      	add	r2, pc, #4	; (adr r2, 800811c <UART_SetConfig+0x38c>)
 8008118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811c:	08008141 	.word	0x08008141
 8008120:	0800823b 	.word	0x0800823b
 8008124:	0800818f 	.word	0x0800818f
 8008128:	0800823b 	.word	0x0800823b
 800812c:	080081c3 	.word	0x080081c3
 8008130:	0800823b 	.word	0x0800823b
 8008134:	0800823b 	.word	0x0800823b
 8008138:	0800823b 	.word	0x0800823b
 800813c:	08008211 	.word	0x08008211
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8008140:	f7fe fb70 	bl	8006824 <HAL_RCC_GetPCLK1Freq>
 8008144:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	4619      	mov	r1, r3
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	f04f 0300 	mov.w	r3, #0
 8008152:	f04f 0400 	mov.w	r4, #0
 8008156:	0214      	lsls	r4, r2, #8
 8008158:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800815c:	020b      	lsls	r3, r1, #8
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6852      	ldr	r2, [r2, #4]
 8008162:	0852      	lsrs	r2, r2, #1
 8008164:	4611      	mov	r1, r2
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	eb13 0b01 	adds.w	fp, r3, r1
 800816e:	eb44 0c02 	adc.w	ip, r4, r2
 8008172:	4658      	mov	r0, fp
 8008174:	4661      	mov	r1, ip
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f04f 0400 	mov.w	r4, #0
 800817e:	461a      	mov	r2, r3
 8008180:	4623      	mov	r3, r4
 8008182:	f7f8 f88d 	bl	80002a0 <__aeabi_uldivmod>
 8008186:	4603      	mov	r3, r0
 8008188:	460c      	mov	r4, r1
 800818a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800818c:	e058      	b.n	8008240 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	085b      	lsrs	r3, r3, #1
 8008194:	f04f 0400 	mov.w	r4, #0
 8008198:	49ae      	ldr	r1, [pc, #696]	; (8008454 <UART_SetConfig+0x6c4>)
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	eb13 0b01 	adds.w	fp, r3, r1
 80081a2:	eb44 0c02 	adc.w	ip, r4, r2
 80081a6:	4658      	mov	r0, fp
 80081a8:	4661      	mov	r1, ip
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f04f 0400 	mov.w	r4, #0
 80081b2:	461a      	mov	r2, r3
 80081b4:	4623      	mov	r3, r4
 80081b6:	f7f8 f873 	bl	80002a0 <__aeabi_uldivmod>
 80081ba:	4603      	mov	r3, r0
 80081bc:	460c      	mov	r4, r1
 80081be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80081c0:	e03e      	b.n	8008240 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80081c2:	f7fe fa99 	bl	80066f8 <HAL_RCC_GetSysClockFreq>
 80081c6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	4619      	mov	r1, r3
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	f04f 0400 	mov.w	r4, #0
 80081d8:	0214      	lsls	r4, r2, #8
 80081da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80081de:	020b      	lsls	r3, r1, #8
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6852      	ldr	r2, [r2, #4]
 80081e4:	0852      	lsrs	r2, r2, #1
 80081e6:	4611      	mov	r1, r2
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	eb13 0b01 	adds.w	fp, r3, r1
 80081f0:	eb44 0c02 	adc.w	ip, r4, r2
 80081f4:	4658      	mov	r0, fp
 80081f6:	4661      	mov	r1, ip
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f04f 0400 	mov.w	r4, #0
 8008200:	461a      	mov	r2, r3
 8008202:	4623      	mov	r3, r4
 8008204:	f7f8 f84c 	bl	80002a0 <__aeabi_uldivmod>
 8008208:	4603      	mov	r3, r0
 800820a:	460c      	mov	r4, r1
 800820c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800820e:	e017      	b.n	8008240 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	085b      	lsrs	r3, r3, #1
 8008216:	f04f 0400 	mov.w	r4, #0
 800821a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800821e:	f144 0100 	adc.w	r1, r4, #0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f04f 0400 	mov.w	r4, #0
 800822a:	461a      	mov	r2, r3
 800822c:	4623      	mov	r3, r4
 800822e:	f7f8 f837 	bl	80002a0 <__aeabi_uldivmod>
 8008232:	4603      	mov	r3, r0
 8008234:	460c      	mov	r4, r1
 8008236:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8008238:	e002      	b.n	8008240 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	76fb      	strb	r3, [r7, #27]
            break;
 800823e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008246:	d308      	bcc.n	800825a <UART_SetConfig+0x4ca>
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800824e:	d204      	bcs.n	800825a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	60da      	str	r2, [r3, #12]
 8008258:	e100      	b.n	800845c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	76fb      	strb	r3, [r7, #27]
 800825e:	e0fd      	b.n	800845c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008268:	f040 8084 	bne.w	8008374 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800826c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008270:	2b08      	cmp	r3, #8
 8008272:	d85f      	bhi.n	8008334 <UART_SetConfig+0x5a4>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <UART_SetConfig+0x4ec>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082c1 	.word	0x080082c1
 8008284:	080082e1 	.word	0x080082e1
 8008288:	08008335 	.word	0x08008335
 800828c:	080082fd 	.word	0x080082fd
 8008290:	08008335 	.word	0x08008335
 8008294:	08008335 	.word	0x08008335
 8008298:	08008335 	.word	0x08008335
 800829c:	0800831d 	.word	0x0800831d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082a0:	f7fe fac0 	bl	8006824 <HAL_RCC_GetPCLK1Freq>
 80082a4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	005a      	lsls	r2, r3, #1
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	085b      	lsrs	r3, r3, #1
 80082b0:	441a      	add	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80082be:	e03c      	b.n	800833a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082c0:	f7fe fac6 	bl	8006850 <HAL_RCC_GetPCLK2Freq>
 80082c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	005a      	lsls	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	085b      	lsrs	r3, r3, #1
 80082d0:	441a      	add	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082da:	b29b      	uxth	r3, r3
 80082dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80082de:	e02c      	b.n	800833a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	085b      	lsrs	r3, r3, #1
 80082e6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80082ea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6852      	ldr	r2, [r2, #4]
 80082f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80082fa:	e01e      	b.n	800833a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082fc:	f7fe f9fc 	bl	80066f8 <HAL_RCC_GetSysClockFreq>
 8008300:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	005a      	lsls	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	085b      	lsrs	r3, r3, #1
 800830c:	441a      	add	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	fbb2 f3f3 	udiv	r3, r2, r3
 8008316:	b29b      	uxth	r3, r3
 8008318:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800831a:	e00e      	b.n	800833a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	085b      	lsrs	r3, r3, #1
 8008322:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	fbb2 f3f3 	udiv	r3, r2, r3
 800832e:	b29b      	uxth	r3, r3
 8008330:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008332:	e002      	b.n	800833a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	76fb      	strb	r3, [r7, #27]
        break;
 8008338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	2b0f      	cmp	r3, #15
 800833e:	d916      	bls.n	800836e <UART_SetConfig+0x5de>
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008346:	d212      	bcs.n	800836e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	b29b      	uxth	r3, r3
 800834c:	f023 030f 	bic.w	r3, r3, #15
 8008350:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	085b      	lsrs	r3, r3, #1
 8008356:	b29b      	uxth	r3, r3
 8008358:	f003 0307 	and.w	r3, r3, #7
 800835c:	b29a      	uxth	r2, r3
 800835e:	89fb      	ldrh	r3, [r7, #14]
 8008360:	4313      	orrs	r3, r2
 8008362:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	89fa      	ldrh	r2, [r7, #14]
 800836a:	60da      	str	r2, [r3, #12]
 800836c:	e076      	b.n	800845c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	76fb      	strb	r3, [r7, #27]
 8008372:	e073      	b.n	800845c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8008374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008378:	2b08      	cmp	r3, #8
 800837a:	d85c      	bhi.n	8008436 <UART_SetConfig+0x6a6>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <UART_SetConfig+0x5f4>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	080083a9 	.word	0x080083a9
 8008388:	080083c7 	.word	0x080083c7
 800838c:	080083e5 	.word	0x080083e5
 8008390:	08008437 	.word	0x08008437
 8008394:	08008401 	.word	0x08008401
 8008398:	08008437 	.word	0x08008437
 800839c:	08008437 	.word	0x08008437
 80083a0:	08008437 	.word	0x08008437
 80083a4:	0800841f 	.word	0x0800841f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a8:	f7fe fa3c 	bl	8006824 <HAL_RCC_GetPCLK1Freq>
 80083ac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	085a      	lsrs	r2, r3, #1
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	441a      	add	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80083c4:	e03a      	b.n	800843c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083c6:	f7fe fa43 	bl	8006850 <HAL_RCC_GetPCLK2Freq>
 80083ca:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	085a      	lsrs	r2, r3, #1
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	441a      	add	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	fbb2 f3f3 	udiv	r3, r2, r3
 80083de:	b29b      	uxth	r3, r3
 80083e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80083e2:	e02b      	b.n	800843c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	085b      	lsrs	r3, r3, #1
 80083ea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80083ee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6852      	ldr	r2, [r2, #4]
 80083f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80083fe:	e01d      	b.n	800843c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008400:	f7fe f97a 	bl	80066f8 <HAL_RCC_GetSysClockFreq>
 8008404:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	085a      	lsrs	r2, r3, #1
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	441a      	add	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	fbb2 f3f3 	udiv	r3, r2, r3
 8008418:	b29b      	uxth	r3, r3
 800841a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800841c:	e00e      	b.n	800843c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	085b      	lsrs	r3, r3, #1
 8008424:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008430:	b29b      	uxth	r3, r3
 8008432:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8008434:	e002      	b.n	800843c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	76fb      	strb	r3, [r7, #27]
        break;
 800843a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	2b0f      	cmp	r3, #15
 8008440:	d90a      	bls.n	8008458 <UART_SetConfig+0x6c8>
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008448:	d206      	bcs.n	8008458 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69fa      	ldr	r2, [r7, #28]
 8008450:	60da      	str	r2, [r3, #12]
 8008452:	e003      	b.n	800845c <UART_SetConfig+0x6cc>
 8008454:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008468:	7efb      	ldrb	r3, [r7, #27]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3728      	adds	r7, #40	; 0x28
 800846e:	46bd      	mov	sp, r7
 8008470:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	f003 0308 	and.w	r3, r3, #8
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01a      	beq.n	800858a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008572:	d10a      	bne.n	800858a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	605a      	str	r2, [r3, #4]
  }
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af02      	add	r7, sp, #8
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80085c6:	f7fb fbc9 	bl	8003d5c <HAL_GetTick>
 80085ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0308 	and.w	r3, r3, #8
 80085d6:	2b08      	cmp	r3, #8
 80085d8:	d10e      	bne.n	80085f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f82a 	bl	8008642 <UART_WaitOnFlagUntilTimeout>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e020      	b.n	800863a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b04      	cmp	r3, #4
 8008604:	d10e      	bne.n	8008624 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008606:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f814 	bl	8008642 <UART_WaitOnFlagUntilTimeout>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e00a      	b.n	800863a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	4613      	mov	r3, r2
 8008650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008652:	e05d      	b.n	8008710 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	d059      	beq.n	8008710 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800865c:	f7fb fb7e 	bl	8003d5c <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <UART_WaitOnFlagUntilTimeout+0x30>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d11b      	bne.n	80086aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008680:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 0201 	bic.w	r2, r2, #1
 8008690:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2220      	movs	r2, #32
 8008696:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2220      	movs	r2, #32
 800869c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e042      	b.n	8008730 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d02b      	beq.n	8008710 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c6:	d123      	bne.n	8008710 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086d0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0201 	bic.w	r2, r2, #1
 80086f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2220      	movs	r2, #32
 80086f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2220      	movs	r2, #32
 8008702:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e00f      	b.n	8008730 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69da      	ldr	r2, [r3, #28]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	4013      	ands	r3, r2
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	429a      	cmp	r2, r3
 800871e:	bf0c      	ite	eq
 8008720:	2301      	moveq	r3, #1
 8008722:	2300      	movne	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	461a      	mov	r2, r3
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	429a      	cmp	r2, r3
 800872c:	d092      	beq.n	8008654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800874e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2220      	movs	r2, #32
 8008764:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008784:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f7ff faf0 	bl	8007d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b0:	2b21      	cmp	r3, #33	; 0x21
 80087b2:	d12b      	bne.n	800880c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d110      	bne.n	80087e2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087ce:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087de:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80087e0:	e014      	b.n	800880c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e6:	781a      	ldrb	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	b292      	uxth	r2, r2
 80087ee:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008824:	2b21      	cmp	r3, #33	; 0x21
 8008826:	d12f      	bne.n	8008888 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800882e:	b29b      	uxth	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d110      	bne.n	8008856 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008842:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008852:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008854:	e018      	b.n	8008888 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800885a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	881a      	ldrh	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008868:	b292      	uxth	r2, r2
 800886a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008870:	1c9a      	adds	r2, r3, #2
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088aa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2220      	movs	r2, #32
 80088b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7fa ff8d 	bl	80037d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088be:	bf00      	nop
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088d4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088da:	2b22      	cmp	r3, #34	; 0x22
 80088dc:	d13a      	bne.n	8008954 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80088e4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80088e6:	89bb      	ldrh	r3, [r7, #12]
 80088e8:	b2d9      	uxtb	r1, r3
 80088ea:	89fb      	ldrh	r3, [r7, #14]
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f2:	400a      	ands	r2, r1
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008908:	b29b      	uxth	r3, r3
 800890a:	3b01      	subs	r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d123      	bne.n	8008968 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800892e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689a      	ldr	r2, [r3, #8]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0201 	bic.w	r2, r2, #1
 800893e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2220      	movs	r2, #32
 8008944:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fa fca3 	bl	8003298 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008952:	e009      	b.n	8008968 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	8b1b      	ldrh	r3, [r3, #24]
 800895a:	b29a      	uxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f042 0208 	orr.w	r2, r2, #8
 8008964:	b292      	uxth	r2, r2
 8008966:	831a      	strh	r2, [r3, #24]
}
 8008968:	bf00      	nop
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800897e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008984:	2b22      	cmp	r3, #34	; 0x22
 8008986:	d13a      	bne.n	80089fe <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800898e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008994:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008996:	89ba      	ldrh	r2, [r7, #12]
 8008998:	89fb      	ldrh	r3, [r7, #14]
 800899a:	4013      	ands	r3, r2
 800899c:	b29a      	uxth	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	1c9a      	adds	r2, r3, #2
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d123      	bne.n	8008a12 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0201 	bic.w	r2, r2, #1
 80089e8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2220      	movs	r2, #32
 80089ee:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7fa fc4e 	bl	8003298 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089fc:	e009      	b.n	8008a12 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	8b1b      	ldrh	r3, [r3, #24]
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0208 	orr.w	r2, r2, #8
 8008a0e:	b292      	uxth	r2, r2
 8008a10:	831a      	strh	r2, [r3, #24]
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a2e:	b084      	sub	sp, #16
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	f107 001c 	add.w	r0, r7, #28
 8008a3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d122      	bne.n	8008a8c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d105      	bne.n	8008a80 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f937 	bl	8008cf4 <USB_CoreReset>
 8008a86:	4603      	mov	r3, r0
 8008a88:	73fb      	strb	r3, [r7, #15]
 8008a8a:	e01a      	b.n	8008ac2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f92b 	bl	8008cf4 <USB_CoreReset>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ab4:	e005      	b.n	8008ac2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ace:	b004      	add	sp, #16
 8008ad0:	4770      	bx	lr

08008ad2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f043 0201 	orr.w	r2, r3, #1
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f023 0201 	bic.w	r2, r3, #1
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b2e:	78fb      	ldrb	r3, [r7, #3]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d106      	bne.n	8008b42 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60da      	str	r2, [r3, #12]
 8008b40:	e00b      	b.n	8008b5a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60da      	str	r2, [r3, #12]
 8008b54:	e001      	b.n	8008b5a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e003      	b.n	8008b62 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008b5a:	2032      	movs	r0, #50	; 0x32
 8008b5c:	f7fb f90a 	bl	8003d74 <HAL_Delay>

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	019b      	lsls	r3, r3, #6
 8008b7e:	f043 0220 	orr.w	r2, r3, #32
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4a09      	ldr	r2, [pc, #36]	; (8008bb4 <USB_FlushTxFifo+0x48>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d901      	bls.n	8008b98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e006      	b.n	8008ba6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d0f0      	beq.n	8008b86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	00030d40 	.word	0x00030d40

08008bb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2210      	movs	r2, #16
 8008bc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <USB_FlushRxFifo+0x40>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d901      	bls.n	8008bdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e006      	b.n	8008bea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b10      	cmp	r3, #16
 8008be6:	d0f0      	beq.n	8008bca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	00030d40 	.word	0x00030d40

08008bfc <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b089      	sub	sp, #36	; 0x24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4611      	mov	r1, r2
 8008c08:	461a      	mov	r2, r3
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	71fb      	strb	r3, [r7, #7]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008c1a:	88bb      	ldrh	r3, [r7, #4]
 8008c1c:	3303      	adds	r3, #3
 8008c1e:	089b      	lsrs	r3, r3, #2
 8008c20:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008c22:	2300      	movs	r3, #0
 8008c24:	61bb      	str	r3, [r7, #24]
 8008c26:	e00f      	b.n	8008c48 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c28:	79fb      	ldrb	r3, [r7, #7]
 8008c2a:	031a      	lsls	r2, r3, #12
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c34:	461a      	mov	r2, r3
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	3301      	adds	r3, #1
 8008c46:	61bb      	str	r3, [r7, #24]
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d3eb      	bcc.n	8008c28 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3724      	adds	r7, #36	; 0x24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b089      	sub	sp, #36	; 0x24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	3303      	adds	r3, #3
 8008c78:	089b      	lsrs	r3, r3, #2
 8008c7a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61bb      	str	r3, [r7, #24]
 8008c80:	e00b      	b.n	8008c9a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	3304      	adds	r3, #4
 8008c92:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	3301      	adds	r3, #1
 8008c98:	61bb      	str	r3, [r7, #24]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d3ef      	bcc.n	8008c82 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008ca2:	69fb      	ldr	r3, [r7, #28]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3724      	adds	r7, #36	; 0x24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	f003 0301 	and.w	r3, r3, #1
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3301      	adds	r3, #1
 8008d04:	60fb      	str	r3, [r7, #12]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4a13      	ldr	r2, [pc, #76]	; (8008d58 <USB_CoreReset+0x64>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d901      	bls.n	8008d12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e01b      	b.n	8008d4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	daf2      	bge.n	8008d00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f043 0201 	orr.w	r2, r3, #1
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4a09      	ldr	r2, [pc, #36]	; (8008d58 <USB_CoreReset+0x64>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d901      	bls.n	8008d3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e006      	b.n	8008d4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d0f0      	beq.n	8008d2a <USB_CoreReset+0x36>

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	00030d40 	.word	0x00030d40

08008d5c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	f107 001c 	add.w	r0, r7, #28
 8008d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008da4:	f023 0304 	bic.w	r3, r3, #4
 8008da8:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008daa:	2110      	movs	r1, #16
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff fedd 	bl	8008b6c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff ff00 	bl	8008bb8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	e015      	b.n	8008dea <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dde:	461a      	mov	r2, r3
 8008de0:	2300      	movs	r3, #0
 8008de2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d3e5      	bcc.n	8008dbe <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008df2:	2101      	movs	r1, #1
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f893 	bl	8008f20 <USB_DriveVbus>

  HAL_Delay(200U);
 8008dfa:	20c8      	movs	r0, #200	; 0xc8
 8008dfc:	f7fa ffba 	bl	8003d74 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0c:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2280      	movs	r2, #128	; 0x80
 8008e12:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a0d      	ldr	r2, [pc, #52]	; (8008e4c <USB_HostInit+0xf0>)
 8008e18:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a0c      	ldr	r2, [pc, #48]	; (8008e50 <USB_HostInit+0xf4>)
 8008e1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	f043 0210 	orr.w	r2, r3, #16
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699a      	ldr	r2, [r3, #24]
 8008e32:	4b08      	ldr	r3, [pc, #32]	; (8008e54 <USB_HostInit+0xf8>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e46:	b004      	add	sp, #16
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	00600080 	.word	0x00600080
 8008e50:	004000e0 	.word	0x004000e0
 8008e54:	a3200008 	.word	0xa3200008

08008e58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e76:	f023 0303 	bic.w	r3, r3, #3
 8008e7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	f003 0303 	and.w	r3, r3, #3
 8008e8a:	68f9      	ldr	r1, [r7, #12]
 8008e8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008e90:	4313      	orrs	r3, r2
 8008e92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d107      	bne.n	8008eaa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008ea6:	6053      	str	r3, [r2, #4]
 8008ea8:	e009      	b.n	8008ebe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d106      	bne.n	8008ebe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f241 7370 	movw	r3, #6000	; 0x1770
 8008ebc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008eec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008efa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008efc:	2064      	movs	r0, #100	; 0x64
 8008efe:	f7fa ff39 	bl	8003d74 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008f10:	200a      	movs	r0, #10
 8008f12:	f7fa ff2f 	bl	8003d74 <HAL_Delay>

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d109      	bne.n	8008f64 <USB_DriveVbus+0x44>
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d106      	bne.n	8008f64 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f62:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f6e:	d109      	bne.n	8008f84 <USB_DriveVbus+0x64>
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d106      	bne.n	8008f84 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f82:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b085      	sub	sp, #20
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	0c5b      	lsrs	r3, r3, #17
 8008fb0:	f003 0303 	and.w	r3, r3, #3
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	b29b      	uxth	r3, r3
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	4608      	mov	r0, r1
 8008fee:	4611      	mov	r1, r2
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	70fb      	strb	r3, [r7, #3]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	70bb      	strb	r3, [r7, #2]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009012:	461a      	mov	r2, r3
 8009014:	f04f 33ff 	mov.w	r3, #4294967295
 8009018:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800901a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800901e:	2b03      	cmp	r3, #3
 8009020:	d867      	bhi.n	80090f2 <USB_HC_Init+0x10e>
 8009022:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <USB_HC_Init+0x44>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009039 	.word	0x08009039
 800902c:	080090b5 	.word	0x080090b5
 8009030:	08009039 	.word	0x08009039
 8009034:	08009077 	.word	0x08009077
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4413      	add	r3, r2
 8009040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009044:	461a      	mov	r2, r3
 8009046:	f240 439d 	movw	r3, #1181	; 0x49d
 800904a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800904c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009050:	2b00      	cmp	r3, #0
 8009052:	da51      	bge.n	80090f8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4413      	add	r3, r2
 800905c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	0151      	lsls	r1, r2, #5
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	440a      	add	r2, r1
 800906a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800906e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009072:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009074:	e040      	b.n	80090f8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4413      	add	r3, r2
 800907e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009082:	461a      	mov	r2, r3
 8009084:	f240 639d 	movw	r3, #1693	; 0x69d
 8009088:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800908a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800908e:	2b00      	cmp	r3, #0
 8009090:	da34      	bge.n	80090fc <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	4413      	add	r3, r2
 800909a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	0151      	lsls	r1, r2, #5
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	440a      	add	r2, r1
 80090a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090b0:	60d3      	str	r3, [r2, #12]
      }

      break;
 80090b2:	e023      	b.n	80090fc <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c0:	461a      	mov	r2, r3
 80090c2:	f240 2325 	movw	r3, #549	; 0x225
 80090c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80090c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da17      	bge.n	8009100 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	0151      	lsls	r1, r2, #5
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	440a      	add	r2, r1
 80090e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090ea:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80090ee:	60d3      	str	r3, [r2, #12]
      }
      break;
 80090f0:	e006      	b.n	8009100 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	75fb      	strb	r3, [r7, #23]
      break;
 80090f6:	e004      	b.n	8009102 <USB_HC_Init+0x11e>
      break;
 80090f8:	bf00      	nop
 80090fa:	e002      	b.n	8009102 <USB_HC_Init+0x11e>
      break;
 80090fc:	bf00      	nop
 80090fe:	e000      	b.n	8009102 <USB_HC_Init+0x11e>
      break;
 8009100:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	f003 030f 	and.w	r3, r3, #15
 8009110:	2101      	movs	r1, #1
 8009112:	fa01 f303 	lsl.w	r3, r1, r3
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800911c:	4313      	orrs	r3, r2
 800911e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800912c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009130:	2b00      	cmp	r3, #0
 8009132:	da03      	bge.n	800913c <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	e001      	b.n	8009140 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009140:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d103      	bne.n	8009150 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800914c:	60fb      	str	r3, [r7, #12]
 800914e:	e001      	b.n	8009154 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009154:	787b      	ldrb	r3, [r7, #1]
 8009156:	059b      	lsls	r3, r3, #22
 8009158:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800915c:	78bb      	ldrb	r3, [r7, #2]
 800915e:	02db      	lsls	r3, r3, #11
 8009160:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009164:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009166:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800916a:	049b      	lsls	r3, r3, #18
 800916c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009170:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009172:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009174:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009178:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800917e:	78fb      	ldrb	r3, [r7, #3]
 8009180:	0159      	lsls	r1, r3, #5
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	440b      	add	r3, r1
 8009186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009190:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009192:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009196:	2b03      	cmp	r3, #3
 8009198:	d10f      	bne.n	80091ba <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	78fa      	ldrb	r2, [r7, #3]
 80091aa:	0151      	lsls	r1, r2, #5
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	440a      	add	r2, r1
 80091b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	371c      	adds	r7, #28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	785b      	ldrb	r3, [r3, #1]
 80091da:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80091dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091e0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d018      	beq.n	800921c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	8912      	ldrh	r2, [r2, #8]
 80091f2:	4413      	add	r3, r2
 80091f4:	3b01      	subs	r3, #1
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	8912      	ldrh	r2, [r2, #8]
 80091fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80091fe:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8009200:	8bfa      	ldrh	r2, [r7, #30]
 8009202:	8a7b      	ldrh	r3, [r7, #18]
 8009204:	429a      	cmp	r2, r3
 8009206:	d90b      	bls.n	8009220 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8009208:	8a7b      	ldrh	r3, [r7, #18]
 800920a:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800920c:	8bfb      	ldrh	r3, [r7, #30]
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	8912      	ldrh	r2, [r2, #8]
 8009212:	fb02 f203 	mul.w	r2, r2, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	611a      	str	r2, [r3, #16]
 800921a:	e001      	b.n	8009220 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800921c:	2301      	movs	r3, #1
 800921e:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	78db      	ldrb	r3, [r3, #3]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d006      	beq.n	8009236 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009228:	8bfb      	ldrh	r3, [r7, #30]
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	8912      	ldrh	r2, [r2, #8]
 800922e:	fb02 f203 	mul.w	r2, r2, r3
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800923e:	8bfb      	ldrh	r3, [r7, #30]
 8009240:	04d9      	lsls	r1, r3, #19
 8009242:	4b5f      	ldr	r3, [pc, #380]	; (80093c0 <USB_HC_StartXfer+0x1f8>)
 8009244:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009246:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	7a9b      	ldrb	r3, [r3, #10]
 800924c:	075b      	lsls	r3, r3, #29
 800924e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009252:	6979      	ldr	r1, [r7, #20]
 8009254:	0148      	lsls	r0, r1, #5
 8009256:	69b9      	ldr	r1, [r7, #24]
 8009258:	4401      	add	r1, r0
 800925a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800925e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009260:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	4413      	add	r3, r2
 8009282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	0151      	lsls	r1, r2, #5
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	440a      	add	r2, r1
 8009290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009294:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009298:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	7c7b      	ldrb	r3, [r7, #17]
 80092aa:	075b      	lsls	r3, r3, #29
 80092ac:	6979      	ldr	r1, [r7, #20]
 80092ae:	0148      	lsls	r0, r1, #5
 80092b0:	69b9      	ldr	r1, [r7, #24]
 80092b2:	4401      	add	r1, r0
 80092b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80092b8:	4313      	orrs	r3, r2
 80092ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a3e      	ldr	r2, [pc, #248]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 80092cc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092ce:	4b3d      	ldr	r3, [pc, #244]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092d6:	4a3b      	ldr	r2, [pc, #236]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 80092d8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	78db      	ldrb	r3, [r3, #3]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d006      	beq.n	80092f0 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80092e2:	4b38      	ldr	r3, [pc, #224]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ea:	4a36      	ldr	r2, [pc, #216]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	e005      	b.n	80092fc <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80092f0:	4b34      	ldr	r3, [pc, #208]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092f8:	4a32      	ldr	r2, [pc, #200]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 80092fa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092fc:	4b31      	ldr	r3, [pc, #196]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009304:	4a2f      	ldr	r2, [pc, #188]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 8009306:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	4413      	add	r3, r2
 8009310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009314:	461a      	mov	r2, r3
 8009316:	4b2b      	ldr	r3, [pc, #172]	; (80093c4 <USB_HC_StartXfer+0x1fc>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	78db      	ldrb	r3, [r3, #3]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d148      	bne.n	80093b6 <USB_HC_StartXfer+0x1ee>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d044      	beq.n	80093b6 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	79db      	ldrb	r3, [r3, #7]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d831      	bhi.n	8009398 <USB_HC_StartXfer+0x1d0>
 8009334:	a201      	add	r2, pc, #4	; (adr r2, 800933c <USB_HC_StartXfer+0x174>)
 8009336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933a:	bf00      	nop
 800933c:	0800934d 	.word	0x0800934d
 8009340:	08009371 	.word	0x08009371
 8009344:	0800934d 	.word	0x0800934d
 8009348:	08009371 	.word	0x08009371
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	3303      	adds	r3, #3
 8009352:	089b      	lsrs	r3, r3, #2
 8009354:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009356:	89fa      	ldrh	r2, [r7, #14]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	b29b      	uxth	r3, r3
 800935e:	429a      	cmp	r2, r3
 8009360:	d91c      	bls.n	800939c <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	f043 0220 	orr.w	r2, r3, #32
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	619a      	str	r2, [r3, #24]
          }
          break;
 800936e:	e015      	b.n	800939c <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	3303      	adds	r3, #3
 8009376:	089b      	lsrs	r3, r3, #2
 8009378:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800937a:	89fa      	ldrh	r2, [r7, #14]
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	b29b      	uxth	r3, r3
 8009386:	429a      	cmp	r2, r3
 8009388:	d90a      	bls.n	80093a0 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	619a      	str	r2, [r3, #24]
          }
          break;
 8009396:	e003      	b.n	80093a0 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 8009398:	bf00      	nop
 800939a:	e002      	b.n	80093a2 <USB_HC_StartXfer+0x1da>
          break;
 800939c:	bf00      	nop
 800939e:	e000      	b.n	80093a2 <USB_HC_StartXfer+0x1da>
          break;
 80093a0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68d9      	ldr	r1, [r3, #12]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	785a      	ldrb	r2, [r3, #1]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff fc23 	bl	8008bfc <USB_WritePacket>
    }

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	1ff80000 	.word	0x1ff80000
 80093c4:	20001dc4 	.word	0x20001dc4

080093c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	b29b      	uxth	r3, r3
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b087      	sub	sp, #28
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	4413      	add	r3, r2
 800940a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	0c9b      	lsrs	r3, r3, #18
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <USB_HC_Halt+0x3a>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b02      	cmp	r3, #2
 8009422:	d16c      	bne.n	80094fe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	4413      	add	r3, r2
 800942c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	0151      	lsls	r1, r2, #5
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	440a      	add	r2, r1
 800943a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800943e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009442:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d143      	bne.n	80094d8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	4413      	add	r3, r2
 8009458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	440a      	add	r2, r1
 8009466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800946e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	4413      	add	r3, r2
 8009478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	0151      	lsls	r1, r2, #5
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	440a      	add	r2, r1
 8009486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800948a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800948e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	4413      	add	r3, r2
 8009498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	0151      	lsls	r1, r2, #5
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	440a      	add	r2, r1
 80094a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	3301      	adds	r3, #1
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094bc:	d81d      	bhi.n	80094fa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	015a      	lsls	r2, r3, #5
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	4413      	add	r3, r2
 80094c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094d4:	d0ec      	beq.n	80094b0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80094d6:	e080      	b.n	80095da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	0151      	lsls	r1, r2, #5
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	440a      	add	r2, r1
 80094ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094f6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80094f8:	e06f      	b.n	80095da <USB_HC_Halt+0x1f0>
          break;
 80094fa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80094fc:	e06d      	b.n	80095da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	4413      	add	r3, r2
 8009506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	0151      	lsls	r1, r2, #5
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	440a      	add	r2, r1
 8009514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800951c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d143      	bne.n	80095b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	4413      	add	r3, r2
 8009536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	0151      	lsls	r1, r2, #5
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	440a      	add	r2, r1
 8009544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800954c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	4413      	add	r3, r2
 8009556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	440a      	add	r2, r1
 8009564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800956c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	4413      	add	r3, r2
 8009576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	0151      	lsls	r1, r2, #5
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	440a      	add	r2, r1
 8009584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009588:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800958c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	3301      	adds	r3, #1
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800959a:	d81d      	bhi.n	80095d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095b2:	d0ec      	beq.n	800958e <USB_HC_Halt+0x1a4>
 80095b4:	e011      	b.n	80095da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	0151      	lsls	r1, r2, #5
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	440a      	add	r2, r1
 80095cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	e000      	b.n	80095da <USB_HC_Halt+0x1f0>
          break;
 80095d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff fa7b 	bl	8008af4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80095fe:	2110      	movs	r1, #16
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff fab3 	bl	8008b6c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7ff fad6 	bl	8008bb8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800960c:	2300      	movs	r3, #0
 800960e:	613b      	str	r3, [r7, #16]
 8009610:	e01f      	b.n	8009652 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4413      	add	r3, r2
 800961a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009628:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009630:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009638:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009646:	461a      	mov	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	3301      	adds	r3, #1
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b0f      	cmp	r3, #15
 8009656:	d9dc      	bls.n	8009612 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009658:	2300      	movs	r3, #0
 800965a:	613b      	str	r3, [r7, #16]
 800965c:	e034      	b.n	80096c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	4413      	add	r3, r2
 8009666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009674:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800967c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009684:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4413      	add	r3, r2
 800968e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009692:	461a      	mov	r2, r3
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	3301      	adds	r3, #1
 800969c:	617b      	str	r3, [r7, #20]
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096a4:	d80c      	bhi.n	80096c0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096bc:	d0ec      	beq.n	8009698 <USB_StopHost+0xb0>
 80096be:	e000      	b.n	80096c2 <USB_StopHost+0xda>
        break;
 80096c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	3301      	adds	r3, #1
 80096c6:	613b      	str	r3, [r7, #16]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2b0f      	cmp	r3, #15
 80096cc:	d9c7      	bls.n	800965e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096d4:	461a      	mov	r2, r3
 80096d6:	f04f 33ff 	mov.w	r3, #4294967295
 80096da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f04f 32ff 	mov.w	r2, #4294967295
 80096e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff f9f4 	bl	8008ad2 <USB_EnableGlobalInt>

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80096f8:	4904      	ldr	r1, [pc, #16]	; (800970c <MX_FATFS_Init+0x18>)
 80096fa:	4805      	ldr	r0, [pc, #20]	; (8009710 <MX_FATFS_Init+0x1c>)
 80096fc:	f005 fa6c 	bl	800ebd8 <FATFS_LinkDriver>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	4b03      	ldr	r3, [pc, #12]	; (8009714 <MX_FATFS_Init+0x20>)
 8009706:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009708:	bf00      	nop
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20002ae8 	.word	0x20002ae8
 8009710:	08012884 	.word	0x08012884
 8009714:	20002f4c 	.word	0x20002f4c

08009718 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800971c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800971e:	4618      	mov	r0, r3
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	4619      	mov	r1, r3
 8009752:	4808      	ldr	r0, [pc, #32]	; (8009774 <USBH_status+0x34>)
 8009754:	f000 fe11 	bl	800a37a <USBH_MSC_UnitIsReady>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <USBH_status+0x24>
  {
    res = RES_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
 8009762:	e001      	b.n	8009768 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009768:	7bfb      	ldrb	r3, [r7, #15]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20002f50 	.word	0x20002f50

08009778 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b094      	sub	sp, #80	; 0x50
 800977c:	af02      	add	r7, sp, #8
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	607a      	str	r2, [r7, #4]
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	4603      	mov	r3, r0
 8009786:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800978e:	7bf9      	ldrb	r1, [r7, #15]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	4812      	ldr	r0, [pc, #72]	; (80097e4 <USBH_read+0x6c>)
 800979a:	f000 fe38 	bl	800a40e <USBH_MSC_Read>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d103      	bne.n	80097ac <USBH_read+0x34>
  {
    res = RES_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80097aa:	e015      	b.n	80097d8 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80097ac:	f107 0210 	add.w	r2, r7, #16
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	4619      	mov	r1, r3
 80097b4:	480b      	ldr	r0, [pc, #44]	; (80097e4 <USBH_read+0x6c>)
 80097b6:	f000 fe06 	bl	800a3c6 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80097ba:	7f7b      	ldrb	r3, [r7, #29]
 80097bc:	2b28      	cmp	r3, #40	; 0x28
 80097be:	d003      	beq.n	80097c8 <USBH_read+0x50>
 80097c0:	2b3a      	cmp	r3, #58	; 0x3a
 80097c2:	d001      	beq.n	80097c8 <USBH_read+0x50>
 80097c4:	2b04      	cmp	r3, #4
 80097c6:	d103      	bne.n	80097d0 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80097c8:	2303      	movs	r3, #3
 80097ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 80097ce:	e003      	b.n	80097d8 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80097d6:	bf00      	nop
    }
  }

  return res;
 80097d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3748      	adds	r7, #72	; 0x48
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20002f50 	.word	0x20002f50

080097e8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b094      	sub	sp, #80	; 0x50
 80097ec:	af02      	add	r7, sp, #8
 80097ee:	60b9      	str	r1, [r7, #8]
 80097f0:	607a      	str	r2, [r7, #4]
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80097fe:	7bf9      	ldrb	r1, [r7, #15]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	4817      	ldr	r0, [pc, #92]	; (8009868 <USBH_write+0x80>)
 800980a:	f000 fe69 	bl	800a4e0 <USBH_MSC_Write>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d103      	bne.n	800981c <USBH_write+0x34>
  {
    res = RES_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800981a:	e01f      	b.n	800985c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800981c:	f107 0210 	add.w	r2, r7, #16
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	4619      	mov	r1, r3
 8009824:	4810      	ldr	r0, [pc, #64]	; (8009868 <USBH_write+0x80>)
 8009826:	f000 fdce 	bl	800a3c6 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800982a:	7f7b      	ldrb	r3, [r7, #29]
 800982c:	2b27      	cmp	r3, #39	; 0x27
 800982e:	d009      	beq.n	8009844 <USBH_write+0x5c>
 8009830:	2b27      	cmp	r3, #39	; 0x27
 8009832:	dc02      	bgt.n	800983a <USBH_write+0x52>
 8009834:	2b04      	cmp	r3, #4
 8009836:	d009      	beq.n	800984c <USBH_write+0x64>
 8009838:	e00c      	b.n	8009854 <USBH_write+0x6c>
 800983a:	2b28      	cmp	r3, #40	; 0x28
 800983c:	d006      	beq.n	800984c <USBH_write+0x64>
 800983e:	2b3a      	cmp	r3, #58	; 0x3a
 8009840:	d004      	beq.n	800984c <USBH_write+0x64>
 8009842:	e007      	b.n	8009854 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009844:	2302      	movs	r3, #2
 8009846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800984a:	e007      	b.n	800985c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800984c:	2303      	movs	r3, #3
 800984e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009852:	e003      	b.n	800985c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800985a:	bf00      	nop
    }
  }

  return res;
 800985c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009860:	4618      	mov	r0, r3
 8009862:	3748      	adds	r7, #72	; 0x48
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20002f50 	.word	0x20002f50

0800986c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b090      	sub	sp, #64	; 0x40
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	603a      	str	r2, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
 8009878:	460b      	mov	r3, r1
 800987a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009882:	79bb      	ldrb	r3, [r7, #6]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d852      	bhi.n	800992e <USBH_ioctl+0xc2>
 8009888:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <USBH_ioctl+0x24>)
 800988a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988e:	bf00      	nop
 8009890:	080098a1 	.word	0x080098a1
 8009894:	080098a9 	.word	0x080098a9
 8009898:	080098d3 	.word	0x080098d3
 800989c:	080098ff 	.word	0x080098ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80098a6:	e045      	b.n	8009934 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80098a8:	f107 0208 	add.w	r2, r7, #8
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	4619      	mov	r1, r3
 80098b0:	4823      	ldr	r0, [pc, #140]	; (8009940 <USBH_ioctl+0xd4>)
 80098b2:	f000 fd88 	bl	800a3c6 <USBH_MSC_GetLUNInfo>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d106      	bne.n	80098ca <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80098c8:	e034      	b.n	8009934 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80098d0:	e030      	b.n	8009934 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80098d2:	f107 0208 	add.w	r2, r7, #8
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	4619      	mov	r1, r3
 80098da:	4819      	ldr	r0, [pc, #100]	; (8009940 <USBH_ioctl+0xd4>)
 80098dc:	f000 fd73 	bl	800a3c6 <USBH_MSC_GetLUNInfo>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d107      	bne.n	80098f6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80098e6:	8a3b      	ldrh	r3, [r7, #16]
 80098e8:	461a      	mov	r2, r3
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80098f4:	e01e      	b.n	8009934 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80098fc:	e01a      	b.n	8009934 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80098fe:	f107 0208 	add.w	r2, r7, #8
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	4619      	mov	r1, r3
 8009906:	480e      	ldr	r0, [pc, #56]	; (8009940 <USBH_ioctl+0xd4>)
 8009908:	f000 fd5d 	bl	800a3c6 <USBH_MSC_GetLUNInfo>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d109      	bne.n	8009926 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009912:	8a3b      	ldrh	r3, [r7, #16]
 8009914:	0a5b      	lsrs	r3, r3, #9
 8009916:	b29b      	uxth	r3, r3
 8009918:	461a      	mov	r2, r3
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009924:	e006      	b.n	8009934 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800992c:	e002      	b.n	8009934 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800992e:	2304      	movs	r3, #4
 8009930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009934:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009938:	4618      	mov	r0, r3
 800993a:	3740      	adds	r7, #64	; 0x40
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20002f50 	.word	0x20002f50

08009944 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009944:	b590      	push	{r4, r7, lr}
 8009946:	b089      	sub	sp, #36	; 0x24
 8009948:	af04      	add	r7, sp, #16
 800994a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009952:	7919      	ldrb	r1, [r3, #4]
 8009954:	2350      	movs	r3, #80	; 0x50
 8009956:	2206      	movs	r2, #6
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f001 fc47 	bl	800b1ec <USBH_FindInterface>
 800995e:	4603      	mov	r3, r0
 8009960:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	2bff      	cmp	r3, #255	; 0xff
 8009966:	d002      	beq.n	800996e <USBH_MSC_InterfaceInit+0x2a>
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d901      	bls.n	8009972 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800996e:	2302      	movs	r3, #2
 8009970:	e0ef      	b.n	8009b52 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 fc1c 	bl	800b1b4 <USBH_SelectInterface>
 800997c:	4603      	mov	r3, r0
 800997e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009986:	2302      	movs	r3, #2
 8009988:	e0e3      	b.n	8009b52 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8009990:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009994:	f006 ffac 	bl	80108f0 <malloc>
 8009998:	4603      	mov	r3, r0
 800999a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80099ac:	2302      	movs	r3, #2
 80099ae:	e0d0      	b.n	8009b52 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80099b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099b4:	2100      	movs	r1, #0
 80099b6:	68b8      	ldr	r0, [r7, #8]
 80099b8:	f006 ffc4 	bl	8010944 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	211a      	movs	r1, #26
 80099c2:	fb01 f303 	mul.w	r3, r1, r3
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	b25b      	sxtb	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	da16      	bge.n	8009a02 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	211a      	movs	r1, #26
 80099da:	fb01 f303 	mul.w	r3, r1, r3
 80099de:	4413      	add	r3, r2
 80099e0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80099e4:	781a      	ldrb	r2, [r3, #0]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	211a      	movs	r1, #26
 80099f0:	fb01 f303 	mul.w	r3, r1, r3
 80099f4:	4413      	add	r3, r2
 80099f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80099fa:	881a      	ldrh	r2, [r3, #0]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	815a      	strh	r2, [r3, #10]
 8009a00:	e015      	b.n	8009a2e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	211a      	movs	r1, #26
 8009a08:	fb01 f303 	mul.w	r3, r1, r3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8009a12:	781a      	ldrb	r2, [r3, #0]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	211a      	movs	r1, #26
 8009a1e:	fb01 f303 	mul.w	r3, r1, r3
 8009a22:	4413      	add	r3, r2
 8009a24:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a28:	881a      	ldrh	r2, [r3, #0]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	211a      	movs	r1, #26
 8009a34:	fb01 f303 	mul.w	r3, r1, r3
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	b25b      	sxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	da16      	bge.n	8009a74 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	211a      	movs	r1, #26
 8009a4c:	fb01 f303 	mul.w	r3, r1, r3
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009a56:	781a      	ldrb	r2, [r3, #0]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	211a      	movs	r1, #26
 8009a62:	fb01 f303 	mul.w	r3, r1, r3
 8009a66:	4413      	add	r3, r2
 8009a68:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a6c:	881a      	ldrh	r2, [r3, #0]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	815a      	strh	r2, [r3, #10]
 8009a72:	e015      	b.n	8009aa0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	211a      	movs	r1, #26
 8009a7a:	fb01 f303 	mul.w	r3, r1, r3
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8009a84:	781a      	ldrb	r2, [r3, #0]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	211a      	movs	r1, #26
 8009a90:	fb01 f303 	mul.w	r3, r1, r3
 8009a94:	4413      	add	r3, r2
 8009a96:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a9a:	881a      	ldrh	r2, [r3, #0]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	799b      	ldrb	r3, [r3, #6]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f002 fcb8 	bl	800c42e <USBH_AllocPipe>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	79db      	ldrb	r3, [r3, #7]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f002 fcae 	bl	800c42e <USBH_AllocPipe>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fda4 	bl	800a628 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	7959      	ldrb	r1, [r3, #5]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	7998      	ldrb	r0, [r3, #6]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	8912      	ldrh	r2, [r2, #8]
 8009af8:	9202      	str	r2, [sp, #8]
 8009afa:	2202      	movs	r2, #2
 8009afc:	9201      	str	r2, [sp, #4]
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	4623      	mov	r3, r4
 8009b02:	4602      	mov	r2, r0
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f002 fc63 	bl	800c3d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	7919      	ldrb	r1, [r3, #4]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	79d8      	ldrb	r0, [r3, #7]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	8952      	ldrh	r2, [r2, #10]
 8009b22:	9202      	str	r2, [sp, #8]
 8009b24:	2202      	movs	r2, #2
 8009b26:	9201      	str	r2, [sp, #4]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	4623      	mov	r3, r4
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f002 fc4e 	bl	800c3d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	791b      	ldrb	r3, [r3, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f006 fdf3 	bl	8010728 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	795b      	ldrb	r3, [r3, #5]
 8009b46:	2200      	movs	r2, #0
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f006 fdec 	bl	8010728 <USBH_LL_SetToggle>

  return USBH_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}

08009b5a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	795b      	ldrb	r3, [r3, #5]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00e      	beq.n	8009b92 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	795b      	ldrb	r3, [r3, #5]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f002 fc47 	bl	800c40e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	795b      	ldrb	r3, [r3, #5]
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f002 fc71 	bl	800c46e <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	791b      	ldrb	r3, [r3, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00e      	beq.n	8009bb8 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	791b      	ldrb	r3, [r3, #4]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f002 fc34 	bl	800c40e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	791b      	ldrb	r3, [r3, #4]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f002 fc5e 	bl	800c46e <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00b      	beq.n	8009bdc <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f006 fe97 	bl	8010900 <free>
    phost->pActiveClass->pData = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009bd8:	2200      	movs	r2, #0
 8009bda:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	7b9b      	ldrb	r3, [r3, #14]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d004      	beq.n	8009c0e <USBH_MSC_ClassRequest+0x28>
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d03f      	beq.n	8009c88 <USBH_MSC_ClassRequest+0xa2>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d000      	beq.n	8009c0e <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8009c0c:	e04b      	b.n	8009ca6 <USBH_MSC_ClassRequest+0xc0>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fcea 	bl	800a5ec <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d104      	bne.n	8009c2c <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d136      	bne.n	8009ca0 <USBH_MSC_ClassRequest+0xba>
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d804      	bhi.n	8009c46 <USBH_MSC_ClassRequest+0x60>
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	3301      	adds	r3, #1
 8009c44:	e000      	b.n	8009c48 <USBH_MSC_ClassRequest+0x62>
 8009c46:	2302      	movs	r3, #2
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	6013      	str	r3, [r2, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73bb      	strb	r3, [r7, #14]
 8009c50:	e014      	b.n	8009c7c <USBH_MSC_ClassRequest+0x96>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	2134      	movs	r1, #52	; 0x34
 8009c58:	fb01 f303 	mul.w	r3, r1, r3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	3392      	adds	r3, #146	; 0x92
 8009c60:	2202      	movs	r2, #2
 8009c62:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	2134      	movs	r1, #52	; 0x34
 8009c6a:	fb01 f303 	mul.w	r3, r1, r3
 8009c6e:	4413      	add	r3, r2
 8009c70:	33c1      	adds	r3, #193	; 0xc1
 8009c72:	2200      	movs	r2, #0
 8009c74:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	73bb      	strb	r3, [r7, #14]
 8009c7c:	7bba      	ldrb	r2, [r7, #14]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d3e5      	bcc.n	8009c52 <USBH_MSC_ClassRequest+0x6c>
      break;
 8009c86:	e00b      	b.n	8009ca0 <USBH_MSC_ClassRequest+0xba>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 ff6b 	bl	800bb66 <USBH_ClrFeature>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d106      	bne.n	8009ca4 <USBH_MSC_ClassRequest+0xbe>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	7bda      	ldrb	r2, [r3, #15]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	739a      	strb	r2, [r3, #14]
      break;
 8009c9e:	e001      	b.n	8009ca4 <USBH_MSC_ClassRequest+0xbe>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e000      	b.n	8009ca6 <USBH_MSC_ClassRequest+0xc0>
      break;
 8009ca4:	bf00      	nop
  }

  return status;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	7b1b      	ldrb	r3, [r3, #12]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d003      	beq.n	8009cde <USBH_MSC_Process+0x2e>
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	f000 8271 	beq.w	800a1be <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009cdc:	e272      	b.n	800a1c4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	f080 824f 	bcs.w	800a18e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	2334      	movs	r3, #52	; 0x34
 8009cfc:	fb03 f301 	mul.w	r3, r3, r1
 8009d00:	4413      	add	r3, r2
 8009d02:	3391      	adds	r3, #145	; 0x91
 8009d04:	2201      	movs	r2, #1
 8009d06:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d0e:	4619      	mov	r1, r3
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	2334      	movs	r3, #52	; 0x34
 8009d14:	fb03 f301 	mul.w	r3, r3, r1
 8009d18:	4413      	add	r3, r2
 8009d1a:	3390      	adds	r3, #144	; 0x90
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b08      	cmp	r3, #8
 8009d20:	f200 8243 	bhi.w	800a1aa <USBH_MSC_Process+0x4fa>
 8009d24:	a201      	add	r2, pc, #4	; (adr r2, 8009d2c <USBH_MSC_Process+0x7c>)
 8009d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2a:	bf00      	nop
 8009d2c:	08009d51 	.word	0x08009d51
 8009d30:	0800a1ab 	.word	0x0800a1ab
 8009d34:	08009e19 	.word	0x08009e19
 8009d38:	08009f9d 	.word	0x08009f9d
 8009d3c:	08009d77 	.word	0x08009d77
 8009d40:	0800a069 	.word	0x0800a069
 8009d44:	0800a1ab 	.word	0x0800a1ab
 8009d48:	0800a1ab 	.word	0x0800a1ab
 8009d4c:	0800a17d 	.word	0x0800a17d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d56:	4619      	mov	r1, r3
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	2334      	movs	r3, #52	; 0x34
 8009d5c:	fb03 f301 	mul.w	r3, r3, r1
 8009d60:	4413      	add	r3, r2
 8009d62:	3390      	adds	r3, #144	; 0x90
 8009d64:	2204      	movs	r2, #4
 8009d66:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009d74:	e222      	b.n	800a1bc <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d7c:	b2d9      	uxtb	r1, r3
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d84:	461a      	mov	r2, r3
 8009d86:	2334      	movs	r3, #52	; 0x34
 8009d88:	fb03 f302 	mul.w	r3, r3, r2
 8009d8c:	3398      	adds	r3, #152	; 0x98
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4413      	add	r3, r2
 8009d92:	3307      	adds	r3, #7
 8009d94:	461a      	mov	r2, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 ff68 	bl	800ac6c <USBH_MSC_SCSI_Inquiry>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10b      	bne.n	8009dbe <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dac:	4619      	mov	r1, r3
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	2334      	movs	r3, #52	; 0x34
 8009db2:	fb03 f301 	mul.w	r3, r3, r1
 8009db6:	4413      	add	r3, r2
 8009db8:	3390      	adds	r3, #144	; 0x90
 8009dba:	2202      	movs	r2, #2
 8009dbc:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d10c      	bne.n	8009dde <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dca:	4619      	mov	r1, r3
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	2334      	movs	r3, #52	; 0x34
 8009dd0:	fb03 f301 	mul.w	r3, r3, r1
 8009dd4:	4413      	add	r3, r2
 8009dd6:	3390      	adds	r3, #144	; 0x90
 8009dd8:	2205      	movs	r2, #5
 8009dda:	701a      	strb	r2, [r3, #0]
            break;
 8009ddc:	e1e7      	b.n	800a1ae <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	f040 81e4 	bne.w	800a1ae <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dec:	4619      	mov	r1, r3
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	2334      	movs	r3, #52	; 0x34
 8009df2:	fb03 f301 	mul.w	r3, r3, r1
 8009df6:	4413      	add	r3, r2
 8009df8:	3390      	adds	r3, #144	; 0x90
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e04:	4619      	mov	r1, r3
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	2334      	movs	r3, #52	; 0x34
 8009e0a:	fb03 f301 	mul.w	r3, r3, r1
 8009e0e:	4413      	add	r3, r2
 8009e10:	3391      	adds	r3, #145	; 0x91
 8009e12:	2202      	movs	r2, #2
 8009e14:	701a      	strb	r2, [r3, #0]
            break;
 8009e16:	e1ca      	b.n	800a1ae <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fe64 	bl	800aaf0 <USBH_MSC_SCSI_TestUnitReady>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d149      	bne.n	8009ec6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e38:	4619      	mov	r1, r3
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	2334      	movs	r3, #52	; 0x34
 8009e3e:	fb03 f301 	mul.w	r3, r3, r1
 8009e42:	4413      	add	r3, r2
 8009e44:	3392      	adds	r3, #146	; 0x92
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00c      	beq.n	8009e66 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e52:	4619      	mov	r1, r3
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	2334      	movs	r3, #52	; 0x34
 8009e58:	fb03 f301 	mul.w	r3, r3, r1
 8009e5c:	4413      	add	r3, r2
 8009e5e:	33c1      	adds	r3, #193	; 0xc1
 8009e60:	2201      	movs	r2, #1
 8009e62:	701a      	strb	r2, [r3, #0]
 8009e64:	e00b      	b.n	8009e7e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	2334      	movs	r3, #52	; 0x34
 8009e72:	fb03 f301 	mul.w	r3, r3, r1
 8009e76:	4413      	add	r3, r2
 8009e78:	33c1      	adds	r3, #193	; 0xc1
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e84:	4619      	mov	r1, r3
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	2334      	movs	r3, #52	; 0x34
 8009e8a:	fb03 f301 	mul.w	r3, r3, r1
 8009e8e:	4413      	add	r3, r2
 8009e90:	3390      	adds	r3, #144	; 0x90
 8009e92:	2203      	movs	r2, #3
 8009e94:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	2334      	movs	r3, #52	; 0x34
 8009ea2:	fb03 f301 	mul.w	r3, r3, r1
 8009ea6:	4413      	add	r3, r2
 8009ea8:	3391      	adds	r3, #145	; 0x91
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	2334      	movs	r3, #52	; 0x34
 8009eba:	fb03 f301 	mul.w	r3, r3, r1
 8009ebe:	4413      	add	r3, r2
 8009ec0:	3392      	adds	r3, #146	; 0x92
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d14a      	bne.n	8009f62 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	2334      	movs	r3, #52	; 0x34
 8009ed8:	fb03 f301 	mul.w	r3, r3, r1
 8009edc:	4413      	add	r3, r2
 8009ede:	3392      	adds	r3, #146	; 0x92
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d00c      	beq.n	8009f00 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eec:	4619      	mov	r1, r3
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	2334      	movs	r3, #52	; 0x34
 8009ef2:	fb03 f301 	mul.w	r3, r3, r1
 8009ef6:	4413      	add	r3, r2
 8009ef8:	33c1      	adds	r3, #193	; 0xc1
 8009efa:	2201      	movs	r2, #1
 8009efc:	701a      	strb	r2, [r3, #0]
 8009efe:	e00b      	b.n	8009f18 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f06:	4619      	mov	r1, r3
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	2334      	movs	r3, #52	; 0x34
 8009f0c:	fb03 f301 	mul.w	r3, r3, r1
 8009f10:	4413      	add	r3, r2
 8009f12:	33c1      	adds	r3, #193	; 0xc1
 8009f14:	2200      	movs	r2, #0
 8009f16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f1e:	4619      	mov	r1, r3
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	2334      	movs	r3, #52	; 0x34
 8009f24:	fb03 f301 	mul.w	r3, r3, r1
 8009f28:	4413      	add	r3, r2
 8009f2a:	3390      	adds	r3, #144	; 0x90
 8009f2c:	2205      	movs	r2, #5
 8009f2e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f36:	4619      	mov	r1, r3
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	2334      	movs	r3, #52	; 0x34
 8009f3c:	fb03 f301 	mul.w	r3, r3, r1
 8009f40:	4413      	add	r3, r2
 8009f42:	3391      	adds	r3, #145	; 0x91
 8009f44:	2201      	movs	r2, #1
 8009f46:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f4e:	4619      	mov	r1, r3
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	2334      	movs	r3, #52	; 0x34
 8009f54:	fb03 f301 	mul.w	r3, r3, r1
 8009f58:	4413      	add	r3, r2
 8009f5a:	3392      	adds	r3, #146	; 0x92
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	701a      	strb	r2, [r3, #0]
            break;
 8009f60:	e127      	b.n	800a1b2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	f040 8124 	bne.w	800a1b2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f70:	4619      	mov	r1, r3
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	2334      	movs	r3, #52	; 0x34
 8009f76:	fb03 f301 	mul.w	r3, r3, r1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3390      	adds	r3, #144	; 0x90
 8009f7e:	2201      	movs	r2, #1
 8009f80:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f88:	4619      	mov	r1, r3
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	2334      	movs	r3, #52	; 0x34
 8009f8e:	fb03 f301 	mul.w	r3, r3, r1
 8009f92:	4413      	add	r3, r2
 8009f94:	3391      	adds	r3, #145	; 0x91
 8009f96:	2202      	movs	r2, #2
 8009f98:	701a      	strb	r2, [r3, #0]
            break;
 8009f9a:	e10a      	b.n	800a1b2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fa2:	b2d9      	uxtb	r1, r3
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009faa:	461a      	mov	r2, r3
 8009fac:	2334      	movs	r3, #52	; 0x34
 8009fae:	fb03 f302 	mul.w	r3, r3, r2
 8009fb2:	3390      	adds	r3, #144	; 0x90
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	3304      	adds	r3, #4
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fdda 	bl	800ab76 <USBH_MSC_SCSI_ReadCapacity>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d120      	bne.n	800a00e <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	2334      	movs	r3, #52	; 0x34
 8009fd8:	fb03 f301 	mul.w	r3, r3, r1
 8009fdc:	4413      	add	r3, r2
 8009fde:	3390      	adds	r3, #144	; 0x90
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fea:	4619      	mov	r1, r3
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	2334      	movs	r3, #52	; 0x34
 8009ff0:	fb03 f301 	mul.w	r3, r3, r1
 8009ff4:	4413      	add	r3, r2
 8009ff6:	3391      	adds	r3, #145	; 0x91
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a002:	3301      	adds	r3, #1
 800a004:	b29a      	uxth	r2, r3
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a00c:	e0d3      	b.n	800a1b6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d10c      	bne.n	800a02e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a01a:	4619      	mov	r1, r3
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	2334      	movs	r3, #52	; 0x34
 800a020:	fb03 f301 	mul.w	r3, r3, r1
 800a024:	4413      	add	r3, r2
 800a026:	3390      	adds	r3, #144	; 0x90
 800a028:	2205      	movs	r2, #5
 800a02a:	701a      	strb	r2, [r3, #0]
            break;
 800a02c:	e0c3      	b.n	800a1b6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	2b04      	cmp	r3, #4
 800a032:	f040 80c0 	bne.w	800a1b6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a03c:	4619      	mov	r1, r3
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	2334      	movs	r3, #52	; 0x34
 800a042:	fb03 f301 	mul.w	r3, r3, r1
 800a046:	4413      	add	r3, r2
 800a048:	3390      	adds	r3, #144	; 0x90
 800a04a:	2201      	movs	r2, #1
 800a04c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a054:	4619      	mov	r1, r3
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	2334      	movs	r3, #52	; 0x34
 800a05a:	fb03 f301 	mul.w	r3, r3, r1
 800a05e:	4413      	add	r3, r2
 800a060:	3391      	adds	r3, #145	; 0x91
 800a062:	2202      	movs	r2, #2
 800a064:	701a      	strb	r2, [r3, #0]
            break;
 800a066:	e0a6      	b.n	800a1b6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a06e:	b2d9      	uxtb	r1, r3
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a076:	461a      	mov	r2, r3
 800a078:	2334      	movs	r3, #52	; 0x34
 800a07a:	fb03 f302 	mul.w	r3, r3, r2
 800a07e:	3398      	adds	r3, #152	; 0x98
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	4413      	add	r3, r2
 800a084:	3304      	adds	r3, #4
 800a086:	461a      	mov	r2, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fe94 	bl	800adb6 <USBH_MSC_SCSI_RequestSense>
 800a08e:	4603      	mov	r3, r0
 800a090:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d145      	bne.n	800a124 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a09e:	4619      	mov	r1, r3
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	2334      	movs	r3, #52	; 0x34
 800a0a4:	fb03 f301 	mul.w	r3, r3, r1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	339c      	adds	r3, #156	; 0x9c
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2b06      	cmp	r3, #6
 800a0b0:	d00c      	beq.n	800a0cc <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	2334      	movs	r3, #52	; 0x34
 800a0be:	fb03 f301 	mul.w	r3, r3, r1
 800a0c2:	4413      	add	r3, r2
 800a0c4:	339c      	adds	r3, #156	; 0x9c
 800a0c6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d117      	bne.n	800a0fc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	f242 720f 	movw	r2, #9999	; 0x270f
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d80c      	bhi.n	800a0fc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	2334      	movs	r3, #52	; 0x34
 800a0ee:	fb03 f301 	mul.w	r3, r3, r1
 800a0f2:	4413      	add	r3, r2
 800a0f4:	3390      	adds	r3, #144	; 0x90
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	701a      	strb	r2, [r3, #0]
                  break;
 800a0fa:	e05f      	b.n	800a1bc <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a102:	4619      	mov	r1, r3
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	2334      	movs	r3, #52	; 0x34
 800a108:	fb03 f301 	mul.w	r3, r3, r1
 800a10c:	4413      	add	r3, r2
 800a10e:	3390      	adds	r3, #144	; 0x90
 800a110:	2201      	movs	r2, #1
 800a112:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a11a:	3301      	adds	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a124:	7bfb      	ldrb	r3, [r7, #15]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d10c      	bne.n	800a144 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a130:	4619      	mov	r1, r3
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	2334      	movs	r3, #52	; 0x34
 800a136:	fb03 f301 	mul.w	r3, r3, r1
 800a13a:	4413      	add	r3, r2
 800a13c:	3390      	adds	r3, #144	; 0x90
 800a13e:	2208      	movs	r2, #8
 800a140:	701a      	strb	r2, [r3, #0]
            break;
 800a142:	e03a      	b.n	800a1ba <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	2b04      	cmp	r3, #4
 800a148:	d137      	bne.n	800a1ba <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a150:	4619      	mov	r1, r3
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	2334      	movs	r3, #52	; 0x34
 800a156:	fb03 f301 	mul.w	r3, r3, r1
 800a15a:	4413      	add	r3, r2
 800a15c:	3390      	adds	r3, #144	; 0x90
 800a15e:	2201      	movs	r2, #1
 800a160:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a168:	4619      	mov	r1, r3
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	2334      	movs	r3, #52	; 0x34
 800a16e:	fb03 f301 	mul.w	r3, r3, r1
 800a172:	4413      	add	r3, r2
 800a174:	3391      	adds	r3, #145	; 0x91
 800a176:	2202      	movs	r2, #2
 800a178:	701a      	strb	r2, [r3, #0]
            break;
 800a17a:	e01e      	b.n	800a1ba <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a182:	3301      	adds	r3, #1
 800a184:	b29a      	uxth	r2, r3
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a18c:	e016      	b.n	800a1bc <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2200      	movs	r2, #0
 800a192:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2201      	movs	r2, #1
 800a19a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a1a2:	2102      	movs	r1, #2
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	4798      	blx	r3
      break;
 800a1a8:	e00c      	b.n	800a1c4 <USBH_MSC_Process+0x514>
            break;
 800a1aa:	bf00      	nop
 800a1ac:	e00a      	b.n	800a1c4 <USBH_MSC_Process+0x514>
            break;
 800a1ae:	bf00      	nop
 800a1b0:	e008      	b.n	800a1c4 <USBH_MSC_Process+0x514>
            break;
 800a1b2:	bf00      	nop
 800a1b4:	e006      	b.n	800a1c4 <USBH_MSC_Process+0x514>
            break;
 800a1b6:	bf00      	nop
 800a1b8:	e004      	b.n	800a1c4 <USBH_MSC_Process+0x514>
            break;
 800a1ba:	bf00      	nop
      break;
 800a1bc:	e002      	b.n	800a1c4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c2:	bf00      	nop
  }
  return error;
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop

0800a1d0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b088      	sub	sp, #32
 800a1ea:	af02      	add	r7, sp, #8
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a200:	2301      	movs	r3, #1
 800a202:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	2134      	movs	r1, #52	; 0x34
 800a20a:	fb01 f303 	mul.w	r3, r1, r3
 800a20e:	4413      	add	r3, r2
 800a210:	3390      	adds	r3, #144	; 0x90
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b06      	cmp	r3, #6
 800a216:	d004      	beq.n	800a222 <USBH_MSC_RdWrProcess+0x3c>
 800a218:	2b07      	cmp	r3, #7
 800a21a:	d037      	beq.n	800a28c <USBH_MSC_RdWrProcess+0xa6>
 800a21c:	2b05      	cmp	r3, #5
 800a21e:	d06a      	beq.n	800a2f6 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800a220:	e0a6      	b.n	800a370 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a222:	78f9      	ldrb	r1, [r7, #3]
 800a224:	2300      	movs	r3, #0
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	2300      	movs	r3, #0
 800a22a:	2200      	movs	r2, #0
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fea6 	bl	800af7e <USBH_MSC_SCSI_Read>
 800a232:	4603      	mov	r3, r0
 800a234:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10b      	bne.n	800a254 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	2134      	movs	r1, #52	; 0x34
 800a242:	fb01 f303 	mul.w	r3, r1, r3
 800a246:	4413      	add	r3, r2
 800a248:	3390      	adds	r3, #144	; 0x90
 800a24a:	2201      	movs	r2, #1
 800a24c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	75fb      	strb	r3, [r7, #23]
      break;
 800a252:	e088      	b.n	800a366 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d109      	bne.n	800a26e <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a25a:	78fb      	ldrb	r3, [r7, #3]
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	2134      	movs	r1, #52	; 0x34
 800a260:	fb01 f303 	mul.w	r3, r1, r3
 800a264:	4413      	add	r3, r2
 800a266:	3390      	adds	r3, #144	; 0x90
 800a268:	2205      	movs	r2, #5
 800a26a:	701a      	strb	r2, [r3, #0]
      break;
 800a26c:	e07b      	b.n	800a366 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	2b04      	cmp	r3, #4
 800a272:	d178      	bne.n	800a366 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	2134      	movs	r1, #52	; 0x34
 800a27a:	fb01 f303 	mul.w	r3, r1, r3
 800a27e:	4413      	add	r3, r2
 800a280:	3390      	adds	r3, #144	; 0x90
 800a282:	2208      	movs	r2, #8
 800a284:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a286:	2302      	movs	r3, #2
 800a288:	75fb      	strb	r3, [r7, #23]
      break;
 800a28a:	e06c      	b.n	800a366 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a28c:	78f9      	ldrb	r1, [r7, #3]
 800a28e:	2300      	movs	r3, #0
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	2300      	movs	r3, #0
 800a294:	2200      	movs	r2, #0
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fe06 	bl	800aea8 <USBH_MSC_SCSI_Write>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10b      	bne.n	800a2be <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a2a6:	78fb      	ldrb	r3, [r7, #3]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	2134      	movs	r1, #52	; 0x34
 800a2ac:	fb01 f303 	mul.w	r3, r1, r3
 800a2b0:	4413      	add	r3, r2
 800a2b2:	3390      	adds	r3, #144	; 0x90
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a2bc:	e055      	b.n	800a36a <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d109      	bne.n	800a2d8 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	2134      	movs	r1, #52	; 0x34
 800a2ca:	fb01 f303 	mul.w	r3, r1, r3
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3390      	adds	r3, #144	; 0x90
 800a2d2:	2205      	movs	r2, #5
 800a2d4:	701a      	strb	r2, [r3, #0]
      break;
 800a2d6:	e048      	b.n	800a36a <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	d145      	bne.n	800a36a <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a2de:	78fb      	ldrb	r3, [r7, #3]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	2134      	movs	r1, #52	; 0x34
 800a2e4:	fb01 f303 	mul.w	r3, r1, r3
 800a2e8:	4413      	add	r3, r2
 800a2ea:	3390      	adds	r3, #144	; 0x90
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f4:	e039      	b.n	800a36a <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	2234      	movs	r2, #52	; 0x34
 800a2fa:	fb02 f303 	mul.w	r3, r2, r3
 800a2fe:	3398      	adds	r3, #152	; 0x98
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	4413      	add	r3, r2
 800a304:	1d1a      	adds	r2, r3, #4
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fd53 	bl	800adb6 <USBH_MSC_SCSI_RequestSense>
 800a310:	4603      	mov	r3, r0
 800a312:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d113      	bne.n	800a342 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a31a:	78fb      	ldrb	r3, [r7, #3]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	2134      	movs	r1, #52	; 0x34
 800a320:	fb01 f303 	mul.w	r3, r1, r3
 800a324:	4413      	add	r3, r2
 800a326:	3390      	adds	r3, #144	; 0x90
 800a328:	2201      	movs	r2, #1
 800a32a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a32c:	78fb      	ldrb	r3, [r7, #3]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	2134      	movs	r1, #52	; 0x34
 800a332:	fb01 f303 	mul.w	r3, r1, r3
 800a336:	4413      	add	r3, r2
 800a338:	3391      	adds	r3, #145	; 0x91
 800a33a:	2202      	movs	r2, #2
 800a33c:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800a33e:	2302      	movs	r3, #2
 800a340:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b02      	cmp	r3, #2
 800a346:	d012      	beq.n	800a36e <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	2b04      	cmp	r3, #4
 800a34c:	d10f      	bne.n	800a36e <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a34e:	78fb      	ldrb	r3, [r7, #3]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	2134      	movs	r1, #52	; 0x34
 800a354:	fb01 f303 	mul.w	r3, r1, r3
 800a358:	4413      	add	r3, r2
 800a35a:	3390      	adds	r3, #144	; 0x90
 800a35c:	2208      	movs	r2, #8
 800a35e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a360:	2302      	movs	r3, #2
 800a362:	75fb      	strb	r3, [r7, #23]
      break;
 800a364:	e003      	b.n	800a36e <USBH_MSC_RdWrProcess+0x188>
      break;
 800a366:	bf00      	nop
 800a368:	e002      	b.n	800a370 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800a36a:	bf00      	nop
 800a36c:	e000      	b.n	800a370 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800a36e:	bf00      	nop

  }
  return error;
 800a370:	7dfb      	ldrb	r3, [r7, #23]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	460b      	mov	r3, r1
 800a384:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b0b      	cmp	r3, #11
 800a398:	d10c      	bne.n	800a3b4 <USBH_MSC_UnitIsReady+0x3a>
 800a39a:	78fb      	ldrb	r3, [r7, #3]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	2134      	movs	r1, #52	; 0x34
 800a3a0:	fb01 f303 	mul.w	r3, r1, r3
 800a3a4:	4413      	add	r3, r2
 800a3a6:	3391      	adds	r3, #145	; 0x91
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	73fb      	strb	r3, [r7, #15]
 800a3b2:	e001      	b.n	800a3b8 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b086      	sub	sp, #24
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	607a      	str	r2, [r7, #4]
 800a3d2:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b0b      	cmp	r3, #11
 800a3e6:	d10d      	bne.n	800a404 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a3e8:	7afb      	ldrb	r3, [r7, #11]
 800a3ea:	2234      	movs	r2, #52	; 0x34
 800a3ec:	fb02 f303 	mul.w	r3, r2, r3
 800a3f0:	3390      	adds	r3, #144	; 0x90
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	2234      	movs	r2, #52	; 0x34
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f006 fa97 	bl	801092e <memcpy>
    return USBH_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e000      	b.n	800a406 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a404:	2302      	movs	r3, #2
  }
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b088      	sub	sp, #32
 800a412:	af02      	add	r7, sp, #8
 800a414:	60f8      	str	r0, [r7, #12]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	603b      	str	r3, [r7, #0]
 800a41a:	460b      	mov	r3, r1
 800a41c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00e      	beq.n	800a452 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a43a:	2b0b      	cmp	r3, #11
 800a43c:	d109      	bne.n	800a452 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a43e:	7afb      	ldrb	r3, [r7, #11]
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	2134      	movs	r1, #52	; 0x34
 800a444:	fb01 f303 	mul.w	r3, r1, r3
 800a448:	4413      	add	r3, r2
 800a44a:	3390      	adds	r3, #144	; 0x90
 800a44c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d001      	beq.n	800a456 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a452:	2302      	movs	r3, #2
 800a454:	e040      	b.n	800a4d8 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2206      	movs	r2, #6
 800a45a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a45c:	7afb      	ldrb	r3, [r7, #11]
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	2134      	movs	r1, #52	; 0x34
 800a462:	fb01 f303 	mul.w	r3, r1, r3
 800a466:	4413      	add	r3, r2
 800a468:	3390      	adds	r3, #144	; 0x90
 800a46a:	2206      	movs	r2, #6
 800a46c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a46e:	7afb      	ldrb	r3, [r7, #11]
 800a470:	b29a      	uxth	r2, r3
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a478:	7af9      	ldrb	r1, [r7, #11]
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fd7b 	bl	800af7e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a48e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a490:	e016      	b.n	800a4c0 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	f242 7110 	movw	r1, #10000	; 0x2710
 800a4a2:	fb01 f303 	mul.w	r3, r1, r3
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d805      	bhi.n	800a4b6 <USBH_MSC_Read+0xa8>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d104      	bne.n	800a4c0 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e00b      	b.n	800a4d8 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a4c0:	7afb      	ldrb	r3, [r7, #11]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff fe8e 	bl	800a1e6 <USBH_MSC_RdWrProcess>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d0e0      	beq.n	800a492 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af02      	add	r7, sp, #8
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	607a      	str	r2, [r7, #4]
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00e      	beq.n	800a524 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a50c:	2b0b      	cmp	r3, #11
 800a50e:	d109      	bne.n	800a524 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a510:	7afb      	ldrb	r3, [r7, #11]
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	2134      	movs	r1, #52	; 0x34
 800a516:	fb01 f303 	mul.w	r3, r1, r3
 800a51a:	4413      	add	r3, r2
 800a51c:	3390      	adds	r3, #144	; 0x90
 800a51e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a520:	2b01      	cmp	r3, #1
 800a522:	d001      	beq.n	800a528 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a524:	2302      	movs	r3, #2
 800a526:	e040      	b.n	800a5aa <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2207      	movs	r2, #7
 800a52c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a52e:	7afb      	ldrb	r3, [r7, #11]
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	2134      	movs	r1, #52	; 0x34
 800a534:	fb01 f303 	mul.w	r3, r1, r3
 800a538:	4413      	add	r3, r2
 800a53a:	3390      	adds	r3, #144	; 0x90
 800a53c:	2207      	movs	r2, #7
 800a53e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a540:	7afb      	ldrb	r3, [r7, #11]
 800a542:	b29a      	uxth	r2, r3
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a54a:	7af9      	ldrb	r1, [r7, #11]
 800a54c:	6a3b      	ldr	r3, [r7, #32]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fca7 	bl	800aea8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800a560:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a562:	e016      	b.n	800a592 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	1ad2      	subs	r2, r2, r3
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	f242 7110 	movw	r1, #10000	; 0x2710
 800a574:	fb01 f303 	mul.w	r3, r1, r3
 800a578:	429a      	cmp	r2, r3
 800a57a:	d805      	bhi.n	800a588 <USBH_MSC_Write+0xa8>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b00      	cmp	r3, #0
 800a586:	d104      	bne.n	800a592 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	2201      	movs	r2, #1
 800a58c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a58e:	2302      	movs	r3, #2
 800a590:	e00b      	b.n	800a5aa <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a592:	7afb      	ldrb	r3, [r7, #11]
 800a594:	4619      	mov	r1, r3
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff fe25 	bl	800a1e6 <USBH_MSC_RdWrProcess>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d0e0      	beq.n	800a564 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2221      	movs	r2, #33	; 0x21
 800a5be:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	22ff      	movs	r2, #255	; 0xff
 800a5c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2100      	movs	r1, #0
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 fca2 	bl	800bf26 <USBH_CtlReq>
 800a5e2:	4603      	mov	r3, r0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	22a1      	movs	r2, #161	; 0xa1
 800a5fa:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	22fe      	movs	r2, #254	; 0xfe
 800a600:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a614:	2201      	movs	r2, #1
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 fc84 	bl	800bf26 <USBH_CtlReq>
 800a61e:	4603      	mov	r3, r0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	4a09      	ldr	r2, [pc, #36]	; (800a664 <USBH_MSC_BOT_Init+0x3c>)
 800a63e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4a09      	ldr	r2, [pc, #36]	; (800a668 <USBH_MSC_BOT_Init+0x40>)
 800a644:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	43425355 	.word	0x43425355
 800a668:	20304050 	.word	0x20304050

0800a66c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	af02      	add	r7, sp, #8
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a678:	2301      	movs	r3, #1
 800a67a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a67c:	2301      	movs	r3, #1
 800a67e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a680:	2301      	movs	r3, #1
 800a682:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a684:	2300      	movs	r3, #0
 800a686:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800a68e:	69db      	ldr	r3, [r3, #28]
 800a690:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a69c:	3b01      	subs	r3, #1
 800a69e:	2b0a      	cmp	r3, #10
 800a6a0:	f200 81a1 	bhi.w	800a9e6 <USBH_MSC_BOT_Process+0x37a>
 800a6a4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <USBH_MSC_BOT_Process+0x40>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6d9 	.word	0x0800a6d9
 800a6b0:	0800a703 	.word	0x0800a703
 800a6b4:	0800a76d 	.word	0x0800a76d
 800a6b8:	0800a78b 	.word	0x0800a78b
 800a6bc:	0800a80f 	.word	0x0800a80f
 800a6c0:	0800a833 	.word	0x0800a833
 800a6c4:	0800a8cd 	.word	0x0800a8cd
 800a6c8:	0800a8e9 	.word	0x0800a8e9
 800a6cc:	0800a93b 	.word	0x0800a93b
 800a6d0:	0800a96b 	.word	0x0800a96b
 800a6d4:	0800a9cd 	.word	0x0800a9cd
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	78fa      	ldrb	r2, [r7, #3]
 800a6dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	795a      	ldrb	r2, [r3, #5]
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	221f      	movs	r2, #31
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f001 fe25 	bl	800c34a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a700:	e180      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	795b      	ldrb	r3, [r3, #5]
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f005 ffe3 	bl	80106d4 <USBH_LL_GetURBState>
 800a70e:	4603      	mov	r3, r0
 800a710:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a712:	7d3b      	ldrb	r3, [r7, #20]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d118      	bne.n	800a74a <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00f      	beq.n	800a740 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a726:	b25b      	sxtb	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	da04      	bge.n	800a736 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2203      	movs	r2, #3
 800a730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a734:	e159      	b.n	800a9ea <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	2205      	movs	r2, #5
 800a73a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a73e:	e154      	b.n	800a9ea <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	2207      	movs	r2, #7
 800a744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a748:	e14f      	b.n	800a9ea <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a74a:	7d3b      	ldrb	r3, [r7, #20]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d104      	bne.n	800a75a <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a758:	e147      	b.n	800a9ea <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800a75a:	7d3b      	ldrb	r3, [r7, #20]
 800a75c:	2b05      	cmp	r3, #5
 800a75e:	f040 8144 	bne.w	800a9ea <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	220a      	movs	r2, #10
 800a766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a76a:	e13e      	b.n	800a9ea <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	895a      	ldrh	r2, [r3, #10]
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	791b      	ldrb	r3, [r3, #4]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f001 fe0a 	bl	800c394 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	2204      	movs	r2, #4
 800a784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a788:	e13c      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	791b      	ldrb	r3, [r3, #4]
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f005 ff9f 	bl	80106d4 <USBH_LL_GetURBState>
 800a796:	4603      	mov	r3, r0
 800a798:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a79a:	7d3b      	ldrb	r3, [r7, #20]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d12d      	bne.n	800a7fc <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	8952      	ldrh	r2, [r2, #10]
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d910      	bls.n	800a7ce <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	8952      	ldrh	r2, [r2, #10]
 800a7b6:	441a      	add	r2, r3
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	8952      	ldrh	r2, [r2, #10]
 800a7c6:	1a9a      	subs	r2, r3, r2
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7cc:	e002      	b.n	800a7d4 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00a      	beq.n	800a7f2 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	895a      	ldrh	r2, [r3, #10]
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	791b      	ldrb	r3, [r3, #4]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 fdd2 	bl	800c394 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a7f0:	e0fd      	b.n	800a9ee <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	2207      	movs	r2, #7
 800a7f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7fa:	e0f8      	b.n	800a9ee <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 800a7fc:	7d3b      	ldrb	r3, [r7, #20]
 800a7fe:	2b05      	cmp	r3, #5
 800a800:	f040 80f5 	bne.w	800a9ee <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	2209      	movs	r2, #9
 800a808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a80c:	e0ef      	b.n	800a9ee <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	891a      	ldrh	r2, [r3, #8]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	7958      	ldrb	r0, [r3, #5]
 800a81c:	2301      	movs	r3, #1
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	4603      	mov	r3, r0
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f001 fd91 	bl	800c34a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	2206      	movs	r2, #6
 800a82c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a830:	e0e8      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	795b      	ldrb	r3, [r3, #5]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f005 ff4b 	bl	80106d4 <USBH_LL_GetURBState>
 800a83e:	4603      	mov	r3, r0
 800a840:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a842:	7d3b      	ldrb	r3, [r7, #20]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d130      	bne.n	800a8aa <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	8912      	ldrh	r2, [r2, #8]
 800a850:	4293      	cmp	r3, r2
 800a852:	d910      	bls.n	800a876 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	8912      	ldrh	r2, [r2, #8]
 800a85e:	441a      	add	r2, r3
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	8912      	ldrh	r2, [r2, #8]
 800a86e:	1a9a      	subs	r2, r3, r2
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	65da      	str	r2, [r3, #92]	; 0x5c
 800a874:	e002      	b.n	800a87c <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	2200      	movs	r2, #0
 800a87a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00d      	beq.n	800a8a0 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	891a      	ldrh	r2, [r3, #8]
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	7958      	ldrb	r0, [r3, #5]
 800a892:	2301      	movs	r3, #1
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	4603      	mov	r3, r0
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f001 fd56 	bl	800c34a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a89e:	e0a8      	b.n	800a9f2 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	2207      	movs	r2, #7
 800a8a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8a8:	e0a3      	b.n	800a9f2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8aa:	7d3b      	ldrb	r3, [r7, #20]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d104      	bne.n	800a8ba <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2205      	movs	r2, #5
 800a8b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8b8:	e09b      	b.n	800a9f2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800a8ba:	7d3b      	ldrb	r3, [r7, #20]
 800a8bc:	2b05      	cmp	r3, #5
 800a8be:	f040 8098 	bne.w	800a9f2 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	220a      	movs	r2, #10
 800a8c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8ca:	e092      	b.n	800a9f2 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	791b      	ldrb	r3, [r3, #4]
 800a8d6:	220d      	movs	r2, #13
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 fd5b 	bl	800c394 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8e6:	e08d      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	791b      	ldrb	r3, [r3, #4]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f005 fef0 	bl	80106d4 <USBH_LL_GetURBState>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a8f8:	7d3b      	ldrb	r3, [r7, #20]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d115      	bne.n	800a92a <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f8aa 	bl	800aa68 <USBH_MSC_DecodeCSW>
 800a914:	4603      	mov	r3, r0
 800a916:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a918:	7d7b      	ldrb	r3, [r7, #21]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d102      	bne.n	800a924 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a922:	e068      	b.n	800a9f6 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800a924:	2302      	movs	r3, #2
 800a926:	75fb      	strb	r3, [r7, #23]
      break;
 800a928:	e065      	b.n	800a9f6 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800a92a:	7d3b      	ldrb	r3, [r7, #20]
 800a92c:	2b05      	cmp	r3, #5
 800a92e:	d162      	bne.n	800a9f6 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	2209      	movs	r2, #9
 800a934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a938:	e05d      	b.n	800a9f6 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a93a:	78fb      	ldrb	r3, [r7, #3]
 800a93c:	2200      	movs	r2, #0
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f865 	bl	800aa10 <USBH_MSC_BOT_Abort>
 800a946:	4603      	mov	r3, r0
 800a948:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a94a:	7dbb      	ldrb	r3, [r7, #22]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d104      	bne.n	800a95a <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	2207      	movs	r2, #7
 800a954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a958:	e04f      	b.n	800a9fa <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a95a:	7dbb      	ldrb	r3, [r7, #22]
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d14c      	bne.n	800a9fa <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	220b      	movs	r2, #11
 800a964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a968:	e047      	b.n	800a9fa <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a96a:	78fb      	ldrb	r3, [r7, #3]
 800a96c:	2201      	movs	r2, #1
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f84d 	bl	800aa10 <USBH_MSC_BOT_Abort>
 800a976:	4603      	mov	r3, r0
 800a978:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a97a:	7dbb      	ldrb	r3, [r7, #22]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d11d      	bne.n	800a9bc <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	795b      	ldrb	r3, [r3, #5]
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f005 ff01 	bl	801078e <USBH_LL_GetToggle>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	7959      	ldrb	r1, [r3, #5]
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	f1c3 0301 	rsb	r3, r3, #1
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	461a      	mov	r2, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f005 fec2 	bl	8010728 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	791b      	ldrb	r3, [r3, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f005 febb 	bl	8010728 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	2209      	movs	r2, #9
 800a9b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a9ba:	e020      	b.n	800a9fe <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800a9bc:	7dbb      	ldrb	r3, [r7, #22]
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d11d      	bne.n	800a9fe <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	220b      	movs	r2, #11
 800a9c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9ca:	e018      	b.n	800a9fe <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7ff fdf0 	bl	800a5b2 <USBH_MSC_BOT_REQ_Reset>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d112      	bne.n	800aa02 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a9e4:	e00d      	b.n	800aa02 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800a9e6:	bf00      	nop
 800a9e8:	e00c      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>
      break;
 800a9ea:	bf00      	nop
 800a9ec:	e00a      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>
      break;
 800a9ee:	bf00      	nop
 800a9f0:	e008      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>
      break;
 800a9f2:	bf00      	nop
 800a9f4:	e006      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>
      break;
 800a9f6:	bf00      	nop
 800a9f8:	e004      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>
      break;
 800a9fa:	bf00      	nop
 800a9fc:	e002      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>
      break;
 800a9fe:	bf00      	nop
 800aa00:	e000      	b.n	800aa04 <USBH_MSC_BOT_Process+0x398>
      break;
 800aa02:	bf00      	nop
  }
  return status;
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop

0800aa10 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800aa20:	2302      	movs	r3, #2
 800aa22:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800aa2a:	69db      	ldr	r3, [r3, #28]
 800aa2c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800aa2e:	78bb      	ldrb	r3, [r7, #2]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <USBH_MSC_BOT_Abort+0x2a>
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d009      	beq.n	800aa4c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800aa38:	e011      	b.n	800aa5e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	79db      	ldrb	r3, [r3, #7]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 f890 	bl	800bb66 <USBH_ClrFeature>
 800aa46:	4603      	mov	r3, r0
 800aa48:	73fb      	strb	r3, [r7, #15]
      break;
 800aa4a:	e008      	b.n	800aa5e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	799b      	ldrb	r3, [r3, #6]
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 f887 	bl	800bb66 <USBH_ClrFeature>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa5c:	bf00      	nop
  }
  return status;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800aa76:	69db      	ldr	r3, [r3, #28]
 800aa78:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	791b      	ldrb	r3, [r3, #4]
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f005 fd93 	bl	80105b0 <USBH_LL_GetLastXferSize>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b0d      	cmp	r3, #13
 800aa8e:	d002      	beq.n	800aa96 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800aa90:	2302      	movs	r3, #2
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	e024      	b.n	800aae0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa9a:	4a14      	ldr	r2, [pc, #80]	; (800aaec <USBH_MSC_DecodeCSW+0x84>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d11d      	bne.n	800aadc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d119      	bne.n	800aae0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]
 800aaba:	e011      	b.n	800aae0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d102      	bne.n	800aacc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
 800aaca:	e009      	b.n	800aae0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d104      	bne.n	800aae0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800aad6:	2302      	movs	r3, #2
 800aad8:	73fb      	strb	r3, [r7, #15]
 800aada:	e001      	b.n	800aae0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800aadc:	2302      	movs	r3, #2
 800aade:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	53425355 	.word	0x53425355

0800aaf0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aafc:	2302      	movs	r3, #2
 800aafe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d002      	beq.n	800ab1a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d021      	beq.n	800ab5c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ab18:	e028      	b.n	800ab6c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	220a      	movs	r2, #10
 800ab2c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	3363      	adds	r3, #99	; 0x63
 800ab34:	2210      	movs	r2, #16
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f005 ff03 	bl	8010944 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2202      	movs	r2, #2
 800ab52:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800ab56:	2301      	movs	r3, #1
 800ab58:	73fb      	strb	r3, [r7, #15]
      break;
 800ab5a:	e007      	b.n	800ab6c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff fd83 	bl	800a66c <USBH_MSC_BOT_Process>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]
      break;
 800ab6a:	bf00      	nop
  }

  return error;
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b086      	sub	sp, #24
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	60f8      	str	r0, [r7, #12]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	607a      	str	r2, [r7, #4]
 800ab82:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ab84:	2301      	movs	r3, #1
 800ab86:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d002      	beq.n	800aba2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d027      	beq.n	800abf0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800aba0:	e05f      	b.n	800ac62 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2208      	movs	r2, #8
 800aba6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	2280      	movs	r2, #128	; 0x80
 800abac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	220a      	movs	r2, #10
 800abb4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	3363      	adds	r3, #99	; 0x63
 800abbc:	2210      	movs	r2, #16
 800abbe:	2100      	movs	r1, #0
 800abc0:	4618      	mov	r0, r3
 800abc2:	f005 febf 	bl	8010944 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2225      	movs	r2, #37	; 0x25
 800abca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	2202      	movs	r2, #2
 800abda:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f103 0210 	add.w	r2, r3, #16
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800abea:	2301      	movs	r3, #1
 800abec:	75fb      	strb	r3, [r7, #23]
      break;
 800abee:	e038      	b.n	800ac62 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800abf0:	7afb      	ldrb	r3, [r7, #11]
 800abf2:	4619      	mov	r1, r3
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7ff fd39 	bl	800a66c <USBH_MSC_BOT_Process>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d12d      	bne.n	800ac60 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac0a:	3303      	adds	r3, #3
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac16:	3302      	adds	r3, #2
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	021b      	lsls	r3, r3, #8
 800ac1c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac24:	3301      	adds	r3, #1
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac2a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	061b      	lsls	r3, r3, #24
 800ac36:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac42:	3307      	adds	r3, #7
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac4e:	3306      	adds	r3, #6
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	021b      	lsls	r3, r3, #8
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	809a      	strh	r2, [r3, #4]
      break;
 800ac60:	bf00      	nop
  }

  return error;
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3718      	adds	r7, #24
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	460b      	mov	r3, r1
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ac84:	69db      	ldr	r3, [r3, #28]
 800ac86:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d002      	beq.n	800ac98 <USBH_MSC_SCSI_Inquiry+0x2c>
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d03d      	beq.n	800ad12 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800ac96:	e089      	b.n	800adac <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	2224      	movs	r2, #36	; 0x24
 800ac9c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2280      	movs	r2, #128	; 0x80
 800aca2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	220a      	movs	r2, #10
 800acaa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	3363      	adds	r3, #99	; 0x63
 800acb2:	220a      	movs	r2, #10
 800acb4:	2100      	movs	r1, #0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f005 fe44 	bl	8010944 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	2212      	movs	r2, #18
 800acc0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800acc4:	7afb      	ldrb	r3, [r7, #11]
 800acc6:	015b      	lsls	r3, r3, #5
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	2224      	movs	r2, #36	; 0x24
 800ace4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2202      	movs	r2, #2
 800acfc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f103 0210 	add.w	r2, r3, #16
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ad10:	e04c      	b.n	800adac <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ad12:	7afb      	ldrb	r3, [r7, #11]
 800ad14:	4619      	mov	r1, r3
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f7ff fca8 	bl	800a66c <USBH_MSC_BOT_Process>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d141      	bne.n	800adaa <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800ad26:	2222      	movs	r2, #34	; 0x22
 800ad28:	2100      	movs	r1, #0
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f005 fe0a 	bl	8010944 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	f003 031f 	and.w	r3, r3, #31
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	095b      	lsrs	r3, r3, #5
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad58:	3301      	adds	r3, #1
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	b25b      	sxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	da03      	bge.n	800ad6a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	709a      	strb	r2, [r3, #2]
 800ad68:	e002      	b.n	800ad70 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	1cd8      	adds	r0, r3, #3
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	2208      	movs	r2, #8
 800ad7e:	4619      	mov	r1, r3
 800ad80:	f005 fdd5 	bl	801092e <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f103 000c 	add.w	r0, r3, #12
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad90:	3310      	adds	r3, #16
 800ad92:	2210      	movs	r2, #16
 800ad94:	4619      	mov	r1, r3
 800ad96:	f005 fdca 	bl	801092e <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	331d      	adds	r3, #29
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ada4:	3220      	adds	r2, #32
 800ada6:	6812      	ldr	r2, [r2, #0]
 800ada8:	601a      	str	r2, [r3, #0]
      break;
 800adaa:	bf00      	nop
  }

  return error;
 800adac:	7dfb      	ldrb	r3, [r7, #23]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b086      	sub	sp, #24
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	460b      	mov	r3, r1
 800adc0:	607a      	str	r2, [r7, #4]
 800adc2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800adc4:	2302      	movs	r3, #2
 800adc6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800add8:	2b01      	cmp	r3, #1
 800adda:	d002      	beq.n	800ade2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800addc:	2b02      	cmp	r3, #2
 800adde:	d03d      	beq.n	800ae5c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ade0:	e05d      	b.n	800ae9e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	220e      	movs	r2, #14
 800ade6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	2280      	movs	r2, #128	; 0x80
 800adec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	220a      	movs	r2, #10
 800adf4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	3363      	adds	r3, #99	; 0x63
 800adfc:	2210      	movs	r2, #16
 800adfe:	2100      	movs	r1, #0
 800ae00:	4618      	mov	r0, r3
 800ae02:	f005 fd9f 	bl	8010944 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	2203      	movs	r2, #3
 800ae0a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ae0e:	7afb      	ldrb	r3, [r7, #11]
 800ae10:	015b      	lsls	r3, r3, #5
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	220e      	movs	r2, #14
 800ae2e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	2202      	movs	r2, #2
 800ae46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	f103 0210 	add.w	r2, r3, #16
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae56:	2301      	movs	r3, #1
 800ae58:	75fb      	strb	r3, [r7, #23]
      break;
 800ae5a:	e020      	b.n	800ae9e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae5c:	7afb      	ldrb	r3, [r7, #11]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f7ff fc03 	bl	800a66c <USBH_MSC_BOT_Process>
 800ae66:	4603      	mov	r3, r0
 800ae68:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d115      	bne.n	800ae9c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae76:	3302      	adds	r3, #2
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	f003 030f 	and.w	r3, r3, #15
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae8a:	7b1a      	ldrb	r2, [r3, #12]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae96:	7b5a      	ldrb	r2, [r3, #13]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	709a      	strb	r2, [r3, #2]
      break;
 800ae9c:	bf00      	nop
  }

  return error;
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3718      	adds	r7, #24
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	607a      	str	r2, [r7, #4]
 800aeb2:	603b      	str	r3, [r7, #0]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aeb8:	2302      	movs	r3, #2
 800aeba:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d002      	beq.n	800aed6 <USBH_MSC_SCSI_Write+0x2e>
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d047      	beq.n	800af64 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800aed4:	e04e      	b.n	800af74 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800aedc:	461a      	mov	r2, r3
 800aede:	6a3b      	ldr	r3, [r7, #32]
 800aee0:	fb03 f202 	mul.w	r2, r3, r2
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	220a      	movs	r2, #10
 800aef4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	3363      	adds	r3, #99	; 0x63
 800aefc:	2210      	movs	r2, #16
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f005 fd1f 	bl	8010944 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	222a      	movs	r2, #42	; 0x2a
 800af0a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800af0e:	79fa      	ldrb	r2, [r7, #7]
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800af16:	79ba      	ldrb	r2, [r7, #6]
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800af1e:	797a      	ldrb	r2, [r7, #5]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800af26:	1d3b      	adds	r3, r7, #4
 800af28:	781a      	ldrb	r2, [r3, #0]
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800af30:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800af3a:	f107 0320 	add.w	r3, r7, #32
 800af3e:	781a      	ldrb	r2, [r3, #0]
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2201      	movs	r2, #1
 800af4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	2202      	movs	r2, #2
 800af52:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800af5e:	2301      	movs	r3, #1
 800af60:	75fb      	strb	r3, [r7, #23]
      break;
 800af62:	e007      	b.n	800af74 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af64:	7afb      	ldrb	r3, [r7, #11]
 800af66:	4619      	mov	r1, r3
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f7ff fb7f 	bl	800a66c <USBH_MSC_BOT_Process>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]
      break;
 800af72:	bf00      	nop
  }

  return error;
 800af74:	7dfb      	ldrb	r3, [r7, #23]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b086      	sub	sp, #24
 800af82:	af00      	add	r7, sp, #0
 800af84:	60f8      	str	r0, [r7, #12]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
 800af8a:	460b      	mov	r3, r1
 800af8c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800af8e:	2302      	movs	r3, #2
 800af90:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d002      	beq.n	800afac <USBH_MSC_SCSI_Read+0x2e>
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d047      	beq.n	800b03a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800afaa:	e04e      	b.n	800b04a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800afb2:	461a      	mov	r2, r3
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	fb03 f202 	mul.w	r2, r3, r2
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2280      	movs	r2, #128	; 0x80
 800afc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	220a      	movs	r2, #10
 800afca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3363      	adds	r3, #99	; 0x63
 800afd2:	2210      	movs	r2, #16
 800afd4:	2100      	movs	r1, #0
 800afd6:	4618      	mov	r0, r3
 800afd8:	f005 fcb4 	bl	8010944 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	2228      	movs	r2, #40	; 0x28
 800afe0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800afe4:	79fa      	ldrb	r2, [r7, #7]
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800afec:	79ba      	ldrb	r2, [r7, #6]
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800aff4:	797a      	ldrb	r2, [r7, #5]
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800affc:	1d3b      	adds	r3, r7, #4
 800affe:	781a      	ldrb	r2, [r3, #0]
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b006:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b010:	f107 0320 	add.w	r3, r7, #32
 800b014:	781a      	ldrb	r2, [r3, #0]
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	2202      	movs	r2, #2
 800b028:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b034:	2301      	movs	r3, #1
 800b036:	75fb      	strb	r3, [r7, #23]
      break;
 800b038:	e007      	b.n	800b04a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b03a:	7afb      	ldrb	r3, [r7, #11]
 800b03c:	4619      	mov	r1, r3
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff fb14 	bl	800a66c <USBH_MSC_BOT_Process>
 800b044:	4603      	mov	r3, r0
 800b046:	75fb      	strb	r3, [r7, #23]
      break;
 800b048:	bf00      	nop
  }

  return error;
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	4613      	mov	r3, r2
 800b060:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b068:	2302      	movs	r3, #2
 800b06a:	e029      	b.n	800b0c0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	79fa      	ldrb	r2, [r7, #7]
 800b070:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 f81f 	bl	800b0c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f005 f9c7 	bl	801044c <USBH_LL_Init>

  return USBH_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	e008      	b.n	800b0ec <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	32e0      	adds	r2, #224	; 0xe0
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b0e      	cmp	r3, #14
 800b0f0:	d9f3      	bls.n	800b0da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	e009      	b.n	800b10c <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b102:	2200      	movs	r2, #0
 800b104:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3301      	adds	r3, #1
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b112:	d3f1      	bcc.n	800b0f8 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2240      	movs	r2, #64	; 0x40
 800b138:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b15e:	b480      	push	{r7}
 800b160:	b085      	sub	sp, #20
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b168:	2300      	movs	r3, #0
 800b16a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d017      	beq.n	800b1a2 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10f      	bne.n	800b19c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b182:	1c59      	adds	r1, r3, #1
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	33dc      	adds	r3, #220	; 0xdc
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]
 800b19a:	e004      	b.n	800b1a6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b19c:	2302      	movs	r3, #2
 800b19e:	73fb      	strb	r3, [r7, #15]
 800b1a0:	e001      	b.n	800b1a6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b1a2:	2302      	movs	r3, #2
 800b1a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800b1ca:	78fa      	ldrb	r2, [r7, #3]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d204      	bcs.n	800b1da <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	78fa      	ldrb	r2, [r7, #3]
 800b1d4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 800b1d8:	e001      	b.n	800b1de <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b1da:	2302      	movs	r3, #2
 800b1dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	70fb      	strb	r3, [r7, #3]
 800b1fe:	460b      	mov	r3, r1
 800b200:	70bb      	strb	r3, [r7, #2]
 800b202:	4613      	mov	r3, r2
 800b204:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f203 3336 	addw	r3, r3, #822	; 0x336
 800b214:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b216:	e025      	b.n	800b264 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b218:	7dfb      	ldrb	r3, [r7, #23]
 800b21a:	221a      	movs	r2, #26
 800b21c:	fb02 f303 	mul.w	r3, r2, r3
 800b220:	3308      	adds	r3, #8
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	4413      	add	r3, r2
 800b226:	3302      	adds	r3, #2
 800b228:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	795b      	ldrb	r3, [r3, #5]
 800b22e:	78fa      	ldrb	r2, [r7, #3]
 800b230:	429a      	cmp	r2, r3
 800b232:	d002      	beq.n	800b23a <USBH_FindInterface+0x4e>
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	2bff      	cmp	r3, #255	; 0xff
 800b238:	d111      	bne.n	800b25e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b23e:	78ba      	ldrb	r2, [r7, #2]
 800b240:	429a      	cmp	r2, r3
 800b242:	d002      	beq.n	800b24a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b244:	78bb      	ldrb	r3, [r7, #2]
 800b246:	2bff      	cmp	r3, #255	; 0xff
 800b248:	d109      	bne.n	800b25e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b24e:	787a      	ldrb	r2, [r7, #1]
 800b250:	429a      	cmp	r2, r3
 800b252:	d002      	beq.n	800b25a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b254:	787b      	ldrb	r3, [r7, #1]
 800b256:	2bff      	cmp	r3, #255	; 0xff
 800b258:	d101      	bne.n	800b25e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
 800b25c:	e006      	b.n	800b26c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
 800b260:	3301      	adds	r3, #1
 800b262:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b264:	7dfb      	ldrb	r3, [r7, #23]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d9d6      	bls.n	800b218 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b26a:	23ff      	movs	r3, #255	; 0xff
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	371c      	adds	r7, #28
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f005 f91f 	bl	80104c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b286:	2101      	movs	r1, #1
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f005 fa36 	bl	80106fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af04      	add	r7, sp, #16
 800b29e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d102      	bne.n	800b2ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2203      	movs	r2, #3
 800b2b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b0b      	cmp	r3, #11
 800b2c2:	f200 8177 	bhi.w	800b5b4 <USBH_Process+0x31c>
 800b2c6:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <USBH_Process+0x34>)
 800b2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2cc:	0800b2fd 	.word	0x0800b2fd
 800b2d0:	0800b31f 	.word	0x0800b31f
 800b2d4:	0800b333 	.word	0x0800b333
 800b2d8:	0800b54f 	.word	0x0800b54f
 800b2dc:	0800b5b5 	.word	0x0800b5b5
 800b2e0:	0800b3d7 	.word	0x0800b3d7
 800b2e4:	0800b505 	.word	0x0800b505
 800b2e8:	0800b407 	.word	0x0800b407
 800b2ec:	0800b427 	.word	0x0800b427
 800b2f0:	0800b447 	.word	0x0800b447
 800b2f4:	0800b475 	.word	0x0800b475
 800b2f8:	0800b537 	.word	0x0800b537
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b302:	b2db      	uxtb	r3, r3
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 8157 	beq.w	800b5b8 <USBH_Process+0x320>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b310:	20c8      	movs	r0, #200	; 0xc8
 800b312:	f005 fa6f 	bl	80107f4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f005 f92f 	bl	801057a <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b31c:	e14c      	b.n	800b5b8 <USBH_Process+0x320>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b324:	2b01      	cmp	r3, #1
 800b326:	f040 8149 	bne.w	800b5bc <USBH_Process+0x324>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2202      	movs	r2, #2
 800b32e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b330:	e144      	b.n	800b5bc <USBH_Process+0x324>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d005      	beq.n	800b348 <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b342:	2104      	movs	r1, #4
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b348:	2064      	movs	r0, #100	; 0x64
 800b34a:	f005 fa53 	bl	80107f4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f005 f8ee 	bl	8010530 <USBH_LL_GetSpeed>
 800b354:	4603      	mov	r3, r0
 800b356:	461a      	mov	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2205      	movs	r2, #5
 800b362:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b364:	2100      	movs	r1, #0
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f001 f861 	bl	800c42e <USBH_AllocPipe>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461a      	mov	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b374:	2180      	movs	r1, #128	; 0x80
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f001 f859 	bl	800c42e <USBH_AllocPipe>
 800b37c:	4603      	mov	r3, r0
 800b37e:	461a      	mov	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	7919      	ldrb	r1, [r3, #4]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800b398:	b292      	uxth	r2, r2
 800b39a:	9202      	str	r2, [sp, #8]
 800b39c:	2200      	movs	r2, #0
 800b39e:	9201      	str	r2, [sp, #4]
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2280      	movs	r2, #128	; 0x80
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 f812 	bl	800c3d0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	7959      	ldrb	r1, [r3, #5]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800b3c0:	b292      	uxth	r2, r2
 800b3c2:	9202      	str	r2, [sp, #8]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	9201      	str	r2, [sp, #4]
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fffe 	bl	800c3d0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3d4:	e101      	b.n	800b5da <USBH_Process+0x342>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f904 	bl	800b5e4 <USBH_HandleEnum>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f040 80ee 	bne.w	800b5c0 <USBH_Process+0x328>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d103      	bne.n	800b3fe <USBH_Process+0x166>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2208      	movs	r2, #8
 800b3fa:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800b3fc:	e0e0      	b.n	800b5c0 <USBH_Process+0x328>
          phost->gState = HOST_INPUT;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2207      	movs	r2, #7
 800b402:	701a      	strb	r2, [r3, #0]
      break;
 800b404:	e0dc      	b.n	800b5c0 <USBH_Process+0x328>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 80d9 	beq.w	800b5c4 <USBH_Process+0x32c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b418:	2101      	movs	r1, #1
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2208      	movs	r2, #8
 800b422:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b424:	e0ce      	b.n	800b5c4 <USBH_Process+0x32c>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fb51 	bl	800bad8 <USBH_SetCfg>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f040 80c5 	bne.w	800b5c8 <USBH_Process+0x330>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2209      	movs	r2, #9
 800b442:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b444:	e0c0      	b.n	800b5c8 <USBH_Process+0x330>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b44c:	f003 0320 	and.w	r3, r3, #32
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <USBH_Process+0x1d4>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b454:	2101      	movs	r1, #1
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fb61 	bl	800bb1e <USBH_SetFeature>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f040 80b4 	bne.w	800b5cc <USBH_Process+0x334>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	220a      	movs	r2, #10
 800b468:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b46a:	e0af      	b.n	800b5cc <USBH_Process+0x334>
        phost->gState = HOST_CHECK_CLASS;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	220a      	movs	r2, #10
 800b470:	701a      	strb	r2, [r3, #0]
      break;
 800b472:	e0ab      	b.n	800b5cc <USBH_Process+0x334>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 80a8 	beq.w	800b5d0 <USBH_Process+0x338>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b488:	2300      	movs	r3, #0
 800b48a:	73fb      	strb	r3, [r7, #15]
 800b48c:	e017      	b.n	800b4be <USBH_Process+0x226>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	33dc      	adds	r3, #220	; 0xdc
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4413      	add	r3, r2
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	791a      	ldrb	r2, [r3, #4]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d108      	bne.n	800b4b8 <USBH_Process+0x220>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	33dc      	adds	r3, #220	; 0xdc
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4413      	add	r3, r2
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	73fb      	strb	r3, [r7, #15]
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0e4      	beq.n	800b48e <USBH_Process+0x1f6>
          }
        }

        if (phost->pActiveClass != NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d016      	beq.n	800b4fc <USBH_Process+0x264>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	4798      	blx	r3
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d109      	bne.n	800b4f4 <USBH_Process+0x25c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2206      	movs	r2, #6
 800b4e4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b4ec:	2103      	movs	r1, #3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b4f2:	e06d      	b.n	800b5d0 <USBH_Process+0x338>
            phost->gState = HOST_ABORT_STATE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	220d      	movs	r2, #13
 800b4f8:	701a      	strb	r2, [r3, #0]
      break;
 800b4fa:	e069      	b.n	800b5d0 <USBH_Process+0x338>
          phost->gState = HOST_ABORT_STATE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	220d      	movs	r2, #13
 800b500:	701a      	strb	r2, [r3, #0]
      break;
 800b502:	e065      	b.n	800b5d0 <USBH_Process+0x338>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00f      	beq.n	800b52e <USBH_Process+0x296>
      {
        status = phost->pActiveClass->Requests(phost);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	4798      	blx	r3
 800b51a:	4603      	mov	r3, r0
 800b51c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b51e:	7bbb      	ldrb	r3, [r7, #14]
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d156      	bne.n	800b5d4 <USBH_Process+0x33c>
        {
          phost->gState = HOST_CLASS;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	220b      	movs	r2, #11
 800b52a:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b52c:	e052      	b.n	800b5d4 <USBH_Process+0x33c>
        phost->gState = HOST_ABORT_STATE;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	220d      	movs	r2, #13
 800b532:	701a      	strb	r2, [r3, #0]
      break;
 800b534:	e04e      	b.n	800b5d4 <USBH_Process+0x33c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d04b      	beq.n	800b5d8 <USBH_Process+0x340>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	4798      	blx	r3
      }
      break;
 800b54c:	e044      	b.n	800b5d8 <USBH_Process+0x340>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff fdb6 	bl	800b0c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b562:	2b00      	cmp	r3, #0
 800b564:	d009      	beq.n	800b57a <USBH_Process+0x2e2>
      {
        phost->pActiveClass->DeInit(phost);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b580:	2b00      	cmp	r3, #0
 800b582:	d005      	beq.n	800b590 <USBH_Process+0x2f8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800b58a:	2105      	movs	r1, #5
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d107      	bne.n	800b5ac <USBH_Process+0x314>
      {
        phost->device.is_ReEnumerated = 0U;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7ff fe67 	bl	800b278 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b5aa:	e016      	b.n	800b5da <USBH_Process+0x342>
        USBH_LL_Start(phost);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f004 ff89 	bl	80104c4 <USBH_LL_Start>
      break;
 800b5b2:	e012      	b.n	800b5da <USBH_Process+0x342>

    case HOST_ABORT_STATE:
    default :
      break;
 800b5b4:	bf00      	nop
 800b5b6:	e010      	b.n	800b5da <USBH_Process+0x342>
      break;
 800b5b8:	bf00      	nop
 800b5ba:	e00e      	b.n	800b5da <USBH_Process+0x342>
      break;
 800b5bc:	bf00      	nop
 800b5be:	e00c      	b.n	800b5da <USBH_Process+0x342>
      break;
 800b5c0:	bf00      	nop
 800b5c2:	e00a      	b.n	800b5da <USBH_Process+0x342>
    break;
 800b5c4:	bf00      	nop
 800b5c6:	e008      	b.n	800b5da <USBH_Process+0x342>
      break;
 800b5c8:	bf00      	nop
 800b5ca:	e006      	b.n	800b5da <USBH_Process+0x342>
      break;
 800b5cc:	bf00      	nop
 800b5ce:	e004      	b.n	800b5da <USBH_Process+0x342>
      break;
 800b5d0:	bf00      	nop
 800b5d2:	e002      	b.n	800b5da <USBH_Process+0x342>
      break;
 800b5d4:	bf00      	nop
 800b5d6:	e000      	b.n	800b5da <USBH_Process+0x342>
      break;
 800b5d8:	bf00      	nop
  }
  return USBH_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b088      	sub	sp, #32
 800b5e8:	af04      	add	r7, sp, #16
 800b5ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	785b      	ldrb	r3, [r3, #1]
 800b5f4:	2b07      	cmp	r3, #7
 800b5f6:	f200 80f8 	bhi.w	800b7ea <USBH_HandleEnum+0x206>
 800b5fa:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <USBH_HandleEnum+0x1c>)
 800b5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b600:	0800b621 	.word	0x0800b621
 800b604:	0800b693 	.word	0x0800b693
 800b608:	0800b6ab 	.word	0x0800b6ab
 800b60c:	0800b721 	.word	0x0800b721
 800b610:	0800b737 	.word	0x0800b737
 800b614:	0800b753 	.word	0x0800b753
 800b618:	0800b787 	.word	0x0800b787
 800b61c:	0800b7bb 	.word	0x0800b7bb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800b620:	2108      	movs	r1, #8
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f988 	bl	800b938 <USBH_Get_DevDesc>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f040 80df 	bne.w	800b7ee <USBH_HandleEnum+0x20a>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	7919      	ldrb	r1, [r3, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800b654:	b292      	uxth	r2, r2
 800b656:	9202      	str	r2, [sp, #8]
 800b658:	2200      	movs	r2, #0
 800b65a:	9201      	str	r2, [sp, #4]
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	4603      	mov	r3, r0
 800b660:	2280      	movs	r2, #128	; 0x80
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 feb4 	bl	800c3d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	7959      	ldrb	r1, [r3, #5]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800b67c:	b292      	uxth	r2, r2
 800b67e:	9202      	str	r2, [sp, #8]
 800b680:	2200      	movs	r2, #0
 800b682:	9201      	str	r2, [sp, #4]
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	4603      	mov	r3, r0
 800b688:	2200      	movs	r2, #0
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fea0 	bl	800c3d0 <USBH_OpenPipe>
      }
      break;
 800b690:	e0ad      	b.n	800b7ee <USBH_HandleEnum+0x20a>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 800b692:	2112      	movs	r1, #18
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f94f 	bl	800b938 <USBH_Get_DevDesc>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f040 80a8 	bne.w	800b7f2 <USBH_HandleEnum+0x20e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	705a      	strb	r2, [r3, #1]

      }
      break;
 800b6a8:	e0a3      	b.n	800b7f2 <USBH_HandleEnum+0x20e>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f9ef 	bl	800ba90 <USBH_SetAddress>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f040 809e 	bne.w	800b7f6 <USBH_HandleEnum+0x212>
      {
        USBH_Delay(2U);
 800b6ba:	2002      	movs	r0, #2
 800b6bc:	f005 f89a 	bl	80107f4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	7919      	ldrb	r1, [r3, #4]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800b6e2:	b292      	uxth	r2, r2
 800b6e4:	9202      	str	r2, [sp, #8]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	9201      	str	r2, [sp, #4]
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2280      	movs	r2, #128	; 0x80
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fe6d 	bl	800c3d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	7959      	ldrb	r1, [r3, #5]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800b70a:	b292      	uxth	r2, r2
 800b70c:	9202      	str	r2, [sp, #8]
 800b70e:	2200      	movs	r2, #0
 800b710:	9201      	str	r2, [sp, #4]
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	4603      	mov	r3, r0
 800b716:	2200      	movs	r2, #0
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fe59 	bl	800c3d0 <USBH_OpenPipe>
      }
      break;
 800b71e:	e06a      	b.n	800b7f6 <USBH_HandleEnum+0x212>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 800b720:	2109      	movs	r1, #9
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f930 	bl	800b988 <USBH_Get_CfgDesc>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d165      	bne.n	800b7fa <USBH_HandleEnum+0x216>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2204      	movs	r2, #4
 800b732:	705a      	strb	r2, [r3, #1]
      }
      break;
 800b734:	e061      	b.n	800b7fa <USBH_HandleEnum+0x216>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f922 	bl	800b988 <USBH_Get_CfgDesc>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d159      	bne.n	800b7fe <USBH_HandleEnum+0x21a>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2205      	movs	r2, #5
 800b74e:	705a      	strb	r2, [r3, #1]
      }
      break;
 800b750:	e055      	b.n	800b7fe <USBH_HandleEnum+0x21a>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d010      	beq.n	800b77e <USBH_HandleEnum+0x19a>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800b768:	23ff      	movs	r3, #255	; 0xff
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f930 	bl	800b9d0 <USBH_Get_StringDesc>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d145      	bne.n	800b802 <USBH_HandleEnum+0x21e>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2206      	movs	r2, #6
 800b77a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b77c:	e041      	b.n	800b802 <USBH_HandleEnum+0x21e>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2206      	movs	r2, #6
 800b782:	705a      	strb	r2, [r3, #1]
      break;
 800b784:	e03d      	b.n	800b802 <USBH_HandleEnum+0x21e>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d010      	beq.n	800b7b2 <USBH_HandleEnum+0x1ce>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800b79c:	23ff      	movs	r3, #255	; 0xff
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f916 	bl	800b9d0 <USBH_Get_StringDesc>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d12d      	bne.n	800b806 <USBH_HandleEnum+0x222>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2207      	movs	r2, #7
 800b7ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b7b0:	e029      	b.n	800b806 <USBH_HandleEnum+0x222>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2207      	movs	r2, #7
 800b7b6:	705a      	strb	r2, [r3, #1]
      break;
 800b7b8:	e025      	b.n	800b806 <USBH_HandleEnum+0x222>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00f      	beq.n	800b7e4 <USBH_HandleEnum+0x200>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 800b7d0:	23ff      	movs	r3, #255	; 0xff
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f8fc 	bl	800b9d0 <USBH_Get_StringDesc>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d115      	bne.n	800b80a <USBH_HandleEnum+0x226>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b7e2:	e012      	b.n	800b80a <USBH_HandleEnum+0x226>
        Status = USBH_OK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7e8:	e00f      	b.n	800b80a <USBH_HandleEnum+0x226>

    default:
      break;
 800b7ea:	bf00      	nop
 800b7ec:	e00e      	b.n	800b80c <USBH_HandleEnum+0x228>
      break;
 800b7ee:	bf00      	nop
 800b7f0:	e00c      	b.n	800b80c <USBH_HandleEnum+0x228>
      break;
 800b7f2:	bf00      	nop
 800b7f4:	e00a      	b.n	800b80c <USBH_HandleEnum+0x228>
      break;
 800b7f6:	bf00      	nop
 800b7f8:	e008      	b.n	800b80c <USBH_HandleEnum+0x228>
      break;
 800b7fa:	bf00      	nop
 800b7fc:	e006      	b.n	800b80c <USBH_HandleEnum+0x228>
      break;
 800b7fe:	bf00      	nop
 800b800:	e004      	b.n	800b80c <USBH_HandleEnum+0x228>
      break;
 800b802:	bf00      	nop
 800b804:	e002      	b.n	800b80c <USBH_HandleEnum+0x228>
      break;
 800b806:	bf00      	nop
 800b808:	e000      	b.n	800b80c <USBH_HandleEnum+0x228>
      break;
 800b80a:	bf00      	nop
  }
  return Status;
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop

0800b818 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 800b82a:	bf00      	nop
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800b844:	1c5a      	adds	r2, r3, #1
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f804 	bl	800b85a <USBH_HandleSof>
}
 800b852:	bf00      	nop
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b0b      	cmp	r3, #11
 800b86a:	d10a      	bne.n	800b882 <USBH_HandleSof+0x28>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b872:	2b00      	cmp	r3, #0
 800b874:	d005      	beq.n	800b882 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	4798      	blx	r3
  }
}
 800b882:	bf00      	nop
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b083      	sub	sp, #12
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b89a:	bf00      	nop
}
 800b89c:	370c      	adds	r7, #12
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 800b8b6:	bf00      	nop
}
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b083      	sub	sp, #12
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	370c      	adds	r7, #12
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f004 fdf2 	bl	80104fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	791b      	ldrb	r3, [r3, #4]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fda6 	bl	800c46e <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	795b      	ldrb	r3, [r3, #5]
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fda0 	bl	800c46e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b92e:	2300      	movs	r3, #0
}
 800b930:	4618      	mov	r0, r3
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af02      	add	r7, sp, #8
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	460b      	mov	r3, r1
 800b942:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b94a:	78fb      	ldrb	r3, [r7, #3]
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	4613      	mov	r3, r2
 800b952:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b956:	2100      	movs	r1, #0
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 f864 	bl	800ba26 <USBH_GetDescriptor>
 800b95e:	4603      	mov	r3, r0
 800b960:	73fb      	strb	r3, [r7, #15]
 800b962:	7bfb      	ldrb	r3, [r7, #15]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f503 7049 	add.w	r0, r3, #804	; 0x324
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b974:	78fa      	ldrb	r2, [r7, #3]
 800b976:	b292      	uxth	r2, r2
 800b978:	4619      	mov	r1, r3
 800b97a:	f000 f918 	bl	800bbae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af02      	add	r7, sp, #8
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	331c      	adds	r3, #28
 800b998:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b99a:	887b      	ldrh	r3, [r7, #2]
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f83d 	bl	800ba26 <USBH_GetDescriptor>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	72fb      	strb	r3, [r7, #11]
 800b9b0:	7afb      	ldrb	r3, [r7, #11]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d107      	bne.n	800b9c6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f203 3336 	addw	r3, r3, #822	; 0x336
 800b9bc:	887a      	ldrh	r2, [r7, #2]
 800b9be:	68f9      	ldr	r1, [r7, #12]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f000 f964 	bl	800bc8e <USBH_ParseCfgDesc>
  }

  return status;
 800b9c6:	7afb      	ldrb	r3, [r7, #11]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af02      	add	r7, sp, #8
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	607a      	str	r2, [r7, #4]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	460b      	mov	r3, r1
 800b9de:	72fb      	strb	r3, [r7, #11]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b9ec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b9f4:	893b      	ldrh	r3, [r7, #8]
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f000 f812 	bl	800ba26 <USBH_GetDescriptor>
 800ba02:	4603      	mov	r3, r0
 800ba04:	75fb      	strb	r3, [r7, #23]
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d107      	bne.n	800ba1c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba12:	893a      	ldrh	r2, [r7, #8]
 800ba14:	6879      	ldr	r1, [r7, #4]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 fa37 	bl	800be8a <USBH_ParseStringDesc>
  }

  return status;
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3718      	adds	r7, #24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	607b      	str	r3, [r7, #4]
 800ba30:	460b      	mov	r3, r1
 800ba32:	72fb      	strb	r3, [r7, #11]
 800ba34:	4613      	mov	r3, r2
 800ba36:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	789b      	ldrb	r3, [r3, #2]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d11c      	bne.n	800ba7a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2206      	movs	r2, #6
 800ba50:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	893a      	ldrh	r2, [r7, #8]
 800ba56:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ba58:	893b      	ldrh	r3, [r7, #8]
 800ba5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba62:	d104      	bne.n	800ba6e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f240 4209 	movw	r2, #1033	; 0x409
 800ba6a:	829a      	strh	r2, [r3, #20]
 800ba6c:	e002      	b.n	800ba74 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	8b3a      	ldrh	r2, [r7, #24]
 800ba78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ba7a:	8b3b      	ldrh	r3, [r7, #24]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f000 fa50 	bl	800bf26 <USBH_CtlReq>
 800ba86:	4603      	mov	r3, r0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	789b      	ldrb	r3, [r3, #2]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d10f      	bne.n	800bac4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2205      	movs	r2, #5
 800baae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bac4:	2200      	movs	r2, #0
 800bac6:	2100      	movs	r1, #0
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fa2c 	bl	800bf26 <USBH_CtlReq>
 800bace:	4603      	mov	r3, r0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	460b      	mov	r3, r1
 800bae2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	789b      	ldrb	r3, [r3, #2]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d10e      	bne.n	800bb0a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2209      	movs	r2, #9
 800baf6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	887a      	ldrh	r2, [r7, #2]
 800bafc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fa09 	bl	800bf26 <USBH_CtlReq>
 800bb14:	4603      	mov	r3, r0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b082      	sub	sp, #8
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	460b      	mov	r3, r1
 800bb28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	789b      	ldrb	r3, [r3, #2]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d10f      	bne.n	800bb52 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2203      	movs	r2, #3
 800bb3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bb3e:	78fb      	ldrb	r3, [r7, #3]
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb52:	2200      	movs	r2, #0
 800bb54:	2100      	movs	r1, #0
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f9e5 	bl	800bf26 <USBH_CtlReq>
 800bb5c:	4603      	mov	r3, r0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	789b      	ldrb	r3, [r3, #2]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d10f      	bne.n	800bb9a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bb8c:	78fb      	ldrb	r3, [r7, #3]
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f9c1 	bl	800bf26 <USBH_CtlReq>
 800bba4:	4603      	mov	r3, r0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b085      	sub	sp, #20
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	60f8      	str	r0, [r7, #12]
 800bbb6:	60b9      	str	r1, [r7, #8]
 800bbb8:	4613      	mov	r3, r2
 800bbba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	781a      	ldrb	r2, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	785a      	ldrb	r2, [r3, #1]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	3302      	adds	r3, #2
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	3303      	adds	r3, #3
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	021b      	lsls	r3, r3, #8
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	791a      	ldrb	r2, [r3, #4]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	795a      	ldrb	r2, [r3, #5]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	799a      	ldrb	r2, [r3, #6]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	79da      	ldrb	r2, [r3, #7]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bc08:	88fb      	ldrh	r3, [r7, #6]
 800bc0a:	2b08      	cmp	r3, #8
 800bc0c:	d939      	bls.n	800bc82 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	3308      	adds	r3, #8
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	3309      	adds	r3, #9
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	021b      	lsls	r3, r3, #8
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	4313      	orrs	r3, r2
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	330a      	adds	r3, #10
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	330b      	adds	r3, #11
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	021b      	lsls	r3, r3, #8
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	330c      	adds	r3, #12
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	330d      	adds	r3, #13
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	7b9a      	ldrb	r2, [r3, #14]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	7bda      	ldrb	r2, [r3, #15]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	7c1a      	ldrb	r2, [r3, #16]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	7c5a      	ldrb	r2, [r3, #17]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	745a      	strb	r2, [r3, #17]
  }
}
 800bc82:	bf00      	nop
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b08a      	sub	sp, #40	; 0x28
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	60f8      	str	r0, [r7, #12]
 800bc96:	60b9      	str	r1, [r7, #8]
 800bc98:	4613      	mov	r3, r2
 800bc9a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bca0:	2300      	movs	r3, #0
 800bca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bca6:	2300      	movs	r3, #0
 800bca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	781a      	ldrb	r2, [r3, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	785a      	ldrb	r2, [r3, #1]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	3302      	adds	r3, #2
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	3303      	adds	r3, #3
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	021b      	lsls	r3, r3, #8
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	791a      	ldrb	r2, [r3, #4]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	795a      	ldrb	r2, [r3, #5]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	799a      	ldrb	r2, [r3, #6]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	79da      	ldrb	r2, [r3, #7]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	7a1a      	ldrb	r2, [r3, #8]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bd04:	88fb      	ldrh	r3, [r7, #6]
 800bd06:	2b09      	cmp	r3, #9
 800bd08:	d95f      	bls.n	800bdca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bd0a:	2309      	movs	r3, #9
 800bd0c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bd12:	e051      	b.n	800bdb8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd14:	f107 0316 	add.w	r3, r7, #22
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd1c:	f000 f8e8 	bl	800bef0 <USBH_GetNextDesc>
 800bd20:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd24:	785b      	ldrb	r3, [r3, #1]
 800bd26:	2b04      	cmp	r3, #4
 800bd28:	d146      	bne.n	800bdb8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bd2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd2e:	221a      	movs	r2, #26
 800bd30:	fb02 f303 	mul.w	r3, r2, r3
 800bd34:	3308      	adds	r3, #8
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	4413      	add	r3, r2
 800bd3a:	3302      	adds	r3, #2
 800bd3c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bd3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd40:	69f8      	ldr	r0, [r7, #28]
 800bd42:	f000 f846 	bl	800bdd2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bd46:	2300      	movs	r3, #0
 800bd48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd50:	e022      	b.n	800bd98 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd52:	f107 0316 	add.w	r3, r7, #22
 800bd56:	4619      	mov	r1, r3
 800bd58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd5a:	f000 f8c9 	bl	800bef0 <USBH_GetNextDesc>
 800bd5e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	785b      	ldrb	r3, [r3, #1]
 800bd64:	2b05      	cmp	r3, #5
 800bd66:	d117      	bne.n	800bd98 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bd68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bd70:	3201      	adds	r2, #1
 800bd72:	00d2      	lsls	r2, r2, #3
 800bd74:	211a      	movs	r1, #26
 800bd76:	fb01 f303 	mul.w	r3, r1, r3
 800bd7a:	4413      	add	r3, r2
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	3304      	adds	r3, #4
 800bd84:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bd86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd88:	69b8      	ldr	r0, [r7, #24]
 800bd8a:	f000 f851 	bl	800be30 <USBH_ParseEPDesc>
            ep_ix++;
 800bd8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bd92:	3301      	adds	r3, #1
 800bd94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	791b      	ldrb	r3, [r3, #4]
 800bd9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d204      	bcs.n	800bdae <USBH_ParseCfgDesc+0x120>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	885a      	ldrh	r2, [r3, #2]
 800bda8:	8afb      	ldrh	r3, [r7, #22]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d8d1      	bhi.n	800bd52 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bdae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bdb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d804      	bhi.n	800bdca <USBH_ParseCfgDesc+0x13c>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	885a      	ldrh	r2, [r3, #2]
 800bdc4:	8afb      	ldrh	r3, [r7, #22]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d8a4      	bhi.n	800bd14 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bdca:	bf00      	nop
 800bdcc:	3728      	adds	r7, #40	; 0x28
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b083      	sub	sp, #12
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	781a      	ldrb	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	785a      	ldrb	r2, [r3, #1]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	789a      	ldrb	r2, [r3, #2]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	78da      	ldrb	r2, [r3, #3]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	791a      	ldrb	r2, [r3, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	795a      	ldrb	r2, [r3, #5]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	799a      	ldrb	r2, [r3, #6]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	79da      	ldrb	r2, [r3, #7]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	7a1a      	ldrb	r2, [r3, #8]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	721a      	strb	r2, [r3, #8]
}
 800be24:	bf00      	nop
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	785a      	ldrb	r2, [r3, #1]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	789a      	ldrb	r2, [r3, #2]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	78da      	ldrb	r2, [r3, #3]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	3304      	adds	r3, #4
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	b29a      	uxth	r2, r3
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	3305      	adds	r3, #5
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	b29b      	uxth	r3, r3
 800be6a:	021b      	lsls	r3, r3, #8
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	4313      	orrs	r3, r2
 800be70:	b29a      	uxth	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	799a      	ldrb	r2, [r3, #6]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	719a      	strb	r2, [r3, #6]
}
 800be7e:	bf00      	nop
 800be80:	370c      	adds	r7, #12
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr

0800be8a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800be8a:	b480      	push	{r7}
 800be8c:	b087      	sub	sp, #28
 800be8e:	af00      	add	r7, sp, #0
 800be90:	60f8      	str	r0, [r7, #12]
 800be92:	60b9      	str	r1, [r7, #8]
 800be94:	4613      	mov	r3, r2
 800be96:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3301      	adds	r3, #1
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d120      	bne.n	800bee4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	1e9a      	subs	r2, r3, #2
 800bea8:	88fb      	ldrh	r3, [r7, #6]
 800beaa:	4293      	cmp	r3, r2
 800beac:	bf28      	it	cs
 800beae:	4613      	movcs	r3, r2
 800beb0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	3302      	adds	r3, #2
 800beb6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800beb8:	2300      	movs	r3, #0
 800beba:	82fb      	strh	r3, [r7, #22]
 800bebc:	e00b      	b.n	800bed6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bebe:	8afb      	ldrh	r3, [r7, #22]
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	4413      	add	r3, r2
 800bec4:	781a      	ldrb	r2, [r3, #0]
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	3301      	adds	r3, #1
 800bece:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bed0:	8afb      	ldrh	r3, [r7, #22]
 800bed2:	3302      	adds	r3, #2
 800bed4:	82fb      	strh	r3, [r7, #22]
 800bed6:	8afa      	ldrh	r2, [r7, #22]
 800bed8:	8abb      	ldrh	r3, [r7, #20]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d3ef      	bcc.n	800bebe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	2200      	movs	r2, #0
 800bee2:	701a      	strb	r2, [r3, #0]
  }
}
 800bee4:	bf00      	nop
 800bee6:	371c      	adds	r7, #28
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	881a      	ldrh	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	4413      	add	r3, r2
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4413      	add	r3, r2
 800bf16:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf18:	68fb      	ldr	r3, [r7, #12]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b086      	sub	sp, #24
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	4613      	mov	r3, r2
 800bf32:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bf34:	2301      	movs	r3, #1
 800bf36:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	789b      	ldrb	r3, [r3, #2]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d002      	beq.n	800bf46 <USBH_CtlReq+0x20>
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d00f      	beq.n	800bf64 <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800bf44:	e034      	b.n	800bfb0 <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	88fa      	ldrh	r2, [r7, #6]
 800bf50:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2201      	movs	r2, #1
 800bf56:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	75fb      	strb	r3, [r7, #23]
      break;
 800bf62:	e025      	b.n	800bfb0 <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f000 f829 	bl	800bfbc <USBH_HandleControl>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d108      	bne.n	800bf86 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2201      	movs	r2, #1
 800bf78:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	75fb      	strb	r3, [r7, #23]
      break;
 800bf84:	e013      	b.n	800bfae <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d108      	bne.n	800bf9e <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf9c:	e007      	b.n	800bfae <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d104      	bne.n	800bfae <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 800bfaa:	2302      	movs	r3, #2
 800bfac:	75fb      	strb	r3, [r7, #23]
      break;
 800bfae:	bf00      	nop
  }
  return status;
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af02      	add	r7, sp, #8
 800bfc2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	7e1b      	ldrb	r3, [r3, #24]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	2b0a      	cmp	r3, #10
 800bfd4:	f200 814c 	bhi.w	800c270 <USBH_HandleControl+0x2b4>
 800bfd8:	a201      	add	r2, pc, #4	; (adr r2, 800bfe0 <USBH_HandleControl+0x24>)
 800bfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfde:	bf00      	nop
 800bfe0:	0800c00d 	.word	0x0800c00d
 800bfe4:	0800c027 	.word	0x0800c027
 800bfe8:	0800c091 	.word	0x0800c091
 800bfec:	0800c0b7 	.word	0x0800c0b7
 800bff0:	0800c0ef 	.word	0x0800c0ef
 800bff4:	0800c11b 	.word	0x0800c11b
 800bff8:	0800c16d 	.word	0x0800c16d
 800bffc:	0800c18f 	.word	0x0800c18f
 800c000:	0800c1cb 	.word	0x0800c1cb
 800c004:	0800c1f3 	.word	0x0800c1f3
 800c008:	0800c231 	.word	0x0800c231
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f103 0110 	add.w	r1, r3, #16
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	795b      	ldrb	r3, [r3, #5]
 800c016:	461a      	mov	r2, r3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f939 	bl	800c290 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2202      	movs	r2, #2
 800c022:	761a      	strb	r2, [r3, #24]
      break;
 800c024:	e12f      	b.n	800c286 <USBH_HandleControl+0x2ca>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	795b      	ldrb	r3, [r3, #5]
 800c02a:	4619      	mov	r1, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f004 fb51 	bl	80106d4 <USBH_LL_GetURBState>
 800c032:	4603      	mov	r3, r0
 800c034:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c036:	7bbb      	ldrb	r3, [r7, #14]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d11e      	bne.n	800c07a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	7c1b      	ldrb	r3, [r3, #16]
 800c040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c044:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	8adb      	ldrh	r3, [r3, #22]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00a      	beq.n	800c064 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c04e:	7b7b      	ldrb	r3, [r7, #13]
 800c050:	2b80      	cmp	r3, #128	; 0x80
 800c052:	d103      	bne.n	800c05c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2203      	movs	r2, #3
 800c058:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c05a:	e10b      	b.n	800c274 <USBH_HandleControl+0x2b8>
            phost->Control.state = CTRL_DATA_OUT;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2205      	movs	r2, #5
 800c060:	761a      	strb	r2, [r3, #24]
      break;
 800c062:	e107      	b.n	800c274 <USBH_HandleControl+0x2b8>
          if (direction == USB_D2H)
 800c064:	7b7b      	ldrb	r3, [r7, #13]
 800c066:	2b80      	cmp	r3, #128	; 0x80
 800c068:	d103      	bne.n	800c072 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2209      	movs	r2, #9
 800c06e:	761a      	strb	r2, [r3, #24]
      break;
 800c070:	e100      	b.n	800c274 <USBH_HandleControl+0x2b8>
            phost->Control.state = CTRL_STATUS_IN;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2207      	movs	r2, #7
 800c076:	761a      	strb	r2, [r3, #24]
      break;
 800c078:	e0fc      	b.n	800c274 <USBH_HandleControl+0x2b8>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c07a:	7bbb      	ldrb	r3, [r7, #14]
 800c07c:	2b04      	cmp	r3, #4
 800c07e:	d003      	beq.n	800c088 <USBH_HandleControl+0xcc>
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	2b02      	cmp	r3, #2
 800c084:	f040 80f6 	bne.w	800c274 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	220b      	movs	r2, #11
 800c08c:	761a      	strb	r2, [r3, #24]
      break;
 800c08e:	e0f1      	b.n	800c274 <USBH_HandleControl+0x2b8>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6899      	ldr	r1, [r3, #8]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	899a      	ldrh	r2, [r3, #12]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	791b      	ldrb	r3, [r3, #4]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f930 	bl	800c30e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2204      	movs	r2, #4
 800c0b2:	761a      	strb	r2, [r3, #24]
      break;
 800c0b4:	e0e7      	b.n	800c286 <USBH_HandleControl+0x2ca>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	791b      	ldrb	r3, [r3, #4]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f004 fb09 	bl	80106d4 <USBH_LL_GetURBState>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c0c6:	7bbb      	ldrb	r3, [r7, #14]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d102      	bne.n	800c0d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2209      	movs	r2, #9
 800c0d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c0d2:	7bbb      	ldrb	r3, [r7, #14]
 800c0d4:	2b05      	cmp	r3, #5
 800c0d6:	d102      	bne.n	800c0de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c0d8:	2303      	movs	r3, #3
 800c0da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c0dc:	e0cc      	b.n	800c278 <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 800c0de:	7bbb      	ldrb	r3, [r7, #14]
 800c0e0:	2b04      	cmp	r3, #4
 800c0e2:	f040 80c9 	bne.w	800c278 <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	220b      	movs	r2, #11
 800c0ea:	761a      	strb	r2, [r3, #24]
      break;
 800c0ec:	e0c4      	b.n	800c278 <USBH_HandleControl+0x2bc>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6899      	ldr	r1, [r3, #8]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	899a      	ldrh	r2, [r3, #12]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	7958      	ldrb	r0, [r3, #5]
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	4603      	mov	r3, r0
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f8df 	bl	800c2c4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2206      	movs	r2, #6
 800c116:	761a      	strb	r2, [r3, #24]
      break;
 800c118:	e0b5      	b.n	800c286 <USBH_HandleControl+0x2ca>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	795b      	ldrb	r3, [r3, #5]
 800c11e:	4619      	mov	r1, r3
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f004 fad7 	bl	80106d4 <USBH_LL_GetURBState>
 800c126:	4603      	mov	r3, r0
 800c128:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c12a:	7bbb      	ldrb	r3, [r7, #14]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d103      	bne.n	800c138 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2207      	movs	r2, #7
 800c134:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c136:	e0a1      	b.n	800c27c <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_STALL)
 800c138:	7bbb      	ldrb	r3, [r7, #14]
 800c13a:	2b05      	cmp	r3, #5
 800c13c:	d105      	bne.n	800c14a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	220c      	movs	r2, #12
 800c142:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c144:	2303      	movs	r3, #3
 800c146:	73fb      	strb	r3, [r7, #15]
      break;
 800c148:	e098      	b.n	800c27c <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d103      	bne.n	800c158 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2205      	movs	r2, #5
 800c154:	761a      	strb	r2, [r3, #24]
      break;
 800c156:	e091      	b.n	800c27c <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_ERROR)
 800c158:	7bbb      	ldrb	r3, [r7, #14]
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	f040 808e 	bne.w	800c27c <USBH_HandleControl+0x2c0>
          phost->Control.state = CTRL_ERROR;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	220b      	movs	r2, #11
 800c164:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c166:	2302      	movs	r3, #2
 800c168:	73fb      	strb	r3, [r7, #15]
      break;
 800c16a:	e087      	b.n	800c27c <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	791b      	ldrb	r3, [r3, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	2100      	movs	r1, #0
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f8ca 	bl	800c30e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800c180:	b29a      	uxth	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2208      	movs	r2, #8
 800c18a:	761a      	strb	r2, [r3, #24]

      break;
 800c18c:	e07b      	b.n	800c286 <USBH_HandleControl+0x2ca>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	791b      	ldrb	r3, [r3, #4]
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f004 fa9d 	bl	80106d4 <USBH_LL_GetURBState>
 800c19a:	4603      	mov	r3, r0
 800c19c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d105      	bne.n	800c1b0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	220d      	movs	r2, #13
 800c1a8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c1ae:	e067      	b.n	800c280 <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_ERROR)
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	2b04      	cmp	r3, #4
 800c1b4:	d103      	bne.n	800c1be <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	220b      	movs	r2, #11
 800c1ba:	761a      	strb	r2, [r3, #24]
      break;
 800c1bc:	e060      	b.n	800c280 <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_STALL)
 800c1be:	7bbb      	ldrb	r3, [r7, #14]
 800c1c0:	2b05      	cmp	r3, #5
 800c1c2:	d15d      	bne.n	800c280 <USBH_HandleControl+0x2c4>
          status = USBH_NOT_SUPPORTED;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c1c8:	e05a      	b.n	800c280 <USBH_HandleControl+0x2c4>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	795a      	ldrb	r2, [r3, #5]
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f873 	bl	800c2c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	220a      	movs	r2, #10
 800c1ee:	761a      	strb	r2, [r3, #24]
      break;
 800c1f0:	e049      	b.n	800c286 <USBH_HandleControl+0x2ca>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	795b      	ldrb	r3, [r3, #5]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f004 fa6b 	bl	80106d4 <USBH_LL_GetURBState>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c202:	7bbb      	ldrb	r3, [r7, #14]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d105      	bne.n	800c214 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	220d      	movs	r2, #13
 800c210:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c212:	e037      	b.n	800c284 <USBH_HandleControl+0x2c8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	2b02      	cmp	r3, #2
 800c218:	d103      	bne.n	800c222 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2209      	movs	r2, #9
 800c21e:	761a      	strb	r2, [r3, #24]
      break;
 800c220:	e030      	b.n	800c284 <USBH_HandleControl+0x2c8>
        if (URB_Status == USBH_URB_ERROR)
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	2b04      	cmp	r3, #4
 800c226:	d12d      	bne.n	800c284 <USBH_HandleControl+0x2c8>
          phost->Control.state = CTRL_ERROR;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	220b      	movs	r2, #11
 800c22c:	761a      	strb	r2, [r3, #24]
      break;
 800c22e:	e029      	b.n	800c284 <USBH_HandleControl+0x2c8>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	7e5b      	ldrb	r3, [r3, #25]
 800c234:	3301      	adds	r3, #1
 800c236:	b2da      	uxtb	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	765a      	strb	r2, [r3, #25]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7e5b      	ldrb	r3, [r3, #25]
 800c240:	2b02      	cmp	r3, #2
 800c242:	d806      	bhi.n	800c252 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c250:	e019      	b.n	800c286 <USBH_HandleControl+0x2ca>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c258:	2106      	movs	r1, #6
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c26a:	2302      	movs	r3, #2
 800c26c:	73fb      	strb	r3, [r7, #15]
      break;
 800c26e:	e00a      	b.n	800c286 <USBH_HandleControl+0x2ca>

    default:
      break;
 800c270:	bf00      	nop
 800c272:	e008      	b.n	800c286 <USBH_HandleControl+0x2ca>
      break;
 800c274:	bf00      	nop
 800c276:	e006      	b.n	800c286 <USBH_HandleControl+0x2ca>
      break;
 800c278:	bf00      	nop
 800c27a:	e004      	b.n	800c286 <USBH_HandleControl+0x2ca>
      break;
 800c27c:	bf00      	nop
 800c27e:	e002      	b.n	800c286 <USBH_HandleControl+0x2ca>
      break;
 800c280:	bf00      	nop
 800c282:	e000      	b.n	800c286 <USBH_HandleControl+0x2ca>
      break;
 800c284:	bf00      	nop
  }

  return status;
 800c286:	7bfb      	ldrb	r3, [r7, #15]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af04      	add	r7, sp, #16
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	4613      	mov	r3, r2
 800c29c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c29e:	79f9      	ldrb	r1, [r7, #7]
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	9303      	str	r3, [sp, #12]
 800c2a4:	2308      	movs	r3, #8
 800c2a6:	9302      	str	r3, [sp, #8]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f004 f9dc 	bl	8010672 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b088      	sub	sp, #32
 800c2c8:	af04      	add	r7, sp, #16
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	4611      	mov	r1, r2
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	80fb      	strh	r3, [r7, #6]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d001      	beq.n	800c2e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c2e8:	7979      	ldrb	r1, [r7, #5]
 800c2ea:	7e3b      	ldrb	r3, [r7, #24]
 800c2ec:	9303      	str	r3, [sp, #12]
 800c2ee:	88fb      	ldrh	r3, [r7, #6]
 800c2f0:	9302      	str	r3, [sp, #8]
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	9301      	str	r3, [sp, #4]
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f004 f9b7 	bl	8010672 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b088      	sub	sp, #32
 800c312:	af04      	add	r7, sp, #16
 800c314:	60f8      	str	r0, [r7, #12]
 800c316:	60b9      	str	r1, [r7, #8]
 800c318:	4611      	mov	r1, r2
 800c31a:	461a      	mov	r2, r3
 800c31c:	460b      	mov	r3, r1
 800c31e:	80fb      	strh	r3, [r7, #6]
 800c320:	4613      	mov	r3, r2
 800c322:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c324:	7979      	ldrb	r1, [r7, #5]
 800c326:	2300      	movs	r3, #0
 800c328:	9303      	str	r3, [sp, #12]
 800c32a:	88fb      	ldrh	r3, [r7, #6]
 800c32c:	9302      	str	r3, [sp, #8]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	9301      	str	r3, [sp, #4]
 800c332:	2301      	movs	r3, #1
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	2300      	movs	r3, #0
 800c338:	2201      	movs	r2, #1
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f004 f999 	bl	8010672 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c340:	2300      	movs	r3, #0

}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b088      	sub	sp, #32
 800c34e:	af04      	add	r7, sp, #16
 800c350:	60f8      	str	r0, [r7, #12]
 800c352:	60b9      	str	r1, [r7, #8]
 800c354:	4611      	mov	r1, r2
 800c356:	461a      	mov	r2, r3
 800c358:	460b      	mov	r3, r1
 800c35a:	80fb      	strh	r3, [r7, #6]
 800c35c:	4613      	mov	r3, r2
 800c35e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c36e:	7979      	ldrb	r1, [r7, #5]
 800c370:	7e3b      	ldrb	r3, [r7, #24]
 800c372:	9303      	str	r3, [sp, #12]
 800c374:	88fb      	ldrh	r3, [r7, #6]
 800c376:	9302      	str	r3, [sp, #8]
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	9301      	str	r3, [sp, #4]
 800c37c:	2301      	movs	r3, #1
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	2302      	movs	r3, #2
 800c382:	2200      	movs	r2, #0
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f004 f974 	bl	8010672 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b088      	sub	sp, #32
 800c398:	af04      	add	r7, sp, #16
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	4611      	mov	r1, r2
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	80fb      	strh	r3, [r7, #6]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3aa:	7979      	ldrb	r1, [r7, #5]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	9303      	str	r3, [sp, #12]
 800c3b0:	88fb      	ldrh	r3, [r7, #6]
 800c3b2:	9302      	str	r3, [sp, #8]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	9301      	str	r3, [sp, #4]
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	2302      	movs	r3, #2
 800c3be:	2201      	movs	r2, #1
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f004 f956 	bl	8010672 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af04      	add	r7, sp, #16
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	4608      	mov	r0, r1
 800c3da:	4611      	mov	r1, r2
 800c3dc:	461a      	mov	r2, r3
 800c3de:	4603      	mov	r3, r0
 800c3e0:	70fb      	strb	r3, [r7, #3]
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	70bb      	strb	r3, [r7, #2]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c3ea:	7878      	ldrb	r0, [r7, #1]
 800c3ec:	78ba      	ldrb	r2, [r7, #2]
 800c3ee:	78f9      	ldrb	r1, [r7, #3]
 800c3f0:	8b3b      	ldrh	r3, [r7, #24]
 800c3f2:	9302      	str	r3, [sp, #8]
 800c3f4:	7d3b      	ldrb	r3, [r7, #20]
 800c3f6:	9301      	str	r3, [sp, #4]
 800c3f8:	7c3b      	ldrb	r3, [r7, #16]
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f004 f8e9 	bl	80105d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b082      	sub	sp, #8
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	460b      	mov	r3, r1
 800c418:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c41a:	78fb      	ldrb	r3, [r7, #3]
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f004 f908 	bl	8010634 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b084      	sub	sp, #16
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	460b      	mov	r3, r1
 800c438:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f833 	bl	800c4a6 <USBH_GetFreePipe>
 800c440:	4603      	mov	r3, r0
 800c442:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c444:	89fb      	ldrh	r3, [r7, #14]
 800c446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d009      	beq.n	800c462 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c44e:	78fb      	ldrb	r3, [r7, #3]
 800c450:	89fa      	ldrh	r2, [r7, #14]
 800c452:	f002 020f 	and.w	r2, r2, #15
 800c456:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	32e0      	adds	r2, #224	; 0xe0
 800c45e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 800c462:	89fb      	ldrh	r3, [r7, #14]
 800c464:	b2db      	uxtb	r3, r3
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c46e:	b480      	push	{r7}
 800c470:	b083      	sub	sp, #12
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
 800c476:	460b      	mov	r3, r1
 800c478:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c47a:	78fb      	ldrb	r3, [r7, #3]
 800c47c:	2b0a      	cmp	r3, #10
 800c47e:	d80b      	bhi.n	800c498 <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c480:	78fa      	ldrb	r2, [r7, #3]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	32e0      	adds	r2, #224	; 0xe0
 800c486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c48a:	78fa      	ldrb	r2, [r7, #3]
 800c48c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	32e0      	adds	r2, #224	; 0xe0
 800c494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	b085      	sub	sp, #20
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	73fb      	strb	r3, [r7, #15]
 800c4b6:	e00e      	b.n	800c4d6 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c4b8:	7bfa      	ldrb	r2, [r7, #15]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	32e0      	adds	r2, #224	; 0xe0
 800c4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d102      	bne.n	800c4d0 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	e007      	b.n	800c4e0 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800c4d0:	7bfb      	ldrb	r3, [r7, #15]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	73fb      	strb	r3, [r7, #15]
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
 800c4d8:	2b0a      	cmp	r3, #10
 800c4da:	d9ed      	bls.n	800c4b8 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c4dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c4f6:	79fb      	ldrb	r3, [r7, #7]
 800c4f8:	4a08      	ldr	r2, [pc, #32]	; (800c51c <disk_status+0x30>)
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	79fa      	ldrb	r2, [r7, #7]
 800c504:	4905      	ldr	r1, [pc, #20]	; (800c51c <disk_status+0x30>)
 800c506:	440a      	add	r2, r1
 800c508:	7a12      	ldrb	r2, [r2, #8]
 800c50a:	4610      	mov	r0, r2
 800c50c:	4798      	blx	r3
 800c50e:	4603      	mov	r3, r0
 800c510:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c512:	7bfb      	ldrb	r3, [r7, #15]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	20001df0 	.word	0x20001df0

0800c520 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	4603      	mov	r3, r0
 800c528:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c52e:	79fb      	ldrb	r3, [r7, #7]
 800c530:	4a0d      	ldr	r2, [pc, #52]	; (800c568 <disk_initialize+0x48>)
 800c532:	5cd3      	ldrb	r3, [r2, r3]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d111      	bne.n	800c55c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c538:	79fb      	ldrb	r3, [r7, #7]
 800c53a:	4a0b      	ldr	r2, [pc, #44]	; (800c568 <disk_initialize+0x48>)
 800c53c:	2101      	movs	r1, #1
 800c53e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c540:	79fb      	ldrb	r3, [r7, #7]
 800c542:	4a09      	ldr	r2, [pc, #36]	; (800c568 <disk_initialize+0x48>)
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	4413      	add	r3, r2
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	79fa      	ldrb	r2, [r7, #7]
 800c54e:	4906      	ldr	r1, [pc, #24]	; (800c568 <disk_initialize+0x48>)
 800c550:	440a      	add	r2, r1
 800c552:	7a12      	ldrb	r2, [r2, #8]
 800c554:	4610      	mov	r0, r2
 800c556:	4798      	blx	r3
 800c558:	4603      	mov	r3, r0
 800c55a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	20001df0 	.word	0x20001df0

0800c56c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c56c:	b590      	push	{r4, r7, lr}
 800c56e:	b087      	sub	sp, #28
 800c570:	af00      	add	r7, sp, #0
 800c572:	60b9      	str	r1, [r7, #8]
 800c574:	607a      	str	r2, [r7, #4]
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	4603      	mov	r3, r0
 800c57a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
 800c57e:	4a0a      	ldr	r2, [pc, #40]	; (800c5a8 <disk_read+0x3c>)
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	689c      	ldr	r4, [r3, #8]
 800c588:	7bfb      	ldrb	r3, [r7, #15]
 800c58a:	4a07      	ldr	r2, [pc, #28]	; (800c5a8 <disk_read+0x3c>)
 800c58c:	4413      	add	r3, r2
 800c58e:	7a18      	ldrb	r0, [r3, #8]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	47a0      	blx	r4
 800c598:	4603      	mov	r3, r0
 800c59a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	371c      	adds	r7, #28
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd90      	pop	{r4, r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20001df0 	.word	0x20001df0

0800c5ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c5ac:	b590      	push	{r4, r7, lr}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60b9      	str	r1, [r7, #8]
 800c5b4:	607a      	str	r2, [r7, #4]
 800c5b6:	603b      	str	r3, [r7, #0]
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
 800c5be:	4a0a      	ldr	r2, [pc, #40]	; (800c5e8 <disk_write+0x3c>)
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4413      	add	r3, r2
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	68dc      	ldr	r4, [r3, #12]
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	4a07      	ldr	r2, [pc, #28]	; (800c5e8 <disk_write+0x3c>)
 800c5cc:	4413      	add	r3, r2
 800c5ce:	7a18      	ldrb	r0, [r3, #8]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	47a0      	blx	r4
 800c5d8:	4603      	mov	r3, r0
 800c5da:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	371c      	adds	r7, #28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd90      	pop	{r4, r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20001df0 	.word	0x20001df0

0800c5ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	603a      	str	r2, [r7, #0]
 800c5f6:	71fb      	strb	r3, [r7, #7]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c5fc:	79fb      	ldrb	r3, [r7, #7]
 800c5fe:	4a09      	ldr	r2, [pc, #36]	; (800c624 <disk_ioctl+0x38>)
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	4413      	add	r3, r2
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	79fa      	ldrb	r2, [r7, #7]
 800c60a:	4906      	ldr	r1, [pc, #24]	; (800c624 <disk_ioctl+0x38>)
 800c60c:	440a      	add	r2, r1
 800c60e:	7a10      	ldrb	r0, [r2, #8]
 800c610:	79b9      	ldrb	r1, [r7, #6]
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	4798      	blx	r3
 800c616:	4603      	mov	r3, r0
 800c618:	73fb      	strb	r3, [r7, #15]
  return res;
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	20001df0 	.word	0x20001df0

0800c628 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3301      	adds	r3, #1
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c638:	89fb      	ldrh	r3, [r7, #14]
 800c63a:	021b      	lsls	r3, r3, #8
 800c63c:	b21a      	sxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	b21b      	sxth	r3, r3
 800c644:	4313      	orrs	r3, r2
 800c646:	b21b      	sxth	r3, r3
 800c648:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c64a:	89fb      	ldrh	r3, [r7, #14]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3714      	adds	r7, #20
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	3303      	adds	r3, #3
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	021b      	lsls	r3, r3, #8
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	3202      	adds	r2, #2
 800c670:	7812      	ldrb	r2, [r2, #0]
 800c672:	4313      	orrs	r3, r2
 800c674:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	021b      	lsls	r3, r3, #8
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	3201      	adds	r2, #1
 800c67e:	7812      	ldrb	r2, [r2, #0]
 800c680:	4313      	orrs	r3, r2
 800c682:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	021b      	lsls	r3, r3, #8
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	7812      	ldrb	r2, [r2, #0]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c690:	68fb      	ldr	r3, [r7, #12]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3714      	adds	r7, #20
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	607a      	str	r2, [r7, #4]
 800c6b0:	887a      	ldrh	r2, [r7, #2]
 800c6b2:	b2d2      	uxtb	r2, r2
 800c6b4:	701a      	strb	r2, [r3, #0]
 800c6b6:	887b      	ldrh	r3, [r7, #2]
 800c6b8:	0a1b      	lsrs	r3, r3, #8
 800c6ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	607a      	str	r2, [r7, #4]
 800c6c2:	887a      	ldrh	r2, [r7, #2]
 800c6c4:	b2d2      	uxtb	r2, r2
 800c6c6:	701a      	strb	r2, [r3, #0]
}
 800c6c8:	bf00      	nop
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	1c5a      	adds	r2, r3, #1
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	b2d2      	uxtb	r2, r2
 800c6e8:	701a      	strb	r2, [r3, #0]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	0a1b      	lsrs	r3, r3, #8
 800c6ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	607a      	str	r2, [r7, #4]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	b2d2      	uxtb	r2, r2
 800c6fa:	701a      	strb	r2, [r3, #0]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	0a1b      	lsrs	r3, r3, #8
 800c700:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	1c5a      	adds	r2, r3, #1
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	701a      	strb	r2, [r3, #0]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	0a1b      	lsrs	r3, r3, #8
 800c712:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	1c5a      	adds	r2, r3, #1
 800c718:	607a      	str	r2, [r7, #4]
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	b2d2      	uxtb	r2, r2
 800c71e:	701a      	strb	r2, [r3, #0]
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c72c:	b480      	push	{r7}
 800c72e:	b087      	sub	sp, #28
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00d      	beq.n	800c762 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	1c53      	adds	r3, r2, #1
 800c74a:	613b      	str	r3, [r7, #16]
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	1c59      	adds	r1, r3, #1
 800c750:	6179      	str	r1, [r7, #20]
 800c752:	7812      	ldrb	r2, [r2, #0]
 800c754:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	3b01      	subs	r3, #1
 800c75a:	607b      	str	r3, [r7, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1f1      	bne.n	800c746 <mem_cpy+0x1a>
	}
}
 800c762:	bf00      	nop
 800c764:	371c      	adds	r7, #28
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c76e:	b480      	push	{r7}
 800c770:	b087      	sub	sp, #28
 800c772:	af00      	add	r7, sp, #0
 800c774:	60f8      	str	r0, [r7, #12]
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	1c5a      	adds	r2, r3, #1
 800c782:	617a      	str	r2, [r7, #20]
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	b2d2      	uxtb	r2, r2
 800c788:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	3b01      	subs	r3, #1
 800c78e:	607b      	str	r3, [r7, #4]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1f3      	bne.n	800c77e <mem_set+0x10>
}
 800c796:	bf00      	nop
 800c798:	371c      	adds	r7, #28
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr

0800c7a2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c7a2:	b480      	push	{r7}
 800c7a4:	b089      	sub	sp, #36	; 0x24
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	60f8      	str	r0, [r7, #12]
 800c7aa:	60b9      	str	r1, [r7, #8]
 800c7ac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	61fb      	str	r3, [r7, #28]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	61fa      	str	r2, [r7, #28]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	1c5a      	adds	r2, r3, #1
 800c7c8:	61ba      	str	r2, [r7, #24]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	1acb      	subs	r3, r1, r3
 800c7ce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	607b      	str	r3, [r7, #4]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <mem_cmp+0x40>
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d0eb      	beq.n	800c7ba <mem_cmp+0x18>

	return r;
 800c7e2:	697b      	ldr	r3, [r7, #20]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3724      	adds	r7, #36	; 0x24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c7fa:	e002      	b.n	800c802 <chk_chr+0x12>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3301      	adds	r3, #1
 800c800:	607b      	str	r3, [r7, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d005      	beq.n	800c816 <chk_chr+0x26>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	4293      	cmp	r3, r2
 800c814:	d1f2      	bne.n	800c7fc <chk_chr+0xc>
	return *str;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	781b      	ldrb	r3, [r3, #0]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
	...

0800c828 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c832:	2300      	movs	r3, #0
 800c834:	60bb      	str	r3, [r7, #8]
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	60fb      	str	r3, [r7, #12]
 800c83a:	e029      	b.n	800c890 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c83c:	4a27      	ldr	r2, [pc, #156]	; (800c8dc <chk_lock+0xb4>)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	011b      	lsls	r3, r3, #4
 800c842:	4413      	add	r3, r2
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d01d      	beq.n	800c886 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c84a:	4a24      	ldr	r2, [pc, #144]	; (800c8dc <chk_lock+0xb4>)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	011b      	lsls	r3, r3, #4
 800c850:	4413      	add	r3, r2
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d116      	bne.n	800c88a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c85c:	4a1f      	ldr	r2, [pc, #124]	; (800c8dc <chk_lock+0xb4>)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	011b      	lsls	r3, r3, #4
 800c862:	4413      	add	r3, r2
 800c864:	3304      	adds	r3, #4
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d10c      	bne.n	800c88a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c870:	4a1a      	ldr	r2, [pc, #104]	; (800c8dc <chk_lock+0xb4>)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	011b      	lsls	r3, r3, #4
 800c876:	4413      	add	r3, r2
 800c878:	3308      	adds	r3, #8
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c880:	429a      	cmp	r2, r3
 800c882:	d102      	bne.n	800c88a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c884:	e007      	b.n	800c896 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c886:	2301      	movs	r3, #1
 800c888:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3301      	adds	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d9d2      	bls.n	800c83c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d109      	bne.n	800c8b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d102      	bne.n	800c8a8 <chk_lock+0x80>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d101      	bne.n	800c8ac <chk_lock+0x84>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	e010      	b.n	800c8ce <chk_lock+0xa6>
 800c8ac:	2312      	movs	r3, #18
 800c8ae:	e00e      	b.n	800c8ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d108      	bne.n	800c8c8 <chk_lock+0xa0>
 800c8b6:	4a09      	ldr	r2, [pc, #36]	; (800c8dc <chk_lock+0xb4>)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	011b      	lsls	r3, r3, #4
 800c8bc:	4413      	add	r3, r2
 800c8be:	330c      	adds	r3, #12
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8c6:	d101      	bne.n	800c8cc <chk_lock+0xa4>
 800c8c8:	2310      	movs	r3, #16
 800c8ca:	e000      	b.n	800c8ce <chk_lock+0xa6>
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	20001dd0 	.word	0x20001dd0

0800c8e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	607b      	str	r3, [r7, #4]
 800c8ea:	e002      	b.n	800c8f2 <enq_lock+0x12>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	607b      	str	r3, [r7, #4]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d806      	bhi.n	800c906 <enq_lock+0x26>
 800c8f8:	4a09      	ldr	r2, [pc, #36]	; (800c920 <enq_lock+0x40>)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	011b      	lsls	r3, r3, #4
 800c8fe:	4413      	add	r3, r2
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1f2      	bne.n	800c8ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2b02      	cmp	r3, #2
 800c90a:	bf14      	ite	ne
 800c90c:	2301      	movne	r3, #1
 800c90e:	2300      	moveq	r3, #0
 800c910:	b2db      	uxtb	r3, r3
}
 800c912:	4618      	mov	r0, r3
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	20001dd0 	.word	0x20001dd0

0800c924 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c92e:	2300      	movs	r3, #0
 800c930:	60fb      	str	r3, [r7, #12]
 800c932:	e01f      	b.n	800c974 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c934:	4a41      	ldr	r2, [pc, #260]	; (800ca3c <inc_lock+0x118>)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	011b      	lsls	r3, r3, #4
 800c93a:	4413      	add	r3, r2
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	429a      	cmp	r2, r3
 800c944:	d113      	bne.n	800c96e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c946:	4a3d      	ldr	r2, [pc, #244]	; (800ca3c <inc_lock+0x118>)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	011b      	lsls	r3, r3, #4
 800c94c:	4413      	add	r3, r2
 800c94e:	3304      	adds	r3, #4
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c956:	429a      	cmp	r2, r3
 800c958:	d109      	bne.n	800c96e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c95a:	4a38      	ldr	r2, [pc, #224]	; (800ca3c <inc_lock+0x118>)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	011b      	lsls	r3, r3, #4
 800c960:	4413      	add	r3, r2
 800c962:	3308      	adds	r3, #8
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d006      	beq.n	800c97c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3301      	adds	r3, #1
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d9dc      	bls.n	800c934 <inc_lock+0x10>
 800c97a:	e000      	b.n	800c97e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c97c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2b02      	cmp	r3, #2
 800c982:	d132      	bne.n	800c9ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c984:	2300      	movs	r3, #0
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	e002      	b.n	800c990 <inc_lock+0x6c>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	3301      	adds	r3, #1
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d806      	bhi.n	800c9a4 <inc_lock+0x80>
 800c996:	4a29      	ldr	r2, [pc, #164]	; (800ca3c <inc_lock+0x118>)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	011b      	lsls	r3, r3, #4
 800c99c:	4413      	add	r3, r2
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1f2      	bne.n	800c98a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d101      	bne.n	800c9ae <inc_lock+0x8a>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	e040      	b.n	800ca30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	4922      	ldr	r1, [pc, #136]	; (800ca3c <inc_lock+0x118>)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	011b      	lsls	r3, r3, #4
 800c9b8:	440b      	add	r3, r1
 800c9ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	689a      	ldr	r2, [r3, #8]
 800c9c0:	491e      	ldr	r1, [pc, #120]	; (800ca3c <inc_lock+0x118>)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	011b      	lsls	r3, r3, #4
 800c9c6:	440b      	add	r3, r1
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	695a      	ldr	r2, [r3, #20]
 800c9d0:	491a      	ldr	r1, [pc, #104]	; (800ca3c <inc_lock+0x118>)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	011b      	lsls	r3, r3, #4
 800c9d6:	440b      	add	r3, r1
 800c9d8:	3308      	adds	r3, #8
 800c9da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c9dc:	4a17      	ldr	r2, [pc, #92]	; (800ca3c <inc_lock+0x118>)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	011b      	lsls	r3, r3, #4
 800c9e2:	4413      	add	r3, r2
 800c9e4:	330c      	adds	r3, #12
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d009      	beq.n	800ca04 <inc_lock+0xe0>
 800c9f0:	4a12      	ldr	r2, [pc, #72]	; (800ca3c <inc_lock+0x118>)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	011b      	lsls	r3, r3, #4
 800c9f6:	4413      	add	r3, r2
 800c9f8:	330c      	adds	r3, #12
 800c9fa:	881b      	ldrh	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <inc_lock+0xe0>
 800ca00:	2300      	movs	r3, #0
 800ca02:	e015      	b.n	800ca30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d108      	bne.n	800ca1c <inc_lock+0xf8>
 800ca0a:	4a0c      	ldr	r2, [pc, #48]	; (800ca3c <inc_lock+0x118>)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	011b      	lsls	r3, r3, #4
 800ca10:	4413      	add	r3, r2
 800ca12:	330c      	adds	r3, #12
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	3301      	adds	r3, #1
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	e001      	b.n	800ca20 <inc_lock+0xfc>
 800ca1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca20:	4906      	ldr	r1, [pc, #24]	; (800ca3c <inc_lock+0x118>)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	011b      	lsls	r3, r3, #4
 800ca26:	440b      	add	r3, r1
 800ca28:	330c      	adds	r3, #12
 800ca2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	3301      	adds	r3, #1
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3714      	adds	r7, #20
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	20001dd0 	.word	0x20001dd0

0800ca40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	607b      	str	r3, [r7, #4]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d825      	bhi.n	800caa0 <dec_lock+0x60>
		n = Files[i].ctr;
 800ca54:	4a17      	ldr	r2, [pc, #92]	; (800cab4 <dec_lock+0x74>)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	011b      	lsls	r3, r3, #4
 800ca5a:	4413      	add	r3, r2
 800ca5c:	330c      	adds	r3, #12
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca62:	89fb      	ldrh	r3, [r7, #14]
 800ca64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca68:	d101      	bne.n	800ca6e <dec_lock+0x2e>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ca6e:	89fb      	ldrh	r3, [r7, #14]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <dec_lock+0x3a>
 800ca74:	89fb      	ldrh	r3, [r7, #14]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ca7a:	4a0e      	ldr	r2, [pc, #56]	; (800cab4 <dec_lock+0x74>)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	011b      	lsls	r3, r3, #4
 800ca80:	4413      	add	r3, r2
 800ca82:	330c      	adds	r3, #12
 800ca84:	89fa      	ldrh	r2, [r7, #14]
 800ca86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ca88:	89fb      	ldrh	r3, [r7, #14]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d105      	bne.n	800ca9a <dec_lock+0x5a>
 800ca8e:	4a09      	ldr	r2, [pc, #36]	; (800cab4 <dec_lock+0x74>)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	011b      	lsls	r3, r3, #4
 800ca94:	4413      	add	r3, r2
 800ca96:	2200      	movs	r2, #0
 800ca98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	737b      	strb	r3, [r7, #13]
 800ca9e:	e001      	b.n	800caa4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800caa0:	2302      	movs	r3, #2
 800caa2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800caa4:	7b7b      	ldrb	r3, [r7, #13]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	20001dd0 	.word	0x20001dd0

0800cab8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cac0:	2300      	movs	r3, #0
 800cac2:	60fb      	str	r3, [r7, #12]
 800cac4:	e010      	b.n	800cae8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cac6:	4a0d      	ldr	r2, [pc, #52]	; (800cafc <clear_lock+0x44>)
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	011b      	lsls	r3, r3, #4
 800cacc:	4413      	add	r3, r2
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d105      	bne.n	800cae2 <clear_lock+0x2a>
 800cad6:	4a09      	ldr	r2, [pc, #36]	; (800cafc <clear_lock+0x44>)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	011b      	lsls	r3, r3, #4
 800cadc:	4413      	add	r3, r2
 800cade:	2200      	movs	r2, #0
 800cae0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3301      	adds	r3, #1
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d9eb      	bls.n	800cac6 <clear_lock+0xe>
	}
}
 800caee:	bf00      	nop
 800caf0:	3714      	adds	r7, #20
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	20001dd0 	.word	0x20001dd0

0800cb00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	78db      	ldrb	r3, [r3, #3]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d034      	beq.n	800cb7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	7858      	ldrb	r0, [r3, #1]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb24:	2301      	movs	r3, #1
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	f7ff fd40 	bl	800c5ac <disk_write>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	73fb      	strb	r3, [r7, #15]
 800cb36:	e022      	b.n	800cb7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	1ad2      	subs	r2, r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d217      	bcs.n	800cb7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	789b      	ldrb	r3, [r3, #2]
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	e010      	b.n	800cb78 <sync_window+0x78>
					wsect += fs->fsize;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	699b      	ldr	r3, [r3, #24]
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7858      	ldrb	r0, [r3, #1]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	697a      	ldr	r2, [r7, #20]
 800cb6e:	f7ff fd1d 	bl	800c5ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	3b01      	subs	r3, #1
 800cb76:	613b      	str	r3, [r7, #16]
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d8eb      	bhi.n	800cb56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3718      	adds	r7, #24
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d01b      	beq.n	800cbd8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7ff ffad 	bl	800cb00 <sync_window>
 800cba6:	4603      	mov	r3, r0
 800cba8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d113      	bne.n	800cbd8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	7858      	ldrb	r0, [r3, #1]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbba:	2301      	movs	r3, #1
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	f7ff fcd5 	bl	800c56c <disk_read>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d004      	beq.n	800cbd2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbcc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
	...

0800cbe4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff ff87 	bl	800cb00 <sync_window>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d158      	bne.n	800ccae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	2b03      	cmp	r3, #3
 800cc02:	d148      	bne.n	800cc96 <sync_fs+0xb2>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	791b      	ldrb	r3, [r3, #4]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d144      	bne.n	800cc96 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3330      	adds	r3, #48	; 0x30
 800cc10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc14:	2100      	movs	r1, #0
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fda9 	bl	800c76e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3330      	adds	r3, #48	; 0x30
 800cc20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc24:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7ff fd38 	bl	800c69e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3330      	adds	r3, #48	; 0x30
 800cc32:	4921      	ldr	r1, [pc, #132]	; (800ccb8 <sync_fs+0xd4>)
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff fd4d 	bl	800c6d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	3330      	adds	r3, #48	; 0x30
 800cc3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc42:	491e      	ldr	r1, [pc, #120]	; (800ccbc <sync_fs+0xd8>)
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff fd45 	bl	800c6d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	3330      	adds	r3, #48	; 0x30
 800cc4e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	691b      	ldr	r3, [r3, #16]
 800cc56:	4619      	mov	r1, r3
 800cc58:	4610      	mov	r0, r2
 800cc5a:	f7ff fd3b 	bl	800c6d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	3330      	adds	r3, #48	; 0x30
 800cc62:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	f7ff fd31 	bl	800c6d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	7858      	ldrb	r0, [r3, #1]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	f7ff fc8e 	bl	800c5ac <disk_write>
			fs->fsi_flag = 0;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	785b      	ldrb	r3, [r3, #1]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7ff fca4 	bl	800c5ec <disk_ioctl>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <sync_fs+0xca>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	41615252 	.word	0x41615252
 800ccbc:	61417272 	.word	0x61417272

0800ccc0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	3b02      	subs	r3, #2
 800ccce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	3b02      	subs	r3, #2
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d301      	bcc.n	800cce0 <clust2sect+0x20>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	e008      	b.n	800ccf2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	895b      	ldrh	r3, [r3, #10]
 800cce4:	461a      	mov	r2, r3
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	fb03 f202 	mul.w	r2, r3, r2
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf0:	4413      	add	r3, r2
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b086      	sub	sp, #24
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d904      	bls.n	800cd1e <get_fat+0x20>
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	695b      	ldr	r3, [r3, #20]
 800cd18:	683a      	ldr	r2, [r7, #0]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d302      	bcc.n	800cd24 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cd1e:	2301      	movs	r3, #1
 800cd20:	617b      	str	r3, [r7, #20]
 800cd22:	e08c      	b.n	800ce3e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd24:	f04f 33ff 	mov.w	r3, #4294967295
 800cd28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d045      	beq.n	800cdbe <get_fat+0xc0>
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	d05d      	beq.n	800cdf2 <get_fat+0xf4>
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d177      	bne.n	800ce2a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	60fb      	str	r3, [r7, #12]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	085b      	lsrs	r3, r3, #1
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	4413      	add	r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	6a1a      	ldr	r2, [r3, #32]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	0a5b      	lsrs	r3, r3, #9
 800cd50:	4413      	add	r3, r2
 800cd52:	4619      	mov	r1, r3
 800cd54:	6938      	ldr	r0, [r7, #16]
 800cd56:	f7ff ff17 	bl	800cb88 <move_window>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d167      	bne.n	800ce30 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	1c5a      	adds	r2, r3, #1
 800cd64:	60fa      	str	r2, [r7, #12]
 800cd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd6a:	693a      	ldr	r2, [r7, #16]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd72:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	6a1a      	ldr	r2, [r3, #32]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	0a5b      	lsrs	r3, r3, #9
 800cd7c:	4413      	add	r3, r2
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6938      	ldr	r0, [r7, #16]
 800cd82:	f7ff ff01 	bl	800cb88 <move_window>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d153      	bne.n	800ce34 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	4413      	add	r3, r2
 800cd96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd9a:	021b      	lsls	r3, r3, #8
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	4313      	orrs	r3, r2
 800cda2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	f003 0301 	and.w	r3, r3, #1
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <get_fat+0xb6>
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	091b      	lsrs	r3, r3, #4
 800cdb2:	e002      	b.n	800cdba <get_fat+0xbc>
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdba:	617b      	str	r3, [r7, #20]
			break;
 800cdbc:	e03f      	b.n	800ce3e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	6a1a      	ldr	r2, [r3, #32]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	4413      	add	r3, r2
 800cdc8:	4619      	mov	r1, r3
 800cdca:	6938      	ldr	r0, [r7, #16]
 800cdcc:	f7ff fedc 	bl	800cb88 <move_window>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d130      	bne.n	800ce38 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cde4:	4413      	add	r3, r2
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7ff fc1e 	bl	800c628 <ld_word>
 800cdec:	4603      	mov	r3, r0
 800cdee:	617b      	str	r3, [r7, #20]
			break;
 800cdf0:	e025      	b.n	800ce3e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	6a1a      	ldr	r2, [r3, #32]
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	09db      	lsrs	r3, r3, #7
 800cdfa:	4413      	add	r3, r2
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	6938      	ldr	r0, [r7, #16]
 800ce00:	f7ff fec2 	bl	800cb88 <move_window>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d118      	bne.n	800ce3c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ce18:	4413      	add	r3, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fc1c 	bl	800c658 <ld_dword>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ce26:	617b      	str	r3, [r7, #20]
			break;
 800ce28:	e009      	b.n	800ce3e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	617b      	str	r3, [r7, #20]
 800ce2e:	e006      	b.n	800ce3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce30:	bf00      	nop
 800ce32:	e004      	b.n	800ce3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce34:	bf00      	nop
 800ce36:	e002      	b.n	800ce3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce38:	bf00      	nop
 800ce3a:	e000      	b.n	800ce3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce3c:	bf00      	nop
		}
	}

	return val;
 800ce3e:	697b      	ldr	r3, [r7, #20]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ce48:	b590      	push	{r4, r7, lr}
 800ce4a:	b089      	sub	sp, #36	; 0x24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ce54:	2302      	movs	r3, #2
 800ce56:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	f240 80d6 	bls.w	800d00c <put_fat+0x1c4>
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	695b      	ldr	r3, [r3, #20]
 800ce64:	68ba      	ldr	r2, [r7, #8]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	f080 80d0 	bcs.w	800d00c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d073      	beq.n	800cf5c <put_fat+0x114>
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	f000 8091 	beq.w	800cf9c <put_fat+0x154>
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	f040 80c6 	bne.w	800d00c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	61bb      	str	r3, [r7, #24]
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	085b      	lsrs	r3, r3, #1
 800ce88:	69ba      	ldr	r2, [r7, #24]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6a1a      	ldr	r2, [r3, #32]
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	0a5b      	lsrs	r3, r3, #9
 800ce96:	4413      	add	r3, r2
 800ce98:	4619      	mov	r1, r3
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f7ff fe74 	bl	800cb88 <move_window>
 800cea0:	4603      	mov	r3, r0
 800cea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cea4:	7ffb      	ldrb	r3, [r7, #31]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f040 80a9 	bne.w	800cffe <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	1c59      	adds	r1, r3, #1
 800ceb6:	61b9      	str	r1, [r7, #24]
 800ceb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cebc:	4413      	add	r3, r2
 800cebe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	f003 0301 	and.w	r3, r3, #1
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00d      	beq.n	800cee6 <put_fat+0x9e>
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	b25b      	sxtb	r3, r3
 800ced0:	f003 030f 	and.w	r3, r3, #15
 800ced4:	b25a      	sxtb	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	011b      	lsls	r3, r3, #4
 800cedc:	b25b      	sxtb	r3, r3
 800cede:	4313      	orrs	r3, r2
 800cee0:	b25b      	sxtb	r3, r3
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	e001      	b.n	800ceea <put_fat+0xa2>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	697a      	ldr	r2, [r7, #20]
 800ceec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2201      	movs	r2, #1
 800cef2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6a1a      	ldr	r2, [r3, #32]
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	0a5b      	lsrs	r3, r3, #9
 800cefc:	4413      	add	r3, r2
 800cefe:	4619      	mov	r1, r3
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f7ff fe41 	bl	800cb88 <move_window>
 800cf06:	4603      	mov	r3, r0
 800cf08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf0a:	7ffb      	ldrb	r3, [r7, #31]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d178      	bne.n	800d002 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf1c:	4413      	add	r3, r2
 800cf1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	f003 0301 	and.w	r3, r3, #1
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d003      	beq.n	800cf32 <put_fat+0xea>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	091b      	lsrs	r3, r3, #4
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	e00e      	b.n	800cf50 <put_fat+0x108>
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	b25b      	sxtb	r3, r3
 800cf38:	f023 030f 	bic.w	r3, r3, #15
 800cf3c:	b25a      	sxtb	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	0a1b      	lsrs	r3, r3, #8
 800cf42:	b25b      	sxtb	r3, r3
 800cf44:	f003 030f 	and.w	r3, r3, #15
 800cf48:	b25b      	sxtb	r3, r3
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	b25b      	sxtb	r3, r3
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	697a      	ldr	r2, [r7, #20]
 800cf52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2201      	movs	r2, #1
 800cf58:	70da      	strb	r2, [r3, #3]
			break;
 800cf5a:	e057      	b.n	800d00c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6a1a      	ldr	r2, [r3, #32]
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	0a1b      	lsrs	r3, r3, #8
 800cf64:	4413      	add	r3, r2
 800cf66:	4619      	mov	r1, r3
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f7ff fe0d 	bl	800cb88 <move_window>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf72:	7ffb      	ldrb	r3, [r7, #31]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d146      	bne.n	800d006 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cf86:	4413      	add	r3, r2
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	b292      	uxth	r2, r2
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff fb85 	bl	800c69e <st_word>
			fs->wflag = 1;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2201      	movs	r2, #1
 800cf98:	70da      	strb	r2, [r3, #3]
			break;
 800cf9a:	e037      	b.n	800d00c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6a1a      	ldr	r2, [r3, #32]
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	09db      	lsrs	r3, r3, #7
 800cfa4:	4413      	add	r3, r2
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f7ff fded 	bl	800cb88 <move_window>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cfb2:	7ffb      	ldrb	r3, [r7, #31]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d128      	bne.n	800d00a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cfcc:	4413      	add	r3, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7ff fb42 	bl	800c658 <ld_dword>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cfda:	4323      	orrs	r3, r4
 800cfdc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cfec:	4413      	add	r3, r2
 800cfee:	6879      	ldr	r1, [r7, #4]
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7ff fb6f 	bl	800c6d4 <st_dword>
			fs->wflag = 1;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2201      	movs	r2, #1
 800cffa:	70da      	strb	r2, [r3, #3]
			break;
 800cffc:	e006      	b.n	800d00c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800cffe:	bf00      	nop
 800d000:	e004      	b.n	800d00c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d002:	bf00      	nop
 800d004:	e002      	b.n	800d00c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d006:	bf00      	nop
 800d008:	e000      	b.n	800d00c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d00a:	bf00      	nop
		}
	}
	return res;
 800d00c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3724      	adds	r7, #36	; 0x24
 800d012:	46bd      	mov	sp, r7
 800d014:	bd90      	pop	{r4, r7, pc}

0800d016 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b088      	sub	sp, #32
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	60f8      	str	r0, [r7, #12]
 800d01e:	60b9      	str	r1, [r7, #8]
 800d020:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d904      	bls.n	800d03c <remove_chain+0x26>
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d301      	bcc.n	800d040 <remove_chain+0x2a>
 800d03c:	2302      	movs	r3, #2
 800d03e:	e04b      	b.n	800d0d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00c      	beq.n	800d060 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d046:	f04f 32ff 	mov.w	r2, #4294967295
 800d04a:	6879      	ldr	r1, [r7, #4]
 800d04c:	69b8      	ldr	r0, [r7, #24]
 800d04e:	f7ff fefb 	bl	800ce48 <put_fat>
 800d052:	4603      	mov	r3, r0
 800d054:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d056:	7ffb      	ldrb	r3, [r7, #31]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <remove_chain+0x4a>
 800d05c:	7ffb      	ldrb	r3, [r7, #31]
 800d05e:	e03b      	b.n	800d0d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d060:	68b9      	ldr	r1, [r7, #8]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f7ff fe4b 	bl	800ccfe <get_fat>
 800d068:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d031      	beq.n	800d0d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	2b01      	cmp	r3, #1
 800d074:	d101      	bne.n	800d07a <remove_chain+0x64>
 800d076:	2302      	movs	r3, #2
 800d078:	e02e      	b.n	800d0d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d080:	d101      	bne.n	800d086 <remove_chain+0x70>
 800d082:	2301      	movs	r3, #1
 800d084:	e028      	b.n	800d0d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d086:	2200      	movs	r2, #0
 800d088:	68b9      	ldr	r1, [r7, #8]
 800d08a:	69b8      	ldr	r0, [r7, #24]
 800d08c:	f7ff fedc 	bl	800ce48 <put_fat>
 800d090:	4603      	mov	r3, r0
 800d092:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d094:	7ffb      	ldrb	r3, [r7, #31]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <remove_chain+0x88>
 800d09a:	7ffb      	ldrb	r3, [r7, #31]
 800d09c:	e01c      	b.n	800d0d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	691a      	ldr	r2, [r3, #16]
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	695b      	ldr	r3, [r3, #20]
 800d0a6:	3b02      	subs	r3, #2
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d20b      	bcs.n	800d0c4 <remove_chain+0xae>
			fs->free_clst++;
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	1c5a      	adds	r2, r3, #1
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	791b      	ldrb	r3, [r3, #4]
 800d0ba:	f043 0301 	orr.w	r3, r3, #1
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	695b      	ldr	r3, [r3, #20]
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d3c6      	bcc.n	800d060 <remove_chain+0x4a>
 800d0d2:	e000      	b.n	800d0d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d0d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3720      	adds	r7, #32
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b088      	sub	sp, #32
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d10d      	bne.n	800d112 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d0fc:	69bb      	ldr	r3, [r7, #24]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d004      	beq.n	800d10c <create_chain+0x2c>
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	69ba      	ldr	r2, [r7, #24]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d31b      	bcc.n	800d144 <create_chain+0x64>
 800d10c:	2301      	movs	r3, #1
 800d10e:	61bb      	str	r3, [r7, #24]
 800d110:	e018      	b.n	800d144 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff fdf2 	bl	800ccfe <get_fat>
 800d11a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d801      	bhi.n	800d126 <create_chain+0x46>
 800d122:	2301      	movs	r3, #1
 800d124:	e070      	b.n	800d208 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12c:	d101      	bne.n	800d132 <create_chain+0x52>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	e06a      	b.n	800d208 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d201      	bcs.n	800d140 <create_chain+0x60>
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	e063      	b.n	800d208 <create_chain+0x128>
		scl = clst;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	3301      	adds	r3, #1
 800d14c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	695b      	ldr	r3, [r3, #20]
 800d152:	69fa      	ldr	r2, [r7, #28]
 800d154:	429a      	cmp	r2, r3
 800d156:	d307      	bcc.n	800d168 <create_chain+0x88>
				ncl = 2;
 800d158:	2302      	movs	r3, #2
 800d15a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d15c:	69fa      	ldr	r2, [r7, #28]
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	429a      	cmp	r2, r3
 800d162:	d901      	bls.n	800d168 <create_chain+0x88>
 800d164:	2300      	movs	r3, #0
 800d166:	e04f      	b.n	800d208 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d168:	69f9      	ldr	r1, [r7, #28]
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7ff fdc7 	bl	800ccfe <get_fat>
 800d170:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00e      	beq.n	800d196 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d003      	beq.n	800d186 <create_chain+0xa6>
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d184:	d101      	bne.n	800d18a <create_chain+0xaa>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	e03e      	b.n	800d208 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d18a:	69fa      	ldr	r2, [r7, #28]
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d1da      	bne.n	800d148 <create_chain+0x68>
 800d192:	2300      	movs	r3, #0
 800d194:	e038      	b.n	800d208 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d196:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d198:	f04f 32ff 	mov.w	r2, #4294967295
 800d19c:	69f9      	ldr	r1, [r7, #28]
 800d19e:	6938      	ldr	r0, [r7, #16]
 800d1a0:	f7ff fe52 	bl	800ce48 <put_fat>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d1a8:	7dfb      	ldrb	r3, [r7, #23]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d109      	bne.n	800d1c2 <create_chain+0xe2>
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d1b4:	69fa      	ldr	r2, [r7, #28]
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6938      	ldr	r0, [r7, #16]
 800d1ba:	f7ff fe45 	bl	800ce48 <put_fat>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d1c2:	7dfb      	ldrb	r3, [r7, #23]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d116      	bne.n	800d1f6 <create_chain+0x116>
		fs->last_clst = ncl;
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	69fa      	ldr	r2, [r7, #28]
 800d1cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	691a      	ldr	r2, [r3, #16]
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	3b02      	subs	r3, #2
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d804      	bhi.n	800d1e6 <create_chain+0x106>
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	1e5a      	subs	r2, r3, #1
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	791b      	ldrb	r3, [r3, #4]
 800d1ea:	f043 0301 	orr.w	r3, r3, #1
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	711a      	strb	r2, [r3, #4]
 800d1f4:	e007      	b.n	800d206 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d1f6:	7dfb      	ldrb	r3, [r7, #23]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d102      	bne.n	800d202 <create_chain+0x122>
 800d1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d200:	e000      	b.n	800d204 <create_chain+0x124>
 800d202:	2301      	movs	r3, #1
 800d204:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d206:	69fb      	ldr	r3, [r7, #28]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3720      	adds	r7, #32
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d210:	b480      	push	{r7}
 800d212:	b087      	sub	sp, #28
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d224:	3304      	adds	r3, #4
 800d226:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	0a5b      	lsrs	r3, r3, #9
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	8952      	ldrh	r2, [r2, #10]
 800d230:	fbb3 f3f2 	udiv	r3, r3, r2
 800d234:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	1d1a      	adds	r2, r3, #4
 800d23a:	613a      	str	r2, [r7, #16]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d101      	bne.n	800d24a <clmt_clust+0x3a>
 800d246:	2300      	movs	r3, #0
 800d248:	e010      	b.n	800d26c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d307      	bcc.n	800d262 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	617b      	str	r3, [r7, #20]
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	3304      	adds	r3, #4
 800d25e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d260:	e7e9      	b.n	800d236 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d262:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	4413      	add	r3, r2
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	371c      	adds	r7, #28
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d28e:	d204      	bcs.n	800d29a <dir_sdi+0x22>
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	f003 031f 	and.w	r3, r3, #31
 800d296:	2b00      	cmp	r3, #0
 800d298:	d001      	beq.n	800d29e <dir_sdi+0x26>
		return FR_INT_ERR;
 800d29a:	2302      	movs	r3, #2
 800d29c:	e063      	b.n	800d366 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d106      	bne.n	800d2be <dir_sdi+0x46>
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d902      	bls.n	800d2be <dir_sdi+0x46>
		clst = fs->dirbase;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10c      	bne.n	800d2de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	095b      	lsrs	r3, r3, #5
 800d2c8:	693a      	ldr	r2, [r7, #16]
 800d2ca:	8912      	ldrh	r2, [r2, #8]
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d301      	bcc.n	800d2d4 <dir_sdi+0x5c>
 800d2d0:	2302      	movs	r3, #2
 800d2d2:	e048      	b.n	800d366 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	61da      	str	r2, [r3, #28]
 800d2dc:	e029      	b.n	800d332 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	895b      	ldrh	r3, [r3, #10]
 800d2e2:	025b      	lsls	r3, r3, #9
 800d2e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d2e6:	e019      	b.n	800d31c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6979      	ldr	r1, [r7, #20]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7ff fd06 	bl	800ccfe <get_fat>
 800d2f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fa:	d101      	bne.n	800d300 <dir_sdi+0x88>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e032      	b.n	800d366 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d904      	bls.n	800d310 <dir_sdi+0x98>
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	695b      	ldr	r3, [r3, #20]
 800d30a:	697a      	ldr	r2, [r7, #20]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d301      	bcc.n	800d314 <dir_sdi+0x9c>
 800d310:	2302      	movs	r3, #2
 800d312:	e028      	b.n	800d366 <dir_sdi+0xee>
			ofs -= csz;
 800d314:	683a      	ldr	r2, [r7, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	1ad3      	subs	r3, r2, r3
 800d31a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	429a      	cmp	r2, r3
 800d322:	d2e1      	bcs.n	800d2e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d324:	6979      	ldr	r1, [r7, #20]
 800d326:	6938      	ldr	r0, [r7, #16]
 800d328:	f7ff fcca 	bl	800ccc0 <clust2sect>
 800d32c:	4602      	mov	r2, r0
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	697a      	ldr	r2, [r7, #20]
 800d336:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	69db      	ldr	r3, [r3, #28]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <dir_sdi+0xcc>
 800d340:	2302      	movs	r3, #2
 800d342:	e010      	b.n	800d366 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	69da      	ldr	r2, [r3, #28]
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	0a5b      	lsrs	r3, r3, #9
 800d34c:	441a      	add	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d35e:	441a      	add	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b086      	sub	sp, #24
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	695b      	ldr	r3, [r3, #20]
 800d382:	3320      	adds	r3, #32
 800d384:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	69db      	ldr	r3, [r3, #28]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d003      	beq.n	800d396 <dir_next+0x28>
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d394:	d301      	bcc.n	800d39a <dir_next+0x2c>
 800d396:	2304      	movs	r3, #4
 800d398:	e0aa      	b.n	800d4f0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f040 8098 	bne.w	800d4d6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	69db      	ldr	r3, [r3, #28]
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d10b      	bne.n	800d3d0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	095b      	lsrs	r3, r3, #5
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	8912      	ldrh	r2, [r2, #8]
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	f0c0 8088 	bcc.w	800d4d6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	61da      	str	r2, [r3, #28]
 800d3cc:	2304      	movs	r3, #4
 800d3ce:	e08f      	b.n	800d4f0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	0a5b      	lsrs	r3, r3, #9
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	8952      	ldrh	r2, [r2, #10]
 800d3d8:	3a01      	subs	r2, #1
 800d3da:	4013      	ands	r3, r2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d17a      	bne.n	800d4d6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	699b      	ldr	r3, [r3, #24]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	f7ff fc88 	bl	800ccfe <get_fat>
 800d3ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d801      	bhi.n	800d3fa <dir_next+0x8c>
 800d3f6:	2302      	movs	r3, #2
 800d3f8:	e07a      	b.n	800d4f0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d400:	d101      	bne.n	800d406 <dir_next+0x98>
 800d402:	2301      	movs	r3, #1
 800d404:	e074      	b.n	800d4f0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d358      	bcc.n	800d4c2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d104      	bne.n	800d420 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	61da      	str	r2, [r3, #28]
 800d41c:	2304      	movs	r3, #4
 800d41e:	e067      	b.n	800d4f0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	4619      	mov	r1, r3
 800d428:	4610      	mov	r0, r2
 800d42a:	f7ff fe59 	bl	800d0e0 <create_chain>
 800d42e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d101      	bne.n	800d43a <dir_next+0xcc>
 800d436:	2307      	movs	r3, #7
 800d438:	e05a      	b.n	800d4f0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d101      	bne.n	800d444 <dir_next+0xd6>
 800d440:	2302      	movs	r3, #2
 800d442:	e055      	b.n	800d4f0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44a:	d101      	bne.n	800d450 <dir_next+0xe2>
 800d44c:	2301      	movs	r3, #1
 800d44e:	e04f      	b.n	800d4f0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f7ff fb55 	bl	800cb00 <sync_window>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <dir_next+0xf2>
 800d45c:	2301      	movs	r3, #1
 800d45e:	e047      	b.n	800d4f0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	3330      	adds	r3, #48	; 0x30
 800d464:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d468:	2100      	movs	r1, #0
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7ff f97f 	bl	800c76e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d470:	2300      	movs	r3, #0
 800d472:	613b      	str	r3, [r7, #16]
 800d474:	6979      	ldr	r1, [r7, #20]
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f7ff fc22 	bl	800ccc0 <clust2sect>
 800d47c:	4602      	mov	r2, r0
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	62da      	str	r2, [r3, #44]	; 0x2c
 800d482:	e012      	b.n	800d4aa <dir_next+0x13c>
						fs->wflag = 1;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2201      	movs	r2, #1
 800d488:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f7ff fb38 	bl	800cb00 <sync_window>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d001      	beq.n	800d49a <dir_next+0x12c>
 800d496:	2301      	movs	r3, #1
 800d498:	e02a      	b.n	800d4f0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	3301      	adds	r3, #1
 800d49e:	613b      	str	r3, [r7, #16]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	62da      	str	r2, [r3, #44]	; 0x2c
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	895b      	ldrh	r3, [r3, #10]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d3e6      	bcc.n	800d484 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	1ad2      	subs	r2, r2, r3
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	697a      	ldr	r2, [r7, #20]
 800d4c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d4c8:	6979      	ldr	r1, [r7, #20]
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f7ff fbf8 	bl	800ccc0 <clust2sect>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4e8:	441a      	add	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d508:	2100      	movs	r1, #0
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7ff feb4 	bl	800d278 <dir_sdi>
 800d510:	4603      	mov	r3, r0
 800d512:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d514:	7dfb      	ldrb	r3, [r7, #23]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d12b      	bne.n	800d572 <dir_alloc+0x7a>
		n = 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	69db      	ldr	r3, [r3, #28]
 800d522:	4619      	mov	r1, r3
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f7ff fb2f 	bl	800cb88 <move_window>
 800d52a:	4603      	mov	r3, r0
 800d52c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d52e:	7dfb      	ldrb	r3, [r7, #23]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d11d      	bne.n	800d570 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6a1b      	ldr	r3, [r3, #32]
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	2be5      	cmp	r3, #229	; 0xe5
 800d53c:	d004      	beq.n	800d548 <dir_alloc+0x50>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d107      	bne.n	800d558 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	3301      	adds	r3, #1
 800d54c:	613b      	str	r3, [r7, #16]
 800d54e:	693a      	ldr	r2, [r7, #16]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	429a      	cmp	r2, r3
 800d554:	d102      	bne.n	800d55c <dir_alloc+0x64>
 800d556:	e00c      	b.n	800d572 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d558:	2300      	movs	r3, #0
 800d55a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d55c:	2101      	movs	r1, #1
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff ff05 	bl	800d36e <dir_next>
 800d564:	4603      	mov	r3, r0
 800d566:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d568:	7dfb      	ldrb	r3, [r7, #23]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0d7      	beq.n	800d51e <dir_alloc+0x26>
 800d56e:	e000      	b.n	800d572 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d570:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d572:	7dfb      	ldrb	r3, [r7, #23]
 800d574:	2b04      	cmp	r3, #4
 800d576:	d101      	bne.n	800d57c <dir_alloc+0x84>
 800d578:	2307      	movs	r3, #7
 800d57a:	75fb      	strb	r3, [r7, #23]
	return res;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b084      	sub	sp, #16
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
 800d58e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	331a      	adds	r3, #26
 800d594:	4618      	mov	r0, r3
 800d596:	f7ff f847 	bl	800c628 <ld_word>
 800d59a:	4603      	mov	r3, r0
 800d59c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d109      	bne.n	800d5ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	3314      	adds	r3, #20
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7ff f83c 	bl	800c628 <ld_word>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	041b      	lsls	r3, r3, #16
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	331a      	adds	r3, #26
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	b292      	uxth	r2, r2
 800d5d8:	4611      	mov	r1, r2
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7ff f85f 	bl	800c69e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d109      	bne.n	800d5fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	f103 0214 	add.w	r2, r3, #20
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	0c1b      	lsrs	r3, r3, #16
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	f7ff f851 	bl	800c69e <st_word>
	}
}
 800d5fc:	bf00      	nop
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d612:	2100      	movs	r1, #0
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff fe2f 	bl	800d278 <dir_sdi>
 800d61a:	4603      	mov	r3, r0
 800d61c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d61e:	7dfb      	ldrb	r3, [r7, #23]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <dir_find+0x24>
 800d624:	7dfb      	ldrb	r3, [r7, #23]
 800d626:	e03e      	b.n	800d6a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	69db      	ldr	r3, [r3, #28]
 800d62c:	4619      	mov	r1, r3
 800d62e:	6938      	ldr	r0, [r7, #16]
 800d630:	f7ff faaa 	bl	800cb88 <move_window>
 800d634:	4603      	mov	r3, r0
 800d636:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d638:	7dfb      	ldrb	r3, [r7, #23]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d12f      	bne.n	800d69e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6a1b      	ldr	r3, [r3, #32]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d646:	7bfb      	ldrb	r3, [r7, #15]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <dir_find+0x4e>
 800d64c:	2304      	movs	r3, #4
 800d64e:	75fb      	strb	r3, [r7, #23]
 800d650:	e028      	b.n	800d6a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	330b      	adds	r3, #11
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d65e:	b2da      	uxtb	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	330b      	adds	r3, #11
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	f003 0308 	and.w	r3, r3, #8
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10a      	bne.n	800d68a <dir_find+0x86>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a18      	ldr	r0, [r3, #32]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	3324      	adds	r3, #36	; 0x24
 800d67c:	220b      	movs	r2, #11
 800d67e:	4619      	mov	r1, r3
 800d680:	f7ff f88f 	bl	800c7a2 <mem_cmp>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00b      	beq.n	800d6a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d68a:	2100      	movs	r1, #0
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7ff fe6e 	bl	800d36e <dir_next>
 800d692:	4603      	mov	r3, r0
 800d694:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d696:	7dfb      	ldrb	r3, [r7, #23]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d0c5      	beq.n	800d628 <dir_find+0x24>
 800d69c:	e002      	b.n	800d6a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d69e:	bf00      	nop
 800d6a0:	e000      	b.n	800d6a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d6a2:	bf00      	nop

	return res;
 800d6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b084      	sub	sp, #16
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d6bc:	2101      	movs	r1, #1
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f7ff ff1a 	bl	800d4f8 <dir_alloc>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d6c8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d11c      	bne.n	800d708 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	69db      	ldr	r3, [r3, #28]
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	68b8      	ldr	r0, [r7, #8]
 800d6d6:	f7ff fa57 	bl	800cb88 <move_window>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d111      	bne.n	800d708 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a1b      	ldr	r3, [r3, #32]
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff f83e 	bl	800c76e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a18      	ldr	r0, [r3, #32]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	3324      	adds	r3, #36	; 0x24
 800d6fa:	220b      	movs	r2, #11
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	f7ff f815 	bl	800c72c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2201      	movs	r2, #1
 800d706:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d708:	7bfb      	ldrb	r3, [r7, #15]
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
	...

0800d714 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b088      	sub	sp, #32
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	60fb      	str	r3, [r7, #12]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	3324      	adds	r3, #36	; 0x24
 800d728:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d72a:	220b      	movs	r2, #11
 800d72c:	2120      	movs	r1, #32
 800d72e:	68b8      	ldr	r0, [r7, #8]
 800d730:	f7ff f81d 	bl	800c76e <mem_set>
	si = i = 0; ni = 8;
 800d734:	2300      	movs	r3, #0
 800d736:	613b      	str	r3, [r7, #16]
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	617b      	str	r3, [r7, #20]
 800d73c:	2308      	movs	r3, #8
 800d73e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	1c5a      	adds	r2, r3, #1
 800d744:	617a      	str	r2, [r7, #20]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	4413      	add	r3, r2
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d74e:	7ffb      	ldrb	r3, [r7, #31]
 800d750:	2b20      	cmp	r3, #32
 800d752:	d94e      	bls.n	800d7f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d754:	7ffb      	ldrb	r3, [r7, #31]
 800d756:	2b2f      	cmp	r3, #47	; 0x2f
 800d758:	d006      	beq.n	800d768 <create_name+0x54>
 800d75a:	7ffb      	ldrb	r3, [r7, #31]
 800d75c:	2b5c      	cmp	r3, #92	; 0x5c
 800d75e:	d110      	bne.n	800d782 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d760:	e002      	b.n	800d768 <create_name+0x54>
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	3301      	adds	r3, #1
 800d766:	617b      	str	r3, [r7, #20]
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	4413      	add	r3, r2
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b2f      	cmp	r3, #47	; 0x2f
 800d772:	d0f6      	beq.n	800d762 <create_name+0x4e>
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	4413      	add	r3, r2
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	2b5c      	cmp	r3, #92	; 0x5c
 800d77e:	d0f0      	beq.n	800d762 <create_name+0x4e>
			break;
 800d780:	e038      	b.n	800d7f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d782:	7ffb      	ldrb	r3, [r7, #31]
 800d784:	2b2e      	cmp	r3, #46	; 0x2e
 800d786:	d003      	beq.n	800d790 <create_name+0x7c>
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d30c      	bcc.n	800d7aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	2b0b      	cmp	r3, #11
 800d794:	d002      	beq.n	800d79c <create_name+0x88>
 800d796:	7ffb      	ldrb	r3, [r7, #31]
 800d798:	2b2e      	cmp	r3, #46	; 0x2e
 800d79a:	d001      	beq.n	800d7a0 <create_name+0x8c>
 800d79c:	2306      	movs	r3, #6
 800d79e:	e044      	b.n	800d82a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d7a0:	2308      	movs	r3, #8
 800d7a2:	613b      	str	r3, [r7, #16]
 800d7a4:	230b      	movs	r3, #11
 800d7a6:	61bb      	str	r3, [r7, #24]
			continue;
 800d7a8:	e022      	b.n	800d7f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d7aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	da04      	bge.n	800d7bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d7b2:	7ffb      	ldrb	r3, [r7, #31]
 800d7b4:	3b80      	subs	r3, #128	; 0x80
 800d7b6:	4a1f      	ldr	r2, [pc, #124]	; (800d834 <create_name+0x120>)
 800d7b8:	5cd3      	ldrb	r3, [r2, r3]
 800d7ba:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d7bc:	7ffb      	ldrb	r3, [r7, #31]
 800d7be:	4619      	mov	r1, r3
 800d7c0:	481d      	ldr	r0, [pc, #116]	; (800d838 <create_name+0x124>)
 800d7c2:	f7ff f815 	bl	800c7f0 <chk_chr>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d001      	beq.n	800d7d0 <create_name+0xbc>
 800d7cc:	2306      	movs	r3, #6
 800d7ce:	e02c      	b.n	800d82a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d7d0:	7ffb      	ldrb	r3, [r7, #31]
 800d7d2:	2b60      	cmp	r3, #96	; 0x60
 800d7d4:	d905      	bls.n	800d7e2 <create_name+0xce>
 800d7d6:	7ffb      	ldrb	r3, [r7, #31]
 800d7d8:	2b7a      	cmp	r3, #122	; 0x7a
 800d7da:	d802      	bhi.n	800d7e2 <create_name+0xce>
 800d7dc:	7ffb      	ldrb	r3, [r7, #31]
 800d7de:	3b20      	subs	r3, #32
 800d7e0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	1c5a      	adds	r2, r3, #1
 800d7e6:	613a      	str	r2, [r7, #16]
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	7ffa      	ldrb	r2, [r7, #31]
 800d7ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d7f0:	e7a6      	b.n	800d740 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d7f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	441a      	add	r2, r3
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <create_name+0xf4>
 800d804:	2306      	movs	r3, #6
 800d806:	e010      	b.n	800d82a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	2be5      	cmp	r3, #229	; 0xe5
 800d80e:	d102      	bne.n	800d816 <create_name+0x102>
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2205      	movs	r2, #5
 800d814:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d816:	7ffb      	ldrb	r3, [r7, #31]
 800d818:	2b20      	cmp	r3, #32
 800d81a:	d801      	bhi.n	800d820 <create_name+0x10c>
 800d81c:	2204      	movs	r2, #4
 800d81e:	e000      	b.n	800d822 <create_name+0x10e>
 800d820:	2200      	movs	r2, #0
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	330b      	adds	r3, #11
 800d826:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d828:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3720      	adds	r7, #32
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	08012898 	.word	0x08012898
 800d838:	0801176c 	.word	0x0801176c

0800d83c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d850:	e002      	b.n	800d858 <follow_path+0x1c>
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	3301      	adds	r3, #1
 800d856:	603b      	str	r3, [r7, #0]
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	2b2f      	cmp	r3, #47	; 0x2f
 800d85e:	d0f8      	beq.n	800d852 <follow_path+0x16>
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	2b5c      	cmp	r3, #92	; 0x5c
 800d866:	d0f4      	beq.n	800d852 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	2200      	movs	r2, #0
 800d86c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	2b1f      	cmp	r3, #31
 800d874:	d80a      	bhi.n	800d88c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2280      	movs	r2, #128	; 0x80
 800d87a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d87e:	2100      	movs	r1, #0
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff fcf9 	bl	800d278 <dir_sdi>
 800d886:	4603      	mov	r3, r0
 800d888:	75fb      	strb	r3, [r7, #23]
 800d88a:	e043      	b.n	800d914 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d88c:	463b      	mov	r3, r7
 800d88e:	4619      	mov	r1, r3
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff ff3f 	bl	800d714 <create_name>
 800d896:	4603      	mov	r3, r0
 800d898:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d89a:	7dfb      	ldrb	r3, [r7, #23]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d134      	bne.n	800d90a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff feaf 	bl	800d604 <dir_find>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d8b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d8b2:	7dfb      	ldrb	r3, [r7, #23]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00a      	beq.n	800d8ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d8b8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ba:	2b04      	cmp	r3, #4
 800d8bc:	d127      	bne.n	800d90e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d8be:	7afb      	ldrb	r3, [r7, #11]
 800d8c0:	f003 0304 	and.w	r3, r3, #4
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d122      	bne.n	800d90e <follow_path+0xd2>
 800d8c8:	2305      	movs	r3, #5
 800d8ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d8cc:	e01f      	b.n	800d90e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d8ce:	7afb      	ldrb	r3, [r7, #11]
 800d8d0:	f003 0304 	and.w	r3, r3, #4
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d11c      	bne.n	800d912 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	799b      	ldrb	r3, [r3, #6]
 800d8dc:	f003 0310 	and.w	r3, r3, #16
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d102      	bne.n	800d8ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d8e4:	2305      	movs	r3, #5
 800d8e6:	75fb      	strb	r3, [r7, #23]
 800d8e8:	e014      	b.n	800d914 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	695b      	ldr	r3, [r3, #20]
 800d8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8f8:	4413      	add	r3, r2
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f7ff fe42 	bl	800d586 <ld_clust>
 800d902:	4602      	mov	r2, r0
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d908:	e7c0      	b.n	800d88c <follow_path+0x50>
			if (res != FR_OK) break;
 800d90a:	bf00      	nop
 800d90c:	e002      	b.n	800d914 <follow_path+0xd8>
				break;
 800d90e:	bf00      	nop
 800d910:	e000      	b.n	800d914 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d912:	bf00      	nop
			}
		}
	}

	return res;
 800d914:	7dfb      	ldrb	r3, [r7, #23]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3718      	adds	r7, #24
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d91e:	b480      	push	{r7}
 800d920:	b087      	sub	sp, #28
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d926:	f04f 33ff 	mov.w	r3, #4294967295
 800d92a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d031      	beq.n	800d998 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	617b      	str	r3, [r7, #20]
 800d93a:	e002      	b.n	800d942 <get_ldnumber+0x24>
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	3301      	adds	r3, #1
 800d940:	617b      	str	r3, [r7, #20]
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b20      	cmp	r3, #32
 800d948:	d903      	bls.n	800d952 <get_ldnumber+0x34>
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	2b3a      	cmp	r3, #58	; 0x3a
 800d950:	d1f4      	bne.n	800d93c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	2b3a      	cmp	r3, #58	; 0x3a
 800d958:	d11c      	bne.n	800d994 <get_ldnumber+0x76>
			tp = *path;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	1c5a      	adds	r2, r3, #1
 800d964:	60fa      	str	r2, [r7, #12]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	3b30      	subs	r3, #48	; 0x30
 800d96a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	2b09      	cmp	r3, #9
 800d970:	d80e      	bhi.n	800d990 <get_ldnumber+0x72>
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	429a      	cmp	r2, r3
 800d978:	d10a      	bne.n	800d990 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d107      	bne.n	800d990 <get_ldnumber+0x72>
					vol = (int)i;
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	3301      	adds	r3, #1
 800d988:	617b      	str	r3, [r7, #20]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	697a      	ldr	r2, [r7, #20]
 800d98e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	e002      	b.n	800d99a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d994:	2300      	movs	r3, #0
 800d996:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d998:	693b      	ldr	r3, [r7, #16]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	371c      	adds	r7, #28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
	...

0800d9a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	70da      	strb	r2, [r3, #3]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d9be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d9c0:	6839      	ldr	r1, [r7, #0]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff f8e0 	bl	800cb88 <move_window>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <check_fs+0x2a>
 800d9ce:	2304      	movs	r3, #4
 800d9d0:	e038      	b.n	800da44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	3330      	adds	r3, #48	; 0x30
 800d9d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fe fe24 	bl	800c628 <ld_word>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d001      	beq.n	800d9f0 <check_fs+0x48>
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	e029      	b.n	800da44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9f6:	2be9      	cmp	r3, #233	; 0xe9
 800d9f8:	d009      	beq.n	800da0e <check_fs+0x66>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da00:	2beb      	cmp	r3, #235	; 0xeb
 800da02:	d11e      	bne.n	800da42 <check_fs+0x9a>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800da0a:	2b90      	cmp	r3, #144	; 0x90
 800da0c:	d119      	bne.n	800da42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	3330      	adds	r3, #48	; 0x30
 800da12:	3336      	adds	r3, #54	; 0x36
 800da14:	4618      	mov	r0, r3
 800da16:	f7fe fe1f 	bl	800c658 <ld_dword>
 800da1a:	4603      	mov	r3, r0
 800da1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da20:	4a0a      	ldr	r2, [pc, #40]	; (800da4c <check_fs+0xa4>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d101      	bne.n	800da2a <check_fs+0x82>
 800da26:	2300      	movs	r3, #0
 800da28:	e00c      	b.n	800da44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	3330      	adds	r3, #48	; 0x30
 800da2e:	3352      	adds	r3, #82	; 0x52
 800da30:	4618      	mov	r0, r3
 800da32:	f7fe fe11 	bl	800c658 <ld_dword>
 800da36:	4602      	mov	r2, r0
 800da38:	4b05      	ldr	r3, [pc, #20]	; (800da50 <check_fs+0xa8>)
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d101      	bne.n	800da42 <check_fs+0x9a>
 800da3e:	2300      	movs	r3, #0
 800da40:	e000      	b.n	800da44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800da42:	2302      	movs	r3, #2
}
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	00544146 	.word	0x00544146
 800da50:	33544146 	.word	0x33544146

0800da54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b096      	sub	sp, #88	; 0x58
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	4613      	mov	r3, r2
 800da60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2200      	movs	r2, #0
 800da66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f7ff ff58 	bl	800d91e <get_ldnumber>
 800da6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800da70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da72:	2b00      	cmp	r3, #0
 800da74:	da01      	bge.n	800da7a <find_volume+0x26>
 800da76:	230b      	movs	r3, #11
 800da78:	e22e      	b.n	800ded8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800da7a:	4aa8      	ldr	r2, [pc, #672]	; (800dd1c <find_volume+0x2c8>)
 800da7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800da84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <find_volume+0x3a>
 800da8a:	230c      	movs	r3, #12
 800da8c:	e224      	b.n	800ded8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800da94:	79fb      	ldrb	r3, [r7, #7]
 800da96:	f023 0301 	bic.w	r3, r3, #1
 800da9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800da9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d01a      	beq.n	800dada <find_volume+0x86>
		stat = disk_status(fs->drv);
 800daa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa6:	785b      	ldrb	r3, [r3, #1]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7fe fd1f 	bl	800c4ec <disk_status>
 800daae:	4603      	mov	r3, r0
 800dab0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d10c      	bne.n	800dada <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dac0:	79fb      	ldrb	r3, [r7, #7]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d007      	beq.n	800dad6 <find_volume+0x82>
 800dac6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800daca:	f003 0304 	and.w	r3, r3, #4
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d001      	beq.n	800dad6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dad2:	230a      	movs	r3, #10
 800dad4:	e200      	b.n	800ded8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800dad6:	2300      	movs	r3, #0
 800dad8:	e1fe      	b.n	800ded8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dadc:	2200      	movs	r2, #0
 800dade:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	785b      	ldrb	r3, [r3, #1]
 800daec:	4618      	mov	r0, r3
 800daee:	f7fe fd17 	bl	800c520 <disk_initialize>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800daf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dafc:	f003 0301 	and.w	r3, r3, #1
 800db00:	2b00      	cmp	r3, #0
 800db02:	d001      	beq.n	800db08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800db04:	2303      	movs	r3, #3
 800db06:	e1e7      	b.n	800ded8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800db08:	79fb      	ldrb	r3, [r7, #7]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d007      	beq.n	800db1e <find_volume+0xca>
 800db0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db12:	f003 0304 	and.w	r3, r3, #4
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800db1a:	230a      	movs	r3, #10
 800db1c:	e1dc      	b.n	800ded8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800db22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db26:	f7ff ff3f 	bl	800d9a8 <check_fs>
 800db2a:	4603      	mov	r3, r0
 800db2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800db30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db34:	2b02      	cmp	r3, #2
 800db36:	d14b      	bne.n	800dbd0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db38:	2300      	movs	r3, #0
 800db3a:	643b      	str	r3, [r7, #64]	; 0x40
 800db3c:	e01f      	b.n	800db7e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800db3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db46:	011b      	lsls	r3, r3, #4
 800db48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800db4c:	4413      	add	r3, r2
 800db4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	3304      	adds	r3, #4
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d006      	beq.n	800db68 <find_volume+0x114>
 800db5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5c:	3308      	adds	r3, #8
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fe fd7a 	bl	800c658 <ld_dword>
 800db64:	4602      	mov	r2, r0
 800db66:	e000      	b.n	800db6a <find_volume+0x116>
 800db68:	2200      	movs	r2, #0
 800db6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db6c:	009b      	lsls	r3, r3, #2
 800db6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800db72:	440b      	add	r3, r1
 800db74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db7a:	3301      	adds	r3, #1
 800db7c:	643b      	str	r3, [r7, #64]	; 0x40
 800db7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db80:	2b03      	cmp	r3, #3
 800db82:	d9dc      	bls.n	800db3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800db84:	2300      	movs	r3, #0
 800db86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800db88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <find_volume+0x140>
 800db8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db90:	3b01      	subs	r3, #1
 800db92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800db94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800db9c:	4413      	add	r3, r2
 800db9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dba2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d005      	beq.n	800dbb6 <find_volume+0x162>
 800dbaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dbae:	f7ff fefb 	bl	800d9a8 <check_fs>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	e000      	b.n	800dbb8 <find_volume+0x164>
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dbbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d905      	bls.n	800dbd0 <find_volume+0x17c>
 800dbc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	643b      	str	r3, [r7, #64]	; 0x40
 800dbca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbcc:	2b03      	cmp	r3, #3
 800dbce:	d9e1      	bls.n	800db94 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dbd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbd4:	2b04      	cmp	r3, #4
 800dbd6:	d101      	bne.n	800dbdc <find_volume+0x188>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	e17d      	b.n	800ded8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dbdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d901      	bls.n	800dbe8 <find_volume+0x194>
 800dbe4:	230d      	movs	r3, #13
 800dbe6:	e177      	b.n	800ded8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbea:	3330      	adds	r3, #48	; 0x30
 800dbec:	330b      	adds	r3, #11
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe fd1a 	bl	800c628 <ld_word>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbfa:	d001      	beq.n	800dc00 <find_volume+0x1ac>
 800dbfc:	230d      	movs	r3, #13
 800dbfe:	e16b      	b.n	800ded8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc02:	3330      	adds	r3, #48	; 0x30
 800dc04:	3316      	adds	r3, #22
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe fd0e 	bl	800c628 <ld_word>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d106      	bne.n	800dc24 <find_volume+0x1d0>
 800dc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc18:	3330      	adds	r3, #48	; 0x30
 800dc1a:	3324      	adds	r3, #36	; 0x24
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fe fd1b 	bl	800c658 <ld_dword>
 800dc22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc28:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800dc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc36:	789b      	ldrb	r3, [r3, #2]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d005      	beq.n	800dc48 <find_volume+0x1f4>
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3e:	789b      	ldrb	r3, [r3, #2]
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	d001      	beq.n	800dc48 <find_volume+0x1f4>
 800dc44:	230d      	movs	r3, #13
 800dc46:	e147      	b.n	800ded8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	789b      	ldrb	r3, [r3, #2]
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc50:	fb02 f303 	mul.w	r3, r2, r3
 800dc54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc64:	895b      	ldrh	r3, [r3, #10]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d008      	beq.n	800dc7c <find_volume+0x228>
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6c:	895b      	ldrh	r3, [r3, #10]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc72:	895b      	ldrh	r3, [r3, #10]
 800dc74:	3b01      	subs	r3, #1
 800dc76:	4013      	ands	r3, r2
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <find_volume+0x22c>
 800dc7c:	230d      	movs	r3, #13
 800dc7e:	e12b      	b.n	800ded8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc82:	3330      	adds	r3, #48	; 0x30
 800dc84:	3311      	adds	r3, #17
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fe fcce 	bl	800c628 <ld_word>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	461a      	mov	r2, r3
 800dc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc96:	891b      	ldrh	r3, [r3, #8]
 800dc98:	f003 030f 	and.w	r3, r3, #15
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <find_volume+0x252>
 800dca2:	230d      	movs	r3, #13
 800dca4:	e118      	b.n	800ded8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca8:	3330      	adds	r3, #48	; 0x30
 800dcaa:	3313      	adds	r3, #19
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fe fcbb 	bl	800c628 <ld_word>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dcb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d106      	bne.n	800dcca <find_volume+0x276>
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbe:	3330      	adds	r3, #48	; 0x30
 800dcc0:	3320      	adds	r3, #32
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fe fcc8 	bl	800c658 <ld_dword>
 800dcc8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dccc:	3330      	adds	r3, #48	; 0x30
 800dcce:	330e      	adds	r3, #14
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fe fca9 	bl	800c628 <ld_word>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dcda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <find_volume+0x290>
 800dce0:	230d      	movs	r3, #13
 800dce2:	e0f9      	b.n	800ded8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dce4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dce8:	4413      	add	r3, r2
 800dcea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcec:	8912      	ldrh	r2, [r2, #8]
 800dcee:	0912      	lsrs	r2, r2, #4
 800dcf0:	b292      	uxth	r2, r2
 800dcf2:	4413      	add	r3, r2
 800dcf4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dcf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d201      	bcs.n	800dd02 <find_volume+0x2ae>
 800dcfe:	230d      	movs	r3, #13
 800dd00:	e0ea      	b.n	800ded8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dd02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd0a:	8952      	ldrh	r2, [r2, #10]
 800dd0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd10:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d103      	bne.n	800dd20 <find_volume+0x2cc>
 800dd18:	230d      	movs	r3, #13
 800dd1a:	e0dd      	b.n	800ded8 <find_volume+0x484>
 800dd1c:	20001dc8 	.word	0x20001dc8
		fmt = FS_FAT32;
 800dd20:	2303      	movs	r3, #3
 800dd22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d802      	bhi.n	800dd36 <find_volume+0x2e2>
 800dd30:	2302      	movs	r3, #2
 800dd32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd38:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d802      	bhi.n	800dd46 <find_volume+0x2f2>
 800dd40:	2301      	movs	r3, #1
 800dd42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd48:	1c9a      	adds	r2, r3, #2
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd52:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dd54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd58:	441a      	add	r2, r3
 800dd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dd5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	441a      	add	r2, r3
 800dd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd66:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800dd68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd6c:	2b03      	cmp	r3, #3
 800dd6e:	d11e      	bne.n	800ddae <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd72:	3330      	adds	r3, #48	; 0x30
 800dd74:	332a      	adds	r3, #42	; 0x2a
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fe fc56 	bl	800c628 <ld_word>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <find_volume+0x332>
 800dd82:	230d      	movs	r3, #13
 800dd84:	e0a8      	b.n	800ded8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd88:	891b      	ldrh	r3, [r3, #8]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <find_volume+0x33e>
 800dd8e:	230d      	movs	r3, #13
 800dd90:	e0a2      	b.n	800ded8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd94:	3330      	adds	r3, #48	; 0x30
 800dd96:	332c      	adds	r3, #44	; 0x2c
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe fc5d 	bl	800c658 <ld_dword>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda6:	695b      	ldr	r3, [r3, #20]
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ddac:	e01f      	b.n	800ddee <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ddae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb0:	891b      	ldrh	r3, [r3, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d101      	bne.n	800ddba <find_volume+0x366>
 800ddb6:	230d      	movs	r3, #13
 800ddb8:	e08e      	b.n	800ded8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ddba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddbc:	6a1a      	ldr	r2, [r3, #32]
 800ddbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc0:	441a      	add	r2, r3
 800ddc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ddc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	d103      	bne.n	800ddd6 <find_volume+0x382>
 800ddce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	e00a      	b.n	800ddec <find_volume+0x398>
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd8:	695a      	ldr	r2, [r3, #20]
 800ddda:	4613      	mov	r3, r2
 800dddc:	005b      	lsls	r3, r3, #1
 800ddde:	4413      	add	r3, r2
 800dde0:	085a      	lsrs	r2, r3, #1
 800dde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	f003 0301 	and.w	r3, r3, #1
 800ddea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ddec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf0:	699a      	ldr	r2, [r3, #24]
 800ddf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddf4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ddf8:	0a5b      	lsrs	r3, r3, #9
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d201      	bcs.n	800de02 <find_volume+0x3ae>
 800ddfe:	230d      	movs	r3, #13
 800de00:	e06a      	b.n	800ded8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800de02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de04:	f04f 32ff 	mov.w	r2, #4294967295
 800de08:	611a      	str	r2, [r3, #16]
 800de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0c:	691a      	ldr	r2, [r3, #16]
 800de0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de10:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800de12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de14:	2280      	movs	r2, #128	; 0x80
 800de16:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800de18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de1c:	2b03      	cmp	r3, #3
 800de1e:	d149      	bne.n	800deb4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800de20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de22:	3330      	adds	r3, #48	; 0x30
 800de24:	3330      	adds	r3, #48	; 0x30
 800de26:	4618      	mov	r0, r3
 800de28:	f7fe fbfe 	bl	800c628 <ld_word>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d140      	bne.n	800deb4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800de32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de34:	3301      	adds	r3, #1
 800de36:	4619      	mov	r1, r3
 800de38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de3a:	f7fe fea5 	bl	800cb88 <move_window>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d137      	bne.n	800deb4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800de44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de46:	2200      	movs	r2, #0
 800de48:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800de4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4c:	3330      	adds	r3, #48	; 0x30
 800de4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe fbe8 	bl	800c628 <ld_word>
 800de58:	4603      	mov	r3, r0
 800de5a:	461a      	mov	r2, r3
 800de5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de60:	429a      	cmp	r2, r3
 800de62:	d127      	bne.n	800deb4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	3330      	adds	r3, #48	; 0x30
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fe fbf5 	bl	800c658 <ld_dword>
 800de6e:	4602      	mov	r2, r0
 800de70:	4b1b      	ldr	r3, [pc, #108]	; (800dee0 <find_volume+0x48c>)
 800de72:	429a      	cmp	r2, r3
 800de74:	d11e      	bne.n	800deb4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800de76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de78:	3330      	adds	r3, #48	; 0x30
 800de7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fe fbea 	bl	800c658 <ld_dword>
 800de84:	4602      	mov	r2, r0
 800de86:	4b17      	ldr	r3, [pc, #92]	; (800dee4 <find_volume+0x490>)
 800de88:	429a      	cmp	r2, r3
 800de8a:	d113      	bne.n	800deb4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800de8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8e:	3330      	adds	r3, #48	; 0x30
 800de90:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800de94:	4618      	mov	r0, r3
 800de96:	f7fe fbdf 	bl	800c658 <ld_dword>
 800de9a:	4602      	mov	r2, r0
 800de9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea2:	3330      	adds	r3, #48	; 0x30
 800dea4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fe fbd5 	bl	800c658 <ld_dword>
 800deae:	4602      	mov	r2, r0
 800deb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800deb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800deba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800debc:	4b0a      	ldr	r3, [pc, #40]	; (800dee8 <find_volume+0x494>)
 800debe:	881b      	ldrh	r3, [r3, #0]
 800dec0:	3301      	adds	r3, #1
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	4b08      	ldr	r3, [pc, #32]	; (800dee8 <find_volume+0x494>)
 800dec6:	801a      	strh	r2, [r3, #0]
 800dec8:	4b07      	ldr	r3, [pc, #28]	; (800dee8 <find_volume+0x494>)
 800deca:	881a      	ldrh	r2, [r3, #0]
 800decc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dece:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ded0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ded2:	f7fe fdf1 	bl	800cab8 <clear_lock>
#endif
	return FR_OK;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3758      	adds	r7, #88	; 0x58
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	41615252 	.word	0x41615252
 800dee4:	61417272 	.word	0x61417272
 800dee8:	20001dcc 	.word	0x20001dcc

0800deec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800def6:	2309      	movs	r3, #9
 800def8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d01c      	beq.n	800df3a <validate+0x4e>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d018      	beq.n	800df3a <validate+0x4e>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d013      	beq.n	800df3a <validate+0x4e>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	889a      	ldrh	r2, [r3, #4]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	88db      	ldrh	r3, [r3, #6]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d10c      	bne.n	800df3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	785b      	ldrb	r3, [r3, #1]
 800df26:	4618      	mov	r0, r3
 800df28:	f7fe fae0 	bl	800c4ec <disk_status>
 800df2c:	4603      	mov	r3, r0
 800df2e:	f003 0301 	and.w	r3, r3, #1
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <validate+0x4e>
			res = FR_OK;
 800df36:	2300      	movs	r3, #0
 800df38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d102      	bne.n	800df46 <validate+0x5a>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	e000      	b.n	800df48 <validate+0x5c>
 800df46:	2300      	movs	r3, #0
 800df48:	683a      	ldr	r2, [r7, #0]
 800df4a:	6013      	str	r3, [r2, #0]
	return res;
 800df4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b088      	sub	sp, #32
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	4613      	mov	r3, r2
 800df64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800df6a:	f107 0310 	add.w	r3, r7, #16
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff fcd5 	bl	800d91e <get_ldnumber>
 800df74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	da01      	bge.n	800df80 <f_mount+0x28>
 800df7c:	230b      	movs	r3, #11
 800df7e:	e02b      	b.n	800dfd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800df80:	4a17      	ldr	r2, [pc, #92]	; (800dfe0 <f_mount+0x88>)
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d005      	beq.n	800df9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800df90:	69b8      	ldr	r0, [r7, #24]
 800df92:	f7fe fd91 	bl	800cab8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	2200      	movs	r2, #0
 800df9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d002      	beq.n	800dfa8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	490d      	ldr	r1, [pc, #52]	; (800dfe0 <f_mount+0x88>)
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <f_mount+0x66>
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d001      	beq.n	800dfc2 <f_mount+0x6a>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	e00a      	b.n	800dfd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dfc2:	f107 010c 	add.w	r1, r7, #12
 800dfc6:	f107 0308 	add.w	r3, r7, #8
 800dfca:	2200      	movs	r2, #0
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff fd41 	bl	800da54 <find_volume>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dfd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3720      	adds	r7, #32
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	20001dc8 	.word	0x20001dc8

0800dfe4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b098      	sub	sp, #96	; 0x60
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	4613      	mov	r3, r2
 800dff0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d101      	bne.n	800dffc <f_open+0x18>
 800dff8:	2309      	movs	r3, #9
 800dffa:	e1ad      	b.n	800e358 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dffc:	79fb      	ldrb	r3, [r7, #7]
 800dffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e002:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e004:	79fa      	ldrb	r2, [r7, #7]
 800e006:	f107 0110 	add.w	r1, r7, #16
 800e00a:	f107 0308 	add.w	r3, r7, #8
 800e00e:	4618      	mov	r0, r3
 800e010:	f7ff fd20 	bl	800da54 <find_volume>
 800e014:	4603      	mov	r3, r0
 800e016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e01a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f040 8191 	bne.w	800e346 <f_open+0x362>
		dj.obj.fs = fs;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e028:	68ba      	ldr	r2, [r7, #8]
 800e02a:	f107 0314 	add.w	r3, r7, #20
 800e02e:	4611      	mov	r1, r2
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff fc03 	bl	800d83c <follow_path>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e03c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e040:	2b00      	cmp	r3, #0
 800e042:	d11a      	bne.n	800e07a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e044:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e048:	b25b      	sxtb	r3, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	da03      	bge.n	800e056 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e04e:	2306      	movs	r3, #6
 800e050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e054:	e011      	b.n	800e07a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e056:	79fb      	ldrb	r3, [r7, #7]
 800e058:	f023 0301 	bic.w	r3, r3, #1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	bf14      	ite	ne
 800e060:	2301      	movne	r3, #1
 800e062:	2300      	moveq	r3, #0
 800e064:	b2db      	uxtb	r3, r3
 800e066:	461a      	mov	r2, r3
 800e068:	f107 0314 	add.w	r3, r7, #20
 800e06c:	4611      	mov	r1, r2
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe fbda 	bl	800c828 <chk_lock>
 800e074:	4603      	mov	r3, r0
 800e076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	f003 031c 	and.w	r3, r3, #28
 800e080:	2b00      	cmp	r3, #0
 800e082:	d07f      	beq.n	800e184 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d017      	beq.n	800e0bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e08c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e090:	2b04      	cmp	r3, #4
 800e092:	d10e      	bne.n	800e0b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e094:	f7fe fc24 	bl	800c8e0 <enq_lock>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d006      	beq.n	800e0ac <f_open+0xc8>
 800e09e:	f107 0314 	add.w	r3, r7, #20
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7ff fb03 	bl	800d6ae <dir_register>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	e000      	b.n	800e0ae <f_open+0xca>
 800e0ac:	2312      	movs	r3, #18
 800e0ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e0b2:	79fb      	ldrb	r3, [r7, #7]
 800e0b4:	f043 0308 	orr.w	r3, r3, #8
 800e0b8:	71fb      	strb	r3, [r7, #7]
 800e0ba:	e010      	b.n	800e0de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e0bc:	7ebb      	ldrb	r3, [r7, #26]
 800e0be:	f003 0311 	and.w	r3, r3, #17
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d003      	beq.n	800e0ce <f_open+0xea>
					res = FR_DENIED;
 800e0c6:	2307      	movs	r3, #7
 800e0c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e0cc:	e007      	b.n	800e0de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	f003 0304 	and.w	r3, r3, #4
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <f_open+0xfa>
 800e0d8:	2308      	movs	r3, #8
 800e0da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e0de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d168      	bne.n	800e1b8 <f_open+0x1d4>
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	f003 0308 	and.w	r3, r3, #8
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d063      	beq.n	800e1b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e0f0:	f7fb fb12 	bl	8009718 <get_fattime>
 800e0f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f8:	330e      	adds	r3, #14
 800e0fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fe fae9 	bl	800c6d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e104:	3316      	adds	r3, #22
 800e106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e108:	4618      	mov	r0, r3
 800e10a:	f7fe fae3 	bl	800c6d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e110:	330b      	adds	r3, #11
 800e112:	2220      	movs	r2, #32
 800e114:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e11a:	4611      	mov	r1, r2
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7ff fa32 	bl	800d586 <ld_clust>
 800e122:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e128:	2200      	movs	r2, #0
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff fa4a 	bl	800d5c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e132:	331c      	adds	r3, #28
 800e134:	2100      	movs	r1, #0
 800e136:	4618      	mov	r0, r3
 800e138:	f7fe facc 	bl	800c6d4 <st_dword>
					fs->wflag = 1;
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	2201      	movs	r2, #1
 800e140:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e144:	2b00      	cmp	r3, #0
 800e146:	d037      	beq.n	800e1b8 <f_open+0x1d4>
						dw = fs->winsect;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e14e:	f107 0314 	add.w	r3, r7, #20
 800e152:	2200      	movs	r2, #0
 800e154:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e156:	4618      	mov	r0, r3
 800e158:	f7fe ff5d 	bl	800d016 <remove_chain>
 800e15c:	4603      	mov	r3, r0
 800e15e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e166:	2b00      	cmp	r3, #0
 800e168:	d126      	bne.n	800e1b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fe fd0a 	bl	800cb88 <move_window>
 800e174:	4603      	mov	r3, r0
 800e176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e17e:	3a01      	subs	r2, #1
 800e180:	60da      	str	r2, [r3, #12]
 800e182:	e019      	b.n	800e1b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e184:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d115      	bne.n	800e1b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e18c:	7ebb      	ldrb	r3, [r7, #26]
 800e18e:	f003 0310 	and.w	r3, r3, #16
 800e192:	2b00      	cmp	r3, #0
 800e194:	d003      	beq.n	800e19e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e196:	2304      	movs	r3, #4
 800e198:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e19c:	e00c      	b.n	800e1b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e19e:	79fb      	ldrb	r3, [r7, #7]
 800e1a0:	f003 0302 	and.w	r3, r3, #2
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d007      	beq.n	800e1b8 <f_open+0x1d4>
 800e1a8:	7ebb      	ldrb	r3, [r7, #26]
 800e1aa:	f003 0301 	and.w	r3, r3, #1
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d002      	beq.n	800e1b8 <f_open+0x1d4>
						res = FR_DENIED;
 800e1b2:	2307      	movs	r3, #7
 800e1b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e1b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d128      	bne.n	800e212 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e1c0:	79fb      	ldrb	r3, [r7, #7]
 800e1c2:	f003 0308 	and.w	r3, r3, #8
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d003      	beq.n	800e1d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e1ca:	79fb      	ldrb	r3, [r7, #7]
 800e1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e1da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e1e0:	79fb      	ldrb	r3, [r7, #7]
 800e1e2:	f023 0301 	bic.w	r3, r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	bf14      	ite	ne
 800e1ea:	2301      	movne	r3, #1
 800e1ec:	2300      	moveq	r3, #0
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	f107 0314 	add.w	r3, r7, #20
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fe fb93 	bl	800c924 <inc_lock>
 800e1fe:	4602      	mov	r2, r0
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d102      	bne.n	800e212 <f_open+0x22e>
 800e20c:	2302      	movs	r3, #2
 800e20e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e216:	2b00      	cmp	r3, #0
 800e218:	f040 8095 	bne.w	800e346 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e220:	4611      	mov	r1, r2
 800e222:	4618      	mov	r0, r3
 800e224:	f7ff f9af 	bl	800d586 <ld_clust>
 800e228:	4602      	mov	r2, r0
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e230:	331c      	adds	r3, #28
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fa10 	bl	800c658 <ld_dword>
 800e238:	4602      	mov	r2, r0
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2200      	movs	r2, #0
 800e242:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e244:	693a      	ldr	r2, [r7, #16]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	88da      	ldrh	r2, [r3, #6]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	79fa      	ldrb	r2, [r7, #7]
 800e256:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2200      	movs	r2, #0
 800e268:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	3330      	adds	r3, #48	; 0x30
 800e26e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e272:	2100      	movs	r1, #0
 800e274:	4618      	mov	r0, r3
 800e276:	f7fe fa7a 	bl	800c76e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e27a:	79fb      	ldrb	r3, [r7, #7]
 800e27c:	f003 0320 	and.w	r3, r3, #32
 800e280:	2b00      	cmp	r3, #0
 800e282:	d060      	beq.n	800e346 <f_open+0x362>
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d05c      	beq.n	800e346 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	68da      	ldr	r2, [r3, #12]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	895b      	ldrh	r3, [r3, #10]
 800e298:	025b      	lsls	r3, r3, #9
 800e29a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	657b      	str	r3, [r7, #84]	; 0x54
 800e2a8:	e016      	b.n	800e2d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fe fd25 	bl	800ccfe <get_fat>
 800e2b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e2b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d802      	bhi.n	800e2c2 <f_open+0x2de>
 800e2bc:	2302      	movs	r3, #2
 800e2be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e2c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c8:	d102      	bne.n	800e2d0 <f_open+0x2ec>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	657b      	str	r3, [r7, #84]	; 0x54
 800e2d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d103      	bne.n	800e2e8 <f_open+0x304>
 800e2e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d8e0      	bhi.n	800e2aa <f_open+0x2c6>
				}
				fp->clust = clst;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e2ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d127      	bne.n	800e346 <f_open+0x362>
 800e2f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d022      	beq.n	800e346 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e304:	4618      	mov	r0, r3
 800e306:	f7fe fcdb 	bl	800ccc0 <clust2sect>
 800e30a:	6478      	str	r0, [r7, #68]	; 0x44
 800e30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d103      	bne.n	800e31a <f_open+0x336>
						res = FR_INT_ERR;
 800e312:	2302      	movs	r3, #2
 800e314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e318:	e015      	b.n	800e346 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e31a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e31c:	0a5a      	lsrs	r2, r3, #9
 800e31e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e320:	441a      	add	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	7858      	ldrb	r0, [r3, #1]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6a1a      	ldr	r2, [r3, #32]
 800e334:	2301      	movs	r3, #1
 800e336:	f7fe f919 	bl	800c56c <disk_read>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <f_open+0x362>
 800e340:	2301      	movs	r3, #1
 800e342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d002      	beq.n	800e354 <f_open+0x370>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2200      	movs	r2, #0
 800e352:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e354:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3760      	adds	r7, #96	; 0x60
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b08e      	sub	sp, #56	; 0x38
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
 800e36c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2200      	movs	r2, #0
 800e376:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f107 0214 	add.w	r2, r7, #20
 800e37e:	4611      	mov	r1, r2
 800e380:	4618      	mov	r0, r3
 800e382:	f7ff fdb3 	bl	800deec <validate>
 800e386:	4603      	mov	r3, r0
 800e388:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e38c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e390:	2b00      	cmp	r3, #0
 800e392:	d107      	bne.n	800e3a4 <f_read+0x44>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	7d5b      	ldrb	r3, [r3, #21]
 800e398:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e39c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <f_read+0x4a>
 800e3a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3a8:	e115      	b.n	800e5d6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	7d1b      	ldrb	r3, [r3, #20]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <f_read+0x5a>
 800e3b6:	2307      	movs	r3, #7
 800e3b8:	e10d      	b.n	800e5d6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	68da      	ldr	r2, [r3, #12]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	699b      	ldr	r3, [r3, #24]
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	f240 80fe 	bls.w	800e5cc <f_read+0x26c>
 800e3d0:	6a3b      	ldr	r3, [r7, #32]
 800e3d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e3d4:	e0fa      	b.n	800e5cc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f040 80c6 	bne.w	800e570 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	699b      	ldr	r3, [r3, #24]
 800e3e8:	0a5b      	lsrs	r3, r3, #9
 800e3ea:	697a      	ldr	r2, [r7, #20]
 800e3ec:	8952      	ldrh	r2, [r2, #10]
 800e3ee:	3a01      	subs	r2, #1
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d12f      	bne.n	800e45a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	699b      	ldr	r3, [r3, #24]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d103      	bne.n	800e40a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	689b      	ldr	r3, [r3, #8]
 800e406:	633b      	str	r3, [r7, #48]	; 0x30
 800e408:	e013      	b.n	800e432 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d007      	beq.n	800e422 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	699b      	ldr	r3, [r3, #24]
 800e416:	4619      	mov	r1, r3
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f7fe fef9 	bl	800d210 <clmt_clust>
 800e41e:	6338      	str	r0, [r7, #48]	; 0x30
 800e420:	e007      	b.n	800e432 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	69db      	ldr	r3, [r3, #28]
 800e428:	4619      	mov	r1, r3
 800e42a:	4610      	mov	r0, r2
 800e42c:	f7fe fc67 	bl	800ccfe <get_fat>
 800e430:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e434:	2b01      	cmp	r3, #1
 800e436:	d804      	bhi.n	800e442 <f_read+0xe2>
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2202      	movs	r2, #2
 800e43c:	755a      	strb	r2, [r3, #21]
 800e43e:	2302      	movs	r3, #2
 800e440:	e0c9      	b.n	800e5d6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e448:	d104      	bne.n	800e454 <f_read+0xf4>
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2201      	movs	r2, #1
 800e44e:	755a      	strb	r2, [r3, #21]
 800e450:	2301      	movs	r3, #1
 800e452:	e0c0      	b.n	800e5d6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e458:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	4619      	mov	r1, r3
 800e462:	4610      	mov	r0, r2
 800e464:	f7fe fc2c 	bl	800ccc0 <clust2sect>
 800e468:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d104      	bne.n	800e47a <f_read+0x11a>
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2202      	movs	r2, #2
 800e474:	755a      	strb	r2, [r3, #21]
 800e476:	2302      	movs	r3, #2
 800e478:	e0ad      	b.n	800e5d6 <f_read+0x276>
			sect += csect;
 800e47a:	69ba      	ldr	r2, [r7, #24]
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	4413      	add	r3, r2
 800e480:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	0a5b      	lsrs	r3, r3, #9
 800e486:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d039      	beq.n	800e502 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e48e:	69fa      	ldr	r2, [r7, #28]
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	4413      	add	r3, r2
 800e494:	697a      	ldr	r2, [r7, #20]
 800e496:	8952      	ldrh	r2, [r2, #10]
 800e498:	4293      	cmp	r3, r2
 800e49a:	d905      	bls.n	800e4a8 <f_read+0x148>
					cc = fs->csize - csect;
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	895b      	ldrh	r3, [r3, #10]
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	1ad3      	subs	r3, r2, r3
 800e4a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	7858      	ldrb	r0, [r3, #1]
 800e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ae:	69ba      	ldr	r2, [r7, #24]
 800e4b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4b2:	f7fe f85b 	bl	800c56c <disk_read>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d004      	beq.n	800e4c6 <f_read+0x166>
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	755a      	strb	r2, [r3, #21]
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e087      	b.n	800e5d6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	7d1b      	ldrb	r3, [r3, #20]
 800e4ca:	b25b      	sxtb	r3, r3
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	da14      	bge.n	800e4fa <f_read+0x19a>
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6a1a      	ldr	r2, [r3, #32]
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	1ad3      	subs	r3, r2, r3
 800e4d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d90d      	bls.n	800e4fa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6a1a      	ldr	r2, [r3, #32]
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	1ad3      	subs	r3, r2, r3
 800e4e6:	025b      	lsls	r3, r3, #9
 800e4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ea:	18d0      	adds	r0, r2, r3
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	3330      	adds	r3, #48	; 0x30
 800e4f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	f7fe f919 	bl	800c72c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fc:	025b      	lsls	r3, r3, #9
 800e4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e500:	e050      	b.n	800e5a4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6a1b      	ldr	r3, [r3, #32]
 800e506:	69ba      	ldr	r2, [r7, #24]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d02e      	beq.n	800e56a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	7d1b      	ldrb	r3, [r3, #20]
 800e510:	b25b      	sxtb	r3, r3
 800e512:	2b00      	cmp	r3, #0
 800e514:	da18      	bge.n	800e548 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	7858      	ldrb	r0, [r3, #1]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6a1a      	ldr	r2, [r3, #32]
 800e524:	2301      	movs	r3, #1
 800e526:	f7fe f841 	bl	800c5ac <disk_write>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <f_read+0x1da>
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2201      	movs	r2, #1
 800e534:	755a      	strb	r2, [r3, #21]
 800e536:	2301      	movs	r3, #1
 800e538:	e04d      	b.n	800e5d6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	7d1b      	ldrb	r3, [r3, #20]
 800e53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e542:	b2da      	uxtb	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	7858      	ldrb	r0, [r3, #1]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e552:	2301      	movs	r3, #1
 800e554:	69ba      	ldr	r2, [r7, #24]
 800e556:	f7fe f809 	bl	800c56c <disk_read>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d004      	beq.n	800e56a <f_read+0x20a>
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2201      	movs	r2, #1
 800e564:	755a      	strb	r2, [r3, #21]
 800e566:	2301      	movs	r3, #1
 800e568:	e035      	b.n	800e5d6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	69ba      	ldr	r2, [r7, #24]
 800e56e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	699b      	ldr	r3, [r3, #24]
 800e574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e578:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e57c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e57e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	429a      	cmp	r2, r3
 800e584:	d901      	bls.n	800e58a <f_read+0x22a>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	699b      	ldr	r3, [r3, #24]
 800e594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e598:	4413      	add	r3, r2
 800e59a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e59c:	4619      	mov	r1, r3
 800e59e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5a0:	f7fe f8c4 	bl	800c72c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a8:	4413      	add	r3, r2
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	699a      	ldr	r2, [r3, #24]
 800e5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b2:	441a      	add	r2, r3
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	619a      	str	r2, [r3, #24]
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5be:	441a      	add	r2, r3
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	f47f af01 	bne.w	800e3d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e5d4:	2300      	movs	r3, #0
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3738      	adds	r7, #56	; 0x38
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b086      	sub	sp, #24
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f107 0208 	add.w	r2, r7, #8
 800e5ec:	4611      	mov	r1, r2
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7ff fc7c 	bl	800deec <validate>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d168      	bne.n	800e6d0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	7d1b      	ldrb	r3, [r3, #20]
 800e602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e606:	2b00      	cmp	r3, #0
 800e608:	d062      	beq.n	800e6d0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	7d1b      	ldrb	r3, [r3, #20]
 800e60e:	b25b      	sxtb	r3, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	da15      	bge.n	800e640 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	7858      	ldrb	r0, [r3, #1]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6a1a      	ldr	r2, [r3, #32]
 800e622:	2301      	movs	r3, #1
 800e624:	f7fd ffc2 	bl	800c5ac <disk_write>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <f_sync+0x54>
 800e62e:	2301      	movs	r3, #1
 800e630:	e04f      	b.n	800e6d2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	7d1b      	ldrb	r3, [r3, #20]
 800e636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e63a:	b2da      	uxtb	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e640:	f7fb f86a 	bl	8009718 <get_fattime>
 800e644:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64c:	4619      	mov	r1, r3
 800e64e:	4610      	mov	r0, r2
 800e650:	f7fe fa9a 	bl	800cb88 <move_window>
 800e654:	4603      	mov	r3, r0
 800e656:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e658:	7dfb      	ldrb	r3, [r7, #23]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d138      	bne.n	800e6d0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e662:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	330b      	adds	r3, #11
 800e668:	781a      	ldrb	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	330b      	adds	r3, #11
 800e66e:	f042 0220 	orr.w	r2, r2, #32
 800e672:	b2d2      	uxtb	r2, r2
 800e674:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6818      	ldr	r0, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	461a      	mov	r2, r3
 800e680:	68f9      	ldr	r1, [r7, #12]
 800e682:	f7fe ff9f 	bl	800d5c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f103 021c 	add.w	r2, r3, #28
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	4619      	mov	r1, r3
 800e692:	4610      	mov	r0, r2
 800e694:	f7fe f81e 	bl	800c6d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	3316      	adds	r3, #22
 800e69c:	6939      	ldr	r1, [r7, #16]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe f818 	bl	800c6d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	3312      	adds	r3, #18
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fd fff7 	bl	800c69e <st_word>
					fs->wflag = 1;
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe fa93 	bl	800cbe4 <sync_fs>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	7d1b      	ldrb	r3, [r3, #20]
 800e6c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6ca:	b2da      	uxtb	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b084      	sub	sp, #16
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7ff ff7b 	bl	800e5de <f_sync>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d118      	bne.n	800e724 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f107 0208 	add.w	r2, r7, #8
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7ff fbf6 	bl	800deec <validate>
 800e700:	4603      	mov	r3, r0
 800e702:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d10c      	bne.n	800e724 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fe f996 	bl	800ca40 <dec_lock>
 800e714:	4603      	mov	r3, r0
 800e716:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e718:	7bfb      	ldrb	r3, [r7, #15]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d102      	bne.n	800e724 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e724:	7bfb      	ldrb	r3, [r7, #15]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3710      	adds	r7, #16
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b090      	sub	sp, #64	; 0x40
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
 800e736:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f107 0208 	add.w	r2, r7, #8
 800e73e:	4611      	mov	r1, r2
 800e740:	4618      	mov	r0, r3
 800e742:	f7ff fbd3 	bl	800deec <validate>
 800e746:	4603      	mov	r3, r0
 800e748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e74c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e750:	2b00      	cmp	r3, #0
 800e752:	d103      	bne.n	800e75c <f_lseek+0x2e>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	7d5b      	ldrb	r3, [r3, #21]
 800e758:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e75c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e760:	2b00      	cmp	r3, #0
 800e762:	d002      	beq.n	800e76a <f_lseek+0x3c>
 800e764:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e768:	e1e6      	b.n	800eb38 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 80d1 	beq.w	800e916 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77a:	d15a      	bne.n	800e832 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e780:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e784:	1d1a      	adds	r2, r3, #4
 800e786:	627a      	str	r2, [r7, #36]	; 0x24
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	617b      	str	r3, [r7, #20]
 800e78c:	2302      	movs	r3, #2
 800e78e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	689b      	ldr	r3, [r3, #8]
 800e794:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d03a      	beq.n	800e812 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79e:	613b      	str	r3, [r7, #16]
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	3302      	adds	r3, #2
 800e7a8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ac:	60fb      	str	r3, [r7, #12]
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7fe faa0 	bl	800ccfe <get_fat>
 800e7be:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d804      	bhi.n	800e7d0 <f_lseek+0xa2>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2202      	movs	r2, #2
 800e7ca:	755a      	strb	r2, [r3, #21]
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	e1b3      	b.n	800eb38 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d6:	d104      	bne.n	800e7e2 <f_lseek+0xb4>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	755a      	strb	r2, [r3, #21]
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e1aa      	b.n	800eb38 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d0de      	beq.n	800e7aa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d809      	bhi.n	800e808 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f6:	1d1a      	adds	r2, r3, #4
 800e7f8:	627a      	str	r2, [r7, #36]	; 0x24
 800e7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e800:	1d1a      	adds	r2, r3, #4
 800e802:	627a      	str	r2, [r7, #36]	; 0x24
 800e804:	693a      	ldr	r2, [r7, #16]
 800e806:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e80e:	429a      	cmp	r2, r3
 800e810:	d3c4      	bcc.n	800e79c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e818:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d803      	bhi.n	800e82a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e824:	2200      	movs	r2, #0
 800e826:	601a      	str	r2, [r3, #0]
 800e828:	e184      	b.n	800eb34 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e82a:	2311      	movs	r3, #17
 800e82c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e830:	e180      	b.n	800eb34 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	683a      	ldr	r2, [r7, #0]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d902      	bls.n	800e842 <f_lseek+0x114>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	683a      	ldr	r2, [r7, #0]
 800e846:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f000 8172 	beq.w	800eb34 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	3b01      	subs	r3, #1
 800e854:	4619      	mov	r1, r3
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7fe fcda 	bl	800d210 <clmt_clust>
 800e85c:	4602      	mov	r2, r0
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	69db      	ldr	r3, [r3, #28]
 800e868:	4619      	mov	r1, r3
 800e86a:	4610      	mov	r0, r2
 800e86c:	f7fe fa28 	bl	800ccc0 <clust2sect>
 800e870:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d104      	bne.n	800e882 <f_lseek+0x154>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2202      	movs	r2, #2
 800e87c:	755a      	strb	r2, [r3, #21]
 800e87e:	2302      	movs	r3, #2
 800e880:	e15a      	b.n	800eb38 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	3b01      	subs	r3, #1
 800e886:	0a5b      	lsrs	r3, r3, #9
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	8952      	ldrh	r2, [r2, #10]
 800e88c:	3a01      	subs	r2, #1
 800e88e:	4013      	ands	r3, r2
 800e890:	69ba      	ldr	r2, [r7, #24]
 800e892:	4413      	add	r3, r2
 800e894:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f000 8148 	beq.w	800eb34 <f_lseek+0x406>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6a1b      	ldr	r3, [r3, #32]
 800e8a8:	69ba      	ldr	r2, [r7, #24]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	f000 8142 	beq.w	800eb34 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	7d1b      	ldrb	r3, [r3, #20]
 800e8b4:	b25b      	sxtb	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	da18      	bge.n	800e8ec <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	7858      	ldrb	r0, [r3, #1]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6a1a      	ldr	r2, [r3, #32]
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	f7fd fe6f 	bl	800c5ac <disk_write>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d004      	beq.n	800e8de <f_lseek+0x1b0>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	755a      	strb	r2, [r3, #21]
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e12c      	b.n	800eb38 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	7d1b      	ldrb	r3, [r3, #20]
 800e8e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8e6:	b2da      	uxtb	r2, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	7858      	ldrb	r0, [r3, #1]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	69ba      	ldr	r2, [r7, #24]
 800e8fa:	f7fd fe37 	bl	800c56c <disk_read>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d004      	beq.n	800e90e <f_lseek+0x1e0>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2201      	movs	r2, #1
 800e908:	755a      	strb	r2, [r3, #21]
 800e90a:	2301      	movs	r3, #1
 800e90c:	e114      	b.n	800eb38 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	69ba      	ldr	r2, [r7, #24]
 800e912:	621a      	str	r2, [r3, #32]
 800e914:	e10e      	b.n	800eb34 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	683a      	ldr	r2, [r7, #0]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d908      	bls.n	800e932 <f_lseek+0x204>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	7d1b      	ldrb	r3, [r3, #20]
 800e924:	f003 0302 	and.w	r3, r3, #2
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d102      	bne.n	800e932 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	699b      	ldr	r3, [r3, #24]
 800e936:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	637b      	str	r3, [r7, #52]	; 0x34
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e940:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	f000 80a7 	beq.w	800ea98 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	895b      	ldrh	r3, [r3, #10]
 800e94e:	025b      	lsls	r3, r3, #9
 800e950:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e952:	6a3b      	ldr	r3, [r7, #32]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d01b      	beq.n	800e990 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	1e5a      	subs	r2, r3, #1
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	fbb2 f2f3 	udiv	r2, r2, r3
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	1e59      	subs	r1, r3, #1
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d30f      	bcc.n	800e990 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e970:	6a3b      	ldr	r3, [r7, #32]
 800e972:	1e5a      	subs	r2, r3, #1
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	425b      	negs	r3, r3
 800e978:	401a      	ands	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	699b      	ldr	r3, [r3, #24]
 800e982:	683a      	ldr	r2, [r7, #0]
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	69db      	ldr	r3, [r3, #28]
 800e98c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e98e:	e022      	b.n	800e9d6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d119      	bne.n	800e9d0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2100      	movs	r1, #0
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7fe fb9d 	bl	800d0e0 <create_chain>
 800e9a6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d104      	bne.n	800e9b8 <f_lseek+0x28a>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2202      	movs	r2, #2
 800e9b2:	755a      	strb	r2, [r3, #21]
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	e0bf      	b.n	800eb38 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9be:	d104      	bne.n	800e9ca <f_lseek+0x29c>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	755a      	strb	r2, [r3, #21]
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e0b6      	b.n	800eb38 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9ce:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9d4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d05d      	beq.n	800ea98 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e9dc:	e03a      	b.n	800ea54 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	603b      	str	r3, [r7, #0]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	699a      	ldr	r2, [r3, #24]
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	441a      	add	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	7d1b      	ldrb	r3, [r3, #20]
 800e9f6:	f003 0302 	and.w	r3, r3, #2
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00b      	beq.n	800ea16 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fe fb6c 	bl	800d0e0 <create_chain>
 800ea08:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d108      	bne.n	800ea22 <f_lseek+0x2f4>
							ofs = 0; break;
 800ea10:	2300      	movs	r3, #0
 800ea12:	603b      	str	r3, [r7, #0]
 800ea14:	e022      	b.n	800ea5c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fe f96f 	bl	800ccfe <get_fat>
 800ea20:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea28:	d104      	bne.n	800ea34 <f_lseek+0x306>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	755a      	strb	r2, [r3, #21]
 800ea30:	2301      	movs	r3, #1
 800ea32:	e081      	b.n	800eb38 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ea34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d904      	bls.n	800ea44 <f_lseek+0x316>
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	695b      	ldr	r3, [r3, #20]
 800ea3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d304      	bcc.n	800ea4e <f_lseek+0x320>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2202      	movs	r2, #2
 800ea48:	755a      	strb	r2, [r3, #21]
 800ea4a:	2302      	movs	r3, #2
 800ea4c:	e074      	b.n	800eb38 <f_lseek+0x40a>
					fp->clust = clst;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea52:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d8c0      	bhi.n	800e9de <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	699a      	ldr	r2, [r3, #24]
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	441a      	add	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d012      	beq.n	800ea98 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fe f922 	bl	800ccc0 <clust2sect>
 800ea7c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ea7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d104      	bne.n	800ea8e <f_lseek+0x360>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2202      	movs	r2, #2
 800ea88:	755a      	strb	r2, [r3, #21]
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	e054      	b.n	800eb38 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	0a5b      	lsrs	r3, r3, #9
 800ea92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea94:	4413      	add	r3, r2
 800ea96:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	699a      	ldr	r2, [r3, #24]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d90a      	bls.n	800eaba <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	699a      	ldr	r2, [r3, #24]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	7d1b      	ldrb	r3, [r3, #20]
 800eab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eab4:	b2da      	uxtb	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	699b      	ldr	r3, [r3, #24]
 800eabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d036      	beq.n	800eb34 <f_lseek+0x406>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eacc:	429a      	cmp	r2, r3
 800eace:	d031      	beq.n	800eb34 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	7d1b      	ldrb	r3, [r3, #20]
 800ead4:	b25b      	sxtb	r3, r3
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	da18      	bge.n	800eb0c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	7858      	ldrb	r0, [r3, #1]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6a1a      	ldr	r2, [r3, #32]
 800eae8:	2301      	movs	r3, #1
 800eaea:	f7fd fd5f 	bl	800c5ac <disk_write>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d004      	beq.n	800eafe <f_lseek+0x3d0>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	755a      	strb	r2, [r3, #21]
 800eafa:	2301      	movs	r3, #1
 800eafc:	e01c      	b.n	800eb38 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	7d1b      	ldrb	r3, [r3, #20]
 800eb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb06:	b2da      	uxtb	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	7858      	ldrb	r0, [r3, #1]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb16:	2301      	movs	r3, #1
 800eb18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb1a:	f7fd fd27 	bl	800c56c <disk_read>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d004      	beq.n	800eb2e <f_lseek+0x400>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2201      	movs	r2, #1
 800eb28:	755a      	strb	r2, [r3, #21]
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e004      	b.n	800eb38 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb32:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800eb34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3740      	adds	r7, #64	; 0x40
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b087      	sub	sp, #28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eb56:	4b1f      	ldr	r3, [pc, #124]	; (800ebd4 <FATFS_LinkDriverEx+0x94>)
 800eb58:	7a5b      	ldrb	r3, [r3, #9]
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d131      	bne.n	800ebc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eb60:	4b1c      	ldr	r3, [pc, #112]	; (800ebd4 <FATFS_LinkDriverEx+0x94>)
 800eb62:	7a5b      	ldrb	r3, [r3, #9]
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	461a      	mov	r2, r3
 800eb68:	4b1a      	ldr	r3, [pc, #104]	; (800ebd4 <FATFS_LinkDriverEx+0x94>)
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800eb6e:	4b19      	ldr	r3, [pc, #100]	; (800ebd4 <FATFS_LinkDriverEx+0x94>)
 800eb70:	7a5b      	ldrb	r3, [r3, #9]
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	4a17      	ldr	r2, [pc, #92]	; (800ebd4 <FATFS_LinkDriverEx+0x94>)
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eb7e:	4b15      	ldr	r3, [pc, #84]	; (800ebd4 <FATFS_LinkDriverEx+0x94>)
 800eb80:	7a5b      	ldrb	r3, [r3, #9]
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	461a      	mov	r2, r3
 800eb86:	4b13      	ldr	r3, [pc, #76]	; (800ebd4 <FATFS_LinkDriverEx+0x94>)
 800eb88:	4413      	add	r3, r2
 800eb8a:	79fa      	ldrb	r2, [r7, #7]
 800eb8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eb8e:	4b11      	ldr	r3, [pc, #68]	; (800ebd4 <FATFS_LinkDriverEx+0x94>)
 800eb90:	7a5b      	ldrb	r3, [r3, #9]
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	1c5a      	adds	r2, r3, #1
 800eb96:	b2d1      	uxtb	r1, r2
 800eb98:	4a0e      	ldr	r2, [pc, #56]	; (800ebd4 <FATFS_LinkDriverEx+0x94>)
 800eb9a:	7251      	strb	r1, [r2, #9]
 800eb9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eb9e:	7dbb      	ldrb	r3, [r7, #22]
 800eba0:	3330      	adds	r3, #48	; 0x30
 800eba2:	b2da      	uxtb	r2, r3
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	223a      	movs	r2, #58	; 0x3a
 800ebae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	3302      	adds	r3, #2
 800ebb4:	222f      	movs	r2, #47	; 0x2f
 800ebb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	3303      	adds	r3, #3
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ebc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	371c      	adds	r7, #28
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	20001df0 	.word	0x20001df0

0800ebd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff ffaa 	bl	800eb40 <FATFS_LinkDriverEx>
 800ebec:	4603      	mov	r3, r0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <MSC_Application>:
	HAL_Delay(1);
  /* USER CODE END USB_Error_Handler */
}

static void MSC_Application(void)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	af00      	add	r7, sp, #0
 	//montar o pendrive
	while(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 1) != FR_OK);
 800ebfc:	bf00      	nop
 800ebfe:	2201      	movs	r2, #1
 800ec00:	4904      	ldr	r1, [pc, #16]	; (800ec14 <MSC_Application+0x1c>)
 800ec02:	4805      	ldr	r0, [pc, #20]	; (800ec18 <MSC_Application+0x20>)
 800ec04:	f7ff f9a8 	bl	800df58 <f_mount>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1f7      	bne.n	800ebfe <MSC_Application+0x6>


}
 800ec0e:	bf00      	nop
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	2000002c 	.word	0x2000002c
 800ec18:	20003554 	.word	0x20003554

0800ec1c <cam_image>:

void cam_image(void)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
	FRESULT res;
	if(Appli_state == APPLICATION_READY)
 800ec22:	4b3f      	ldr	r3, [pc, #252]	; (800ed20 <cam_image+0x104>)
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d176      	bne.n	800ed18 <cam_image+0xfc>
	{
		if(file_count < 354)
 800ec2a:	4b3e      	ldr	r3, [pc, #248]	; (800ed24 <cam_image+0x108>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 800ec32:	da6e      	bge.n	800ed12 <cam_image+0xf6>
		{
			if(!opened_image) 	//arquivo aberto?
 800ec34:	4b3c      	ldr	r3, [pc, #240]	; (800ed28 <cam_image+0x10c>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d120      	bne.n	800ec7e <cam_image+0x62>
			{	//não, então abrir
				arquivo = imagesss(file_count);
 800ec3c:	4b39      	ldr	r3, [pc, #228]	; (800ed24 <cam_image+0x108>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 f887 	bl	800ed54 <imagesss>
 800ec46:	4602      	mov	r2, r0
 800ec48:	4b38      	ldr	r3, [pc, #224]	; (800ed2c <cam_image+0x110>)
 800ec4a:	601a      	str	r2, [r3, #0]
				if(f_open(&MyFile, arquivo, FA_READ) != FR_OK)	//abrir arquivo
 800ec4c:	4b37      	ldr	r3, [pc, #220]	; (800ed2c <cam_image+0x110>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2201      	movs	r2, #1
 800ec52:	4619      	mov	r1, r3
 800ec54:	4836      	ldr	r0, [pc, #216]	; (800ed30 <cam_image+0x114>)
 800ec56:	f7ff f9c5 	bl	800dfe4 <f_open>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d003      	beq.n	800ec68 <cam_image+0x4c>
				{
					opened_image = 0;	//tentar reabir na proxima
 800ec60:	4b31      	ldr	r3, [pc, #196]	; (800ed28 <cam_image+0x10c>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	601a      	str	r2, [r3, #0]
					HAL_Delay(10);	//nop
			}
		}
		else file_count = 1;	//voltar ao primeiro arquivo
	}
}
 800ec66:	e057      	b.n	800ed18 <cam_image+0xfc>
					size_image = MyFile.obj.objsize;	//salvar tamanho
 800ec68:	4b31      	ldr	r3, [pc, #196]	; (800ed30 <cam_image+0x114>)
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	4a31      	ldr	r2, [pc, #196]	; (800ed34 <cam_image+0x118>)
 800ec6e:	6013      	str	r3, [r2, #0]
					size_count = 0;		//resetar contador de leitura
 800ec70:	4b31      	ldr	r3, [pc, #196]	; (800ed38 <cam_image+0x11c>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
					opened_image = 1;	//imagem aberta com sucesso
 800ec76:	4b2c      	ldr	r3, [pc, #176]	; (800ed28 <cam_image+0x10c>)
 800ec78:	2201      	movs	r2, #1
 800ec7a:	601a      	str	r2, [r3, #0]
}
 800ec7c:	e04c      	b.n	800ed18 <cam_image+0xfc>
				if(transmitido_anterior)	//se pacote anterior foi transmitido
 800ec7e:	4b2f      	ldr	r3, [pc, #188]	; (800ed3c <cam_image+0x120>)
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d041      	beq.n	800ed0a <cam_image+0xee>
					if(size_count == size_image)	//se contador de leitura = tamanho total da imagem
 800ec86:	4b2c      	ldr	r3, [pc, #176]	; (800ed38 <cam_image+0x11c>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	4b2a      	ldr	r3, [pc, #168]	; (800ed34 <cam_image+0x118>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d10e      	bne.n	800ecb0 <cam_image+0x94>
						f_close(&MyFile);			//fechar aquivo
 800ec92:	4827      	ldr	r0, [pc, #156]	; (800ed30 <cam_image+0x114>)
 800ec94:	f7ff fd21 	bl	800e6da <f_close>
						opened_image = 0;			//arquivo fecahdo
 800ec98:	4b23      	ldr	r3, [pc, #140]	; (800ed28 <cam_image+0x10c>)
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	601a      	str	r2, [r3, #0]
						file_count++;				//ir para proximo arquivo
 800ec9e:	4b21      	ldr	r3, [pc, #132]	; (800ed24 <cam_image+0x108>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	3301      	adds	r3, #1
 800eca4:	4a1f      	ldr	r2, [pc, #124]	; (800ed24 <cam_image+0x108>)
 800eca6:	6013      	str	r3, [r2, #0]
						main_state = DEINIT_ESP_STATE;
 800eca8:	4b25      	ldr	r3, [pc, #148]	; (800ed40 <cam_image+0x124>)
 800ecaa:	2202      	movs	r2, #2
 800ecac:	701a      	strb	r2, [r3, #0]
}
 800ecae:	e033      	b.n	800ed18 <cam_image+0xfc>
						if(lernovo)	//ler novo?
 800ecb0:	4b24      	ldr	r3, [pc, #144]	; (800ed44 <cam_image+0x128>)
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d024      	beq.n	800ed02 <cam_image+0xe6>
							f_lseek(&MyFile, size_count);	//atualizar ponteiro de leitura
 800ecb8:	4b1f      	ldr	r3, [pc, #124]	; (800ed38 <cam_image+0x11c>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	481c      	ldr	r0, [pc, #112]	; (800ed30 <cam_image+0x114>)
 800ecc0:	f7ff fd35 	bl	800e72e <f_lseek>
							res = f_read(&MyFile, read_image, sizeof(read_image), (void *)&bytes_read);	//ler e salvar no buffer em read_image
 800ecc4:	4b20      	ldr	r3, [pc, #128]	; (800ed48 <cam_image+0x12c>)
 800ecc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecca:	4920      	ldr	r1, [pc, #128]	; (800ed4c <cam_image+0x130>)
 800eccc:	4818      	ldr	r0, [pc, #96]	; (800ed30 <cam_image+0x114>)
 800ecce:	f7ff fb47 	bl	800e360 <f_read>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	71fb      	strb	r3, [r7, #7]
							if((bytes_read == 0) || (res != FR_OK))
 800ecd6:	4b1c      	ldr	r3, [pc, #112]	; (800ed48 <cam_image+0x12c>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d002      	beq.n	800ece4 <cam_image+0xc8>
 800ecde:	79fb      	ldrb	r3, [r7, #7]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d003      	beq.n	800ecec <cam_image+0xd0>
								transmitir = 0;	//não transmitir, tentará ler novamente na proxima
 800ece4:	4b1a      	ldr	r3, [pc, #104]	; (800ed50 <cam_image+0x134>)
 800ece6:	2200      	movs	r2, #0
 800ece8:	701a      	strb	r2, [r3, #0]
}
 800ecea:	e015      	b.n	800ed18 <cam_image+0xfc>
								size_count = size_count + bytes_read;	//atualizar contador de leitura
 800ecec:	4b12      	ldr	r3, [pc, #72]	; (800ed38 <cam_image+0x11c>)
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	4b15      	ldr	r3, [pc, #84]	; (800ed48 <cam_image+0x12c>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	4a10      	ldr	r2, [pc, #64]	; (800ed38 <cam_image+0x11c>)
 800ecf8:	6013      	str	r3, [r2, #0]
								transmitir = 1;							//pode transmitir
 800ecfa:	4b15      	ldr	r3, [pc, #84]	; (800ed50 <cam_image+0x134>)
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	701a      	strb	r2, [r3, #0]
}
 800ed00:	e00a      	b.n	800ed18 <cam_image+0xfc>
							HAL_Delay(10);	//nop
 800ed02:	200a      	movs	r0, #10
 800ed04:	f7f5 f836 	bl	8003d74 <HAL_Delay>
}
 800ed08:	e006      	b.n	800ed18 <cam_image+0xfc>
					HAL_Delay(10);	//nop
 800ed0a:	200a      	movs	r0, #10
 800ed0c:	f7f5 f832 	bl	8003d74 <HAL_Delay>
}
 800ed10:	e002      	b.n	800ed18 <cam_image+0xfc>
		else file_count = 1;	//voltar ao primeiro arquivo
 800ed12:	4b04      	ldr	r3, [pc, #16]	; (800ed24 <cam_image+0x108>)
 800ed14:	2201      	movs	r2, #1
 800ed16:	601a      	str	r2, [r3, #0]
}
 800ed18:	bf00      	nop
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	20001dfc 	.word	0x20001dfc
 800ed24:	20000030 	.word	0x20000030
 800ed28:	20001e00 	.word	0x20001e00
 800ed2c:	20003320 	.word	0x20003320
 800ed30:	20003324 	.word	0x20003324
 800ed34:	20001e04 	.word	0x20001e04
 800ed38:	20001e08 	.word	0x20001e08
 800ed3c:	20000034 	.word	0x20000034
 800ed40:	200027e0 	.word	0x200027e0
 800ed44:	20000035 	.word	0x20000035
 800ed48:	200027e4 	.word	0x200027e4
 800ed4c:	20001e18 	.word	0x20001e18
 800ed50:	20001e0c 	.word	0x20001e0c

0800ed54 <imagesss>:

char * imagesss(int fc)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b085      	sub	sp, #20
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
	char *retorno;
	switch(fc)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	3b01      	subs	r3, #1
 800ed60:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 800ed64:	f201 8231 	bhi.w	80101ca <imagesss+0x1476>
 800ed68:	a201      	add	r2, pc, #4	; (adr r2, 800ed70 <imagesss+0x1c>)
 800ed6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed6e:	bf00      	nop
 800ed70:	0800f2f5 	.word	0x0800f2f5
 800ed74:	0800f2fd 	.word	0x0800f2fd
 800ed78:	0800f305 	.word	0x0800f305
 800ed7c:	0800f30d 	.word	0x0800f30d
 800ed80:	0800f315 	.word	0x0800f315
 800ed84:	0800f31d 	.word	0x0800f31d
 800ed88:	0800f325 	.word	0x0800f325
 800ed8c:	0800f32d 	.word	0x0800f32d
 800ed90:	0800f335 	.word	0x0800f335
 800ed94:	0800f33d 	.word	0x0800f33d
 800ed98:	0800f345 	.word	0x0800f345
 800ed9c:	0800f34d 	.word	0x0800f34d
 800eda0:	0800f355 	.word	0x0800f355
 800eda4:	0800f35d 	.word	0x0800f35d
 800eda8:	0800f365 	.word	0x0800f365
 800edac:	0800f36d 	.word	0x0800f36d
 800edb0:	0800f375 	.word	0x0800f375
 800edb4:	0800f37d 	.word	0x0800f37d
 800edb8:	0800f385 	.word	0x0800f385
 800edbc:	0800f38d 	.word	0x0800f38d
 800edc0:	0800f395 	.word	0x0800f395
 800edc4:	0800f39d 	.word	0x0800f39d
 800edc8:	0800f3a5 	.word	0x0800f3a5
 800edcc:	0800f3ad 	.word	0x0800f3ad
 800edd0:	0800f3b5 	.word	0x0800f3b5
 800edd4:	0800f3bd 	.word	0x0800f3bd
 800edd8:	0800f3c5 	.word	0x0800f3c5
 800eddc:	0800f3cd 	.word	0x0800f3cd
 800ede0:	0800f3d5 	.word	0x0800f3d5
 800ede4:	0800f3dd 	.word	0x0800f3dd
 800ede8:	0800f3e5 	.word	0x0800f3e5
 800edec:	0800f3ed 	.word	0x0800f3ed
 800edf0:	0800f3f5 	.word	0x0800f3f5
 800edf4:	0800f3fd 	.word	0x0800f3fd
 800edf8:	0800f405 	.word	0x0800f405
 800edfc:	0800f40d 	.word	0x0800f40d
 800ee00:	0800f415 	.word	0x0800f415
 800ee04:	0800f41d 	.word	0x0800f41d
 800ee08:	0800f425 	.word	0x0800f425
 800ee0c:	0800f42d 	.word	0x0800f42d
 800ee10:	0800f435 	.word	0x0800f435
 800ee14:	0800f43d 	.word	0x0800f43d
 800ee18:	0800f445 	.word	0x0800f445
 800ee1c:	0800f44d 	.word	0x0800f44d
 800ee20:	0800f455 	.word	0x0800f455
 800ee24:	0800f45d 	.word	0x0800f45d
 800ee28:	0800f465 	.word	0x0800f465
 800ee2c:	0800f46d 	.word	0x0800f46d
 800ee30:	0800f475 	.word	0x0800f475
 800ee34:	0800f47d 	.word	0x0800f47d
 800ee38:	0800f485 	.word	0x0800f485
 800ee3c:	0800f48d 	.word	0x0800f48d
 800ee40:	0800f495 	.word	0x0800f495
 800ee44:	0800f49d 	.word	0x0800f49d
 800ee48:	0800f4a5 	.word	0x0800f4a5
 800ee4c:	0800f4ad 	.word	0x0800f4ad
 800ee50:	0800f4b5 	.word	0x0800f4b5
 800ee54:	0800f4bd 	.word	0x0800f4bd
 800ee58:	0800f4c5 	.word	0x0800f4c5
 800ee5c:	0800f4cd 	.word	0x0800f4cd
 800ee60:	0800f4d5 	.word	0x0800f4d5
 800ee64:	0800f4dd 	.word	0x0800f4dd
 800ee68:	0800f4e5 	.word	0x0800f4e5
 800ee6c:	0800f4ed 	.word	0x0800f4ed
 800ee70:	0800f4f5 	.word	0x0800f4f5
 800ee74:	0800f4fd 	.word	0x0800f4fd
 800ee78:	0800f505 	.word	0x0800f505
 800ee7c:	0800f50d 	.word	0x0800f50d
 800ee80:	0800f515 	.word	0x0800f515
 800ee84:	0800f51d 	.word	0x0800f51d
 800ee88:	0800f525 	.word	0x0800f525
 800ee8c:	0800f52d 	.word	0x0800f52d
 800ee90:	0800f535 	.word	0x0800f535
 800ee94:	0800f53d 	.word	0x0800f53d
 800ee98:	0800f545 	.word	0x0800f545
 800ee9c:	0800f54d 	.word	0x0800f54d
 800eea0:	0800f555 	.word	0x0800f555
 800eea4:	0800f55d 	.word	0x0800f55d
 800eea8:	0800f565 	.word	0x0800f565
 800eeac:	0800f56d 	.word	0x0800f56d
 800eeb0:	0800f575 	.word	0x0800f575
 800eeb4:	0800f57d 	.word	0x0800f57d
 800eeb8:	0800f585 	.word	0x0800f585
 800eebc:	0800f58d 	.word	0x0800f58d
 800eec0:	0800f6e5 	.word	0x0800f6e5
 800eec4:	0800f6ed 	.word	0x0800f6ed
 800eec8:	0800f6f5 	.word	0x0800f6f5
 800eecc:	0800f6fd 	.word	0x0800f6fd
 800eed0:	0800f705 	.word	0x0800f705
 800eed4:	0800f70d 	.word	0x0800f70d
 800eed8:	0800f715 	.word	0x0800f715
 800eedc:	0800f71d 	.word	0x0800f71d
 800eee0:	0800f725 	.word	0x0800f725
 800eee4:	0800f72d 	.word	0x0800f72d
 800eee8:	0800f735 	.word	0x0800f735
 800eeec:	0800f73d 	.word	0x0800f73d
 800eef0:	0800f745 	.word	0x0800f745
 800eef4:	0800f74d 	.word	0x0800f74d
 800eef8:	0800f755 	.word	0x0800f755
 800eefc:	0800f75d 	.word	0x0800f75d
 800ef00:	0800f765 	.word	0x0800f765
 800ef04:	0800f76d 	.word	0x0800f76d
 800ef08:	0800f775 	.word	0x0800f775
 800ef0c:	0800f77d 	.word	0x0800f77d
 800ef10:	0800f785 	.word	0x0800f785
 800ef14:	0800f78d 	.word	0x0800f78d
 800ef18:	0800f795 	.word	0x0800f795
 800ef1c:	0800f79d 	.word	0x0800f79d
 800ef20:	0800f7a5 	.word	0x0800f7a5
 800ef24:	0800f7ad 	.word	0x0800f7ad
 800ef28:	0800f7b5 	.word	0x0800f7b5
 800ef2c:	0800f7bd 	.word	0x0800f7bd
 800ef30:	0800f7c5 	.word	0x0800f7c5
 800ef34:	0800f7cd 	.word	0x0800f7cd
 800ef38:	0800f7d5 	.word	0x0800f7d5
 800ef3c:	0800f7dd 	.word	0x0800f7dd
 800ef40:	0800f7e5 	.word	0x0800f7e5
 800ef44:	0800f7ed 	.word	0x0800f7ed
 800ef48:	0800f7f5 	.word	0x0800f7f5
 800ef4c:	0800f7fd 	.word	0x0800f7fd
 800ef50:	0800f805 	.word	0x0800f805
 800ef54:	0800f80d 	.word	0x0800f80d
 800ef58:	0800f815 	.word	0x0800f815
 800ef5c:	0800f81d 	.word	0x0800f81d
 800ef60:	0800f825 	.word	0x0800f825
 800ef64:	0800f82d 	.word	0x0800f82d
 800ef68:	0800f835 	.word	0x0800f835
 800ef6c:	0800f83d 	.word	0x0800f83d
 800ef70:	0800f845 	.word	0x0800f845
 800ef74:	0800f84d 	.word	0x0800f84d
 800ef78:	0800f855 	.word	0x0800f855
 800ef7c:	0800f85d 	.word	0x0800f85d
 800ef80:	0800f865 	.word	0x0800f865
 800ef84:	0800f86d 	.word	0x0800f86d
 800ef88:	0800f875 	.word	0x0800f875
 800ef8c:	0800f87d 	.word	0x0800f87d
 800ef90:	0800f885 	.word	0x0800f885
 800ef94:	0800f88d 	.word	0x0800f88d
 800ef98:	0800f895 	.word	0x0800f895
 800ef9c:	0800f89d 	.word	0x0800f89d
 800efa0:	0800f8a5 	.word	0x0800f8a5
 800efa4:	0800f8ad 	.word	0x0800f8ad
 800efa8:	0800f8b5 	.word	0x0800f8b5
 800efac:	0800f8bd 	.word	0x0800f8bd
 800efb0:	0800f8c5 	.word	0x0800f8c5
 800efb4:	0800f8cd 	.word	0x0800f8cd
 800efb8:	0800f8d5 	.word	0x0800f8d5
 800efbc:	0800f8dd 	.word	0x0800f8dd
 800efc0:	0800f8e5 	.word	0x0800f8e5
 800efc4:	0800f8ed 	.word	0x0800f8ed
 800efc8:	0800f8f5 	.word	0x0800f8f5
 800efcc:	0800f8fd 	.word	0x0800f8fd
 800efd0:	0800f905 	.word	0x0800f905
 800efd4:	0800f90d 	.word	0x0800f90d
 800efd8:	0800f915 	.word	0x0800f915
 800efdc:	0800f91d 	.word	0x0800f91d
 800efe0:	0800f925 	.word	0x0800f925
 800efe4:	0800f92d 	.word	0x0800f92d
 800efe8:	0800f935 	.word	0x0800f935
 800efec:	0800f93d 	.word	0x0800f93d
 800eff0:	0800f945 	.word	0x0800f945
 800eff4:	0800f94d 	.word	0x0800f94d
 800eff8:	0800f955 	.word	0x0800f955
 800effc:	0800f95d 	.word	0x0800f95d
 800f000:	0800f965 	.word	0x0800f965
 800f004:	0800f96d 	.word	0x0800f96d
 800f008:	0800f975 	.word	0x0800f975
 800f00c:	0800f97d 	.word	0x0800f97d
 800f010:	0800fad5 	.word	0x0800fad5
 800f014:	0800fadb 	.word	0x0800fadb
 800f018:	0800fae1 	.word	0x0800fae1
 800f01c:	0800fae7 	.word	0x0800fae7
 800f020:	0800faed 	.word	0x0800faed
 800f024:	0800faf3 	.word	0x0800faf3
 800f028:	0800faf9 	.word	0x0800faf9
 800f02c:	0800faff 	.word	0x0800faff
 800f030:	0800fb05 	.word	0x0800fb05
 800f034:	0800fb0b 	.word	0x0800fb0b
 800f038:	0800fb11 	.word	0x0800fb11
 800f03c:	0800fb17 	.word	0x0800fb17
 800f040:	0800fb1d 	.word	0x0800fb1d
 800f044:	0800fb23 	.word	0x0800fb23
 800f048:	0800fb29 	.word	0x0800fb29
 800f04c:	0800fb2f 	.word	0x0800fb2f
 800f050:	0800fb35 	.word	0x0800fb35
 800f054:	0800fb3b 	.word	0x0800fb3b
 800f058:	0800fb41 	.word	0x0800fb41
 800f05c:	0800fb47 	.word	0x0800fb47
 800f060:	0800fb4d 	.word	0x0800fb4d
 800f064:	0800fb53 	.word	0x0800fb53
 800f068:	0800fb59 	.word	0x0800fb59
 800f06c:	0800fb5f 	.word	0x0800fb5f
 800f070:	0800fb65 	.word	0x0800fb65
 800f074:	0800fb6b 	.word	0x0800fb6b
 800f078:	0800fb71 	.word	0x0800fb71
 800f07c:	0800fb77 	.word	0x0800fb77
 800f080:	0800fb7d 	.word	0x0800fb7d
 800f084:	0800fb83 	.word	0x0800fb83
 800f088:	0800fb89 	.word	0x0800fb89
 800f08c:	0800fb8f 	.word	0x0800fb8f
 800f090:	0800fb95 	.word	0x0800fb95
 800f094:	0800fb9b 	.word	0x0800fb9b
 800f098:	0800fba1 	.word	0x0800fba1
 800f09c:	0800fba7 	.word	0x0800fba7
 800f0a0:	0800fbad 	.word	0x0800fbad
 800f0a4:	0800fbb3 	.word	0x0800fbb3
 800f0a8:	0800fbb9 	.word	0x0800fbb9
 800f0ac:	0800fbbf 	.word	0x0800fbbf
 800f0b0:	0800fbc5 	.word	0x0800fbc5
 800f0b4:	0800fbcb 	.word	0x0800fbcb
 800f0b8:	0800fbd1 	.word	0x0800fbd1
 800f0bc:	0800fbd7 	.word	0x0800fbd7
 800f0c0:	0800fbdd 	.word	0x0800fbdd
 800f0c4:	0800fbe3 	.word	0x0800fbe3
 800f0c8:	0800fbe9 	.word	0x0800fbe9
 800f0cc:	0800fbef 	.word	0x0800fbef
 800f0d0:	0800fbf5 	.word	0x0800fbf5
 800f0d4:	0800fbfb 	.word	0x0800fbfb
 800f0d8:	0800fc01 	.word	0x0800fc01
 800f0dc:	0800fc07 	.word	0x0800fc07
 800f0e0:	0800fc0d 	.word	0x0800fc0d
 800f0e4:	0800fc13 	.word	0x0800fc13
 800f0e8:	0800fc19 	.word	0x0800fc19
 800f0ec:	0800fc1f 	.word	0x0800fc1f
 800f0f0:	0800fc25 	.word	0x0800fc25
 800f0f4:	0800fc2b 	.word	0x0800fc2b
 800f0f8:	0800fc31 	.word	0x0800fc31
 800f0fc:	0800fc37 	.word	0x0800fc37
 800f100:	0800fc3d 	.word	0x0800fc3d
 800f104:	0800fc43 	.word	0x0800fc43
 800f108:	0800fc49 	.word	0x0800fc49
 800f10c:	0800fc4f 	.word	0x0800fc4f
 800f110:	0800fc55 	.word	0x0800fc55
 800f114:	0800fc5b 	.word	0x0800fc5b
 800f118:	0800fc61 	.word	0x0800fc61
 800f11c:	0800fc67 	.word	0x0800fc67
 800f120:	0800fc6d 	.word	0x0800fc6d
 800f124:	0800fc73 	.word	0x0800fc73
 800f128:	0800fc79 	.word	0x0800fc79
 800f12c:	0800fc7f 	.word	0x0800fc7f
 800f130:	0800fc85 	.word	0x0800fc85
 800f134:	0800fc8b 	.word	0x0800fc8b
 800f138:	0800fc91 	.word	0x0800fc91
 800f13c:	0800fc97 	.word	0x0800fc97
 800f140:	0800fc9d 	.word	0x0800fc9d
 800f144:	0800fca3 	.word	0x0800fca3
 800f148:	0800fca9 	.word	0x0800fca9
 800f14c:	0800fcaf 	.word	0x0800fcaf
 800f150:	0800fcb5 	.word	0x0800fcb5
 800f154:	0800fcbb 	.word	0x0800fcbb
 800f158:	0800fcc1 	.word	0x0800fcc1
 800f15c:	0800fcc7 	.word	0x0800fcc7
 800f160:	0800fe1d 	.word	0x0800fe1d
 800f164:	0800fe23 	.word	0x0800fe23
 800f168:	0800fe29 	.word	0x0800fe29
 800f16c:	0800fe2f 	.word	0x0800fe2f
 800f170:	0800fe35 	.word	0x0800fe35
 800f174:	0800fe3b 	.word	0x0800fe3b
 800f178:	0800fe41 	.word	0x0800fe41
 800f17c:	0800fe47 	.word	0x0800fe47
 800f180:	0800fe4d 	.word	0x0800fe4d
 800f184:	0800fe53 	.word	0x0800fe53
 800f188:	0800fe59 	.word	0x0800fe59
 800f18c:	0800fe5f 	.word	0x0800fe5f
 800f190:	0800fe65 	.word	0x0800fe65
 800f194:	0800fe6b 	.word	0x0800fe6b
 800f198:	0800fe71 	.word	0x0800fe71
 800f19c:	0800fe77 	.word	0x0800fe77
 800f1a0:	0800fe7d 	.word	0x0800fe7d
 800f1a4:	0800fe83 	.word	0x0800fe83
 800f1a8:	0800fe89 	.word	0x0800fe89
 800f1ac:	0800fe8f 	.word	0x0800fe8f
 800f1b0:	0800fe95 	.word	0x0800fe95
 800f1b4:	0800fe9b 	.word	0x0800fe9b
 800f1b8:	0800fea1 	.word	0x0800fea1
 800f1bc:	0800fea7 	.word	0x0800fea7
 800f1c0:	0800fead 	.word	0x0800fead
 800f1c4:	0800feb3 	.word	0x0800feb3
 800f1c8:	0800feb9 	.word	0x0800feb9
 800f1cc:	0800febf 	.word	0x0800febf
 800f1d0:	0800fec5 	.word	0x0800fec5
 800f1d4:	0800fecb 	.word	0x0800fecb
 800f1d8:	0800fed1 	.word	0x0800fed1
 800f1dc:	0800fed7 	.word	0x0800fed7
 800f1e0:	0800fedd 	.word	0x0800fedd
 800f1e4:	0800fee3 	.word	0x0800fee3
 800f1e8:	0800fee9 	.word	0x0800fee9
 800f1ec:	0800feef 	.word	0x0800feef
 800f1f0:	0800fef5 	.word	0x0800fef5
 800f1f4:	0800fefb 	.word	0x0800fefb
 800f1f8:	0800ff01 	.word	0x0800ff01
 800f1fc:	0800ff07 	.word	0x0800ff07
 800f200:	0800ff0d 	.word	0x0800ff0d
 800f204:	0800ff13 	.word	0x0800ff13
 800f208:	0800ff19 	.word	0x0800ff19
 800f20c:	0800ff1f 	.word	0x0800ff1f
 800f210:	0800ff25 	.word	0x0800ff25
 800f214:	0800ff2b 	.word	0x0800ff2b
 800f218:	0800ff31 	.word	0x0800ff31
 800f21c:	0800ff37 	.word	0x0800ff37
 800f220:	0800ff3d 	.word	0x0800ff3d
 800f224:	0800ff43 	.word	0x0800ff43
 800f228:	0800ff49 	.word	0x0800ff49
 800f22c:	0800ff4f 	.word	0x0800ff4f
 800f230:	0800ff55 	.word	0x0800ff55
 800f234:	0800ff5b 	.word	0x0800ff5b
 800f238:	0800ff61 	.word	0x0800ff61
 800f23c:	0800ff67 	.word	0x0800ff67
 800f240:	0800ff6d 	.word	0x0800ff6d
 800f244:	0800ff73 	.word	0x0800ff73
 800f248:	0800ff79 	.word	0x0800ff79
 800f24c:	0800ff7f 	.word	0x0800ff7f
 800f250:	0800ff85 	.word	0x0800ff85
 800f254:	0800ff8b 	.word	0x0800ff8b
 800f258:	0800ff91 	.word	0x0800ff91
 800f25c:	0800ff97 	.word	0x0800ff97
 800f260:	0800ff9d 	.word	0x0800ff9d
 800f264:	0800ffa3 	.word	0x0800ffa3
 800f268:	0800ffa9 	.word	0x0800ffa9
 800f26c:	0800ffaf 	.word	0x0800ffaf
 800f270:	0800ffb5 	.word	0x0800ffb5
 800f274:	0800ffbb 	.word	0x0800ffbb
 800f278:	0800ffc1 	.word	0x0800ffc1
 800f27c:	0800ffc7 	.word	0x0800ffc7
 800f280:	0800ffcd 	.word	0x0800ffcd
 800f284:	0800ffd3 	.word	0x0800ffd3
 800f288:	0800ffd9 	.word	0x0800ffd9
 800f28c:	0800ffdf 	.word	0x0800ffdf
 800f290:	0800ffe5 	.word	0x0800ffe5
 800f294:	0800ffeb 	.word	0x0800ffeb
 800f298:	0800fff1 	.word	0x0800fff1
 800f29c:	0800fff7 	.word	0x0800fff7
 800f2a0:	0800fffd 	.word	0x0800fffd
 800f2a4:	08010003 	.word	0x08010003
 800f2a8:	08010009 	.word	0x08010009
 800f2ac:	0801000f 	.word	0x0801000f
 800f2b0:	08010165 	.word	0x08010165
 800f2b4:	0801016b 	.word	0x0801016b
 800f2b8:	08010171 	.word	0x08010171
 800f2bc:	08010177 	.word	0x08010177
 800f2c0:	0801017d 	.word	0x0801017d
 800f2c4:	08010183 	.word	0x08010183
 800f2c8:	08010189 	.word	0x08010189
 800f2cc:	0801018f 	.word	0x0801018f
 800f2d0:	08010195 	.word	0x08010195
 800f2d4:	0801019b 	.word	0x0801019b
 800f2d8:	080101a1 	.word	0x080101a1
 800f2dc:	080101a7 	.word	0x080101a7
 800f2e0:	080101ad 	.word	0x080101ad
 800f2e4:	080101b3 	.word	0x080101b3
 800f2e8:	080101b9 	.word	0x080101b9
 800f2ec:	080101bf 	.word	0x080101bf
 800f2f0:	080101c5 	.word	0x080101c5
	{
		case 1:
			retorno = "i001.jpg";
 800f2f4:	4ba7      	ldr	r3, [pc, #668]	; (800f594 <imagesss+0x840>)
 800f2f6:	60fb      	str	r3, [r7, #12]
			break;
 800f2f8:	f000 bf67 	b.w	80101ca <imagesss+0x1476>
		case 2:
			retorno = "i002.jpg";
 800f2fc:	4ba6      	ldr	r3, [pc, #664]	; (800f598 <imagesss+0x844>)
 800f2fe:	60fb      	str	r3, [r7, #12]
			break;
 800f300:	f000 bf63 	b.w	80101ca <imagesss+0x1476>
		case 3:
			retorno = "i003.jpg";
 800f304:	4ba5      	ldr	r3, [pc, #660]	; (800f59c <imagesss+0x848>)
 800f306:	60fb      	str	r3, [r7, #12]
			break;
 800f308:	f000 bf5f 	b.w	80101ca <imagesss+0x1476>
		case 4:
			retorno = "i004.jpg";
 800f30c:	4ba4      	ldr	r3, [pc, #656]	; (800f5a0 <imagesss+0x84c>)
 800f30e:	60fb      	str	r3, [r7, #12]
			break;
 800f310:	f000 bf5b 	b.w	80101ca <imagesss+0x1476>
		case 5:
			retorno = "i005.jpg";
 800f314:	4ba3      	ldr	r3, [pc, #652]	; (800f5a4 <imagesss+0x850>)
 800f316:	60fb      	str	r3, [r7, #12]
			break;
 800f318:	f000 bf57 	b.w	80101ca <imagesss+0x1476>
		case 6:
			retorno = "i006.jpg";
 800f31c:	4ba2      	ldr	r3, [pc, #648]	; (800f5a8 <imagesss+0x854>)
 800f31e:	60fb      	str	r3, [r7, #12]
			break;
 800f320:	f000 bf53 	b.w	80101ca <imagesss+0x1476>
		case 7:
			retorno = "i007.jpg";
 800f324:	4ba1      	ldr	r3, [pc, #644]	; (800f5ac <imagesss+0x858>)
 800f326:	60fb      	str	r3, [r7, #12]
			break;
 800f328:	f000 bf4f 	b.w	80101ca <imagesss+0x1476>
		case 8:
			retorno = "i008.jpg";
 800f32c:	4ba0      	ldr	r3, [pc, #640]	; (800f5b0 <imagesss+0x85c>)
 800f32e:	60fb      	str	r3, [r7, #12]
			break;
 800f330:	f000 bf4b 	b.w	80101ca <imagesss+0x1476>
		case 9:
			retorno = "i009.jpg";
 800f334:	4b9f      	ldr	r3, [pc, #636]	; (800f5b4 <imagesss+0x860>)
 800f336:	60fb      	str	r3, [r7, #12]
			break;
 800f338:	f000 bf47 	b.w	80101ca <imagesss+0x1476>
		case 10:
			retorno = "i010.jpg";
 800f33c:	4b9e      	ldr	r3, [pc, #632]	; (800f5b8 <imagesss+0x864>)
 800f33e:	60fb      	str	r3, [r7, #12]
			break;
 800f340:	f000 bf43 	b.w	80101ca <imagesss+0x1476>
		case 11:
			retorno = "i011.jpg";
 800f344:	4b9d      	ldr	r3, [pc, #628]	; (800f5bc <imagesss+0x868>)
 800f346:	60fb      	str	r3, [r7, #12]
			break;
 800f348:	f000 bf3f 	b.w	80101ca <imagesss+0x1476>
		case 12:
			retorno = "i012.jpg";
 800f34c:	4b9c      	ldr	r3, [pc, #624]	; (800f5c0 <imagesss+0x86c>)
 800f34e:	60fb      	str	r3, [r7, #12]
			break;
 800f350:	f000 bf3b 	b.w	80101ca <imagesss+0x1476>
		case 13:
			retorno = "i013.jpg";
 800f354:	4b9b      	ldr	r3, [pc, #620]	; (800f5c4 <imagesss+0x870>)
 800f356:	60fb      	str	r3, [r7, #12]
			break;
 800f358:	f000 bf37 	b.w	80101ca <imagesss+0x1476>
		case 14:
			retorno = "i014.jpg";
 800f35c:	4b9a      	ldr	r3, [pc, #616]	; (800f5c8 <imagesss+0x874>)
 800f35e:	60fb      	str	r3, [r7, #12]
			break;
 800f360:	f000 bf33 	b.w	80101ca <imagesss+0x1476>
		case 15:
			retorno = "i015.jpg";
 800f364:	4b99      	ldr	r3, [pc, #612]	; (800f5cc <imagesss+0x878>)
 800f366:	60fb      	str	r3, [r7, #12]
			break;
 800f368:	f000 bf2f 	b.w	80101ca <imagesss+0x1476>
		case 16:
			retorno = "i016.jpg";
 800f36c:	4b98      	ldr	r3, [pc, #608]	; (800f5d0 <imagesss+0x87c>)
 800f36e:	60fb      	str	r3, [r7, #12]
			break;
 800f370:	f000 bf2b 	b.w	80101ca <imagesss+0x1476>
		case 17:
			retorno = "i017.jpg";
 800f374:	4b97      	ldr	r3, [pc, #604]	; (800f5d4 <imagesss+0x880>)
 800f376:	60fb      	str	r3, [r7, #12]
			break;
 800f378:	f000 bf27 	b.w	80101ca <imagesss+0x1476>
		case 18:
			retorno = "i018.jpg";
 800f37c:	4b96      	ldr	r3, [pc, #600]	; (800f5d8 <imagesss+0x884>)
 800f37e:	60fb      	str	r3, [r7, #12]
			break;
 800f380:	f000 bf23 	b.w	80101ca <imagesss+0x1476>
		case 19:
			retorno = "i019.jpg";
 800f384:	4b95      	ldr	r3, [pc, #596]	; (800f5dc <imagesss+0x888>)
 800f386:	60fb      	str	r3, [r7, #12]
			break;
 800f388:	f000 bf1f 	b.w	80101ca <imagesss+0x1476>
		case 20:
			retorno = "i020.jpg";
 800f38c:	4b94      	ldr	r3, [pc, #592]	; (800f5e0 <imagesss+0x88c>)
 800f38e:	60fb      	str	r3, [r7, #12]
			break;
 800f390:	f000 bf1b 	b.w	80101ca <imagesss+0x1476>
		case 21:
			retorno = "i021.jpg";
 800f394:	4b93      	ldr	r3, [pc, #588]	; (800f5e4 <imagesss+0x890>)
 800f396:	60fb      	str	r3, [r7, #12]
			break;
 800f398:	f000 bf17 	b.w	80101ca <imagesss+0x1476>
		case 22:
			retorno = "i022.jpg";
 800f39c:	4b92      	ldr	r3, [pc, #584]	; (800f5e8 <imagesss+0x894>)
 800f39e:	60fb      	str	r3, [r7, #12]
			break;
 800f3a0:	f000 bf13 	b.w	80101ca <imagesss+0x1476>
		case 23:
			retorno = "i023.jpg";
 800f3a4:	4b91      	ldr	r3, [pc, #580]	; (800f5ec <imagesss+0x898>)
 800f3a6:	60fb      	str	r3, [r7, #12]
			break;
 800f3a8:	f000 bf0f 	b.w	80101ca <imagesss+0x1476>
		case 24:
			retorno = "i024.jpg";
 800f3ac:	4b90      	ldr	r3, [pc, #576]	; (800f5f0 <imagesss+0x89c>)
 800f3ae:	60fb      	str	r3, [r7, #12]
			break;
 800f3b0:	f000 bf0b 	b.w	80101ca <imagesss+0x1476>
		case 25:
			retorno = "i025.jpg";
 800f3b4:	4b8f      	ldr	r3, [pc, #572]	; (800f5f4 <imagesss+0x8a0>)
 800f3b6:	60fb      	str	r3, [r7, #12]
			break;
 800f3b8:	f000 bf07 	b.w	80101ca <imagesss+0x1476>
		case 26:
			retorno = "i026.jpg";
 800f3bc:	4b8e      	ldr	r3, [pc, #568]	; (800f5f8 <imagesss+0x8a4>)
 800f3be:	60fb      	str	r3, [r7, #12]
			break;
 800f3c0:	f000 bf03 	b.w	80101ca <imagesss+0x1476>
		case 27:
			retorno = "i027.jpg";
 800f3c4:	4b8d      	ldr	r3, [pc, #564]	; (800f5fc <imagesss+0x8a8>)
 800f3c6:	60fb      	str	r3, [r7, #12]
			break;
 800f3c8:	f000 beff 	b.w	80101ca <imagesss+0x1476>
		case 28:
			retorno = "i028.jpg";
 800f3cc:	4b8c      	ldr	r3, [pc, #560]	; (800f600 <imagesss+0x8ac>)
 800f3ce:	60fb      	str	r3, [r7, #12]
			break;
 800f3d0:	f000 befb 	b.w	80101ca <imagesss+0x1476>
		case 29:
			retorno = "i029.jpg";
 800f3d4:	4b8b      	ldr	r3, [pc, #556]	; (800f604 <imagesss+0x8b0>)
 800f3d6:	60fb      	str	r3, [r7, #12]
			break;
 800f3d8:	f000 bef7 	b.w	80101ca <imagesss+0x1476>
		case 30:
			retorno = "i030.jpg";
 800f3dc:	4b8a      	ldr	r3, [pc, #552]	; (800f608 <imagesss+0x8b4>)
 800f3de:	60fb      	str	r3, [r7, #12]
			break;
 800f3e0:	f000 bef3 	b.w	80101ca <imagesss+0x1476>
		case 31:
			retorno = "i031.jpg";
 800f3e4:	4b89      	ldr	r3, [pc, #548]	; (800f60c <imagesss+0x8b8>)
 800f3e6:	60fb      	str	r3, [r7, #12]
			break;
 800f3e8:	f000 beef 	b.w	80101ca <imagesss+0x1476>
		case 32:
			retorno = "i032.jpg";
 800f3ec:	4b88      	ldr	r3, [pc, #544]	; (800f610 <imagesss+0x8bc>)
 800f3ee:	60fb      	str	r3, [r7, #12]
			break;
 800f3f0:	f000 beeb 	b.w	80101ca <imagesss+0x1476>
		case 33:
			retorno = "i033.jpg";
 800f3f4:	4b87      	ldr	r3, [pc, #540]	; (800f614 <imagesss+0x8c0>)
 800f3f6:	60fb      	str	r3, [r7, #12]
			break;
 800f3f8:	f000 bee7 	b.w	80101ca <imagesss+0x1476>
		case 34:
			retorno = "i034.jpg";
 800f3fc:	4b86      	ldr	r3, [pc, #536]	; (800f618 <imagesss+0x8c4>)
 800f3fe:	60fb      	str	r3, [r7, #12]
			break;
 800f400:	f000 bee3 	b.w	80101ca <imagesss+0x1476>
		case 35:
			retorno = "i035.jpg";
 800f404:	4b85      	ldr	r3, [pc, #532]	; (800f61c <imagesss+0x8c8>)
 800f406:	60fb      	str	r3, [r7, #12]
			break;
 800f408:	f000 bedf 	b.w	80101ca <imagesss+0x1476>
		case 36:
			retorno = "i036.jpg";
 800f40c:	4b84      	ldr	r3, [pc, #528]	; (800f620 <imagesss+0x8cc>)
 800f40e:	60fb      	str	r3, [r7, #12]
			break;
 800f410:	f000 bedb 	b.w	80101ca <imagesss+0x1476>
		case 37:
			retorno = "i037.jpg";
 800f414:	4b83      	ldr	r3, [pc, #524]	; (800f624 <imagesss+0x8d0>)
 800f416:	60fb      	str	r3, [r7, #12]
			break;
 800f418:	f000 bed7 	b.w	80101ca <imagesss+0x1476>
		case 38:
			retorno = "i038.jpg";
 800f41c:	4b82      	ldr	r3, [pc, #520]	; (800f628 <imagesss+0x8d4>)
 800f41e:	60fb      	str	r3, [r7, #12]
			break;
 800f420:	f000 bed3 	b.w	80101ca <imagesss+0x1476>
		case 39:
			retorno = "i039.jpg";
 800f424:	4b81      	ldr	r3, [pc, #516]	; (800f62c <imagesss+0x8d8>)
 800f426:	60fb      	str	r3, [r7, #12]
			break;
 800f428:	f000 becf 	b.w	80101ca <imagesss+0x1476>
		case 40:
			retorno = "i040.jpg";
 800f42c:	4b80      	ldr	r3, [pc, #512]	; (800f630 <imagesss+0x8dc>)
 800f42e:	60fb      	str	r3, [r7, #12]
			break;
 800f430:	f000 becb 	b.w	80101ca <imagesss+0x1476>
		case 41:
			retorno = "i041.jpg";
 800f434:	4b7f      	ldr	r3, [pc, #508]	; (800f634 <imagesss+0x8e0>)
 800f436:	60fb      	str	r3, [r7, #12]
			break;
 800f438:	f000 bec7 	b.w	80101ca <imagesss+0x1476>
		case 42:
			retorno = "i042.jpg";
 800f43c:	4b7e      	ldr	r3, [pc, #504]	; (800f638 <imagesss+0x8e4>)
 800f43e:	60fb      	str	r3, [r7, #12]
			break;
 800f440:	f000 bec3 	b.w	80101ca <imagesss+0x1476>
		case 43:
			retorno = "i043.jpg";
 800f444:	4b7d      	ldr	r3, [pc, #500]	; (800f63c <imagesss+0x8e8>)
 800f446:	60fb      	str	r3, [r7, #12]
			break;
 800f448:	f000 bebf 	b.w	80101ca <imagesss+0x1476>
		case 44:
			retorno = "i044.jpg";
 800f44c:	4b7c      	ldr	r3, [pc, #496]	; (800f640 <imagesss+0x8ec>)
 800f44e:	60fb      	str	r3, [r7, #12]
			break;
 800f450:	f000 bebb 	b.w	80101ca <imagesss+0x1476>
		case 45:
			retorno = "i045.jpg";
 800f454:	4b7b      	ldr	r3, [pc, #492]	; (800f644 <imagesss+0x8f0>)
 800f456:	60fb      	str	r3, [r7, #12]
			break;
 800f458:	f000 beb7 	b.w	80101ca <imagesss+0x1476>
		case 46:
			retorno = "i046.jpg";
 800f45c:	4b7a      	ldr	r3, [pc, #488]	; (800f648 <imagesss+0x8f4>)
 800f45e:	60fb      	str	r3, [r7, #12]
			break;
 800f460:	f000 beb3 	b.w	80101ca <imagesss+0x1476>
		case 47:
			retorno = "i047.jpg";
 800f464:	4b79      	ldr	r3, [pc, #484]	; (800f64c <imagesss+0x8f8>)
 800f466:	60fb      	str	r3, [r7, #12]
			break;
 800f468:	f000 beaf 	b.w	80101ca <imagesss+0x1476>
		case 48:
			retorno = "i048.jpg";
 800f46c:	4b78      	ldr	r3, [pc, #480]	; (800f650 <imagesss+0x8fc>)
 800f46e:	60fb      	str	r3, [r7, #12]
			break;
 800f470:	f000 beab 	b.w	80101ca <imagesss+0x1476>
		case 49:
			retorno = "i049.jpg";
 800f474:	4b77      	ldr	r3, [pc, #476]	; (800f654 <imagesss+0x900>)
 800f476:	60fb      	str	r3, [r7, #12]
			break;
 800f478:	f000 bea7 	b.w	80101ca <imagesss+0x1476>
		case 50:
			retorno = "i050.jpg";
 800f47c:	4b76      	ldr	r3, [pc, #472]	; (800f658 <imagesss+0x904>)
 800f47e:	60fb      	str	r3, [r7, #12]
			break;
 800f480:	f000 bea3 	b.w	80101ca <imagesss+0x1476>
		case 51:
			retorno = "i051.jpg";
 800f484:	4b75      	ldr	r3, [pc, #468]	; (800f65c <imagesss+0x908>)
 800f486:	60fb      	str	r3, [r7, #12]
			break;
 800f488:	f000 be9f 	b.w	80101ca <imagesss+0x1476>
		case 52:
			retorno = "i052.jpg";
 800f48c:	4b74      	ldr	r3, [pc, #464]	; (800f660 <imagesss+0x90c>)
 800f48e:	60fb      	str	r3, [r7, #12]
			break;
 800f490:	f000 be9b 	b.w	80101ca <imagesss+0x1476>
		case 53:
			retorno = "i053.jpg";
 800f494:	4b73      	ldr	r3, [pc, #460]	; (800f664 <imagesss+0x910>)
 800f496:	60fb      	str	r3, [r7, #12]
			break;
 800f498:	f000 be97 	b.w	80101ca <imagesss+0x1476>
		case 54:
			retorno = "i054.jpg";
 800f49c:	4b72      	ldr	r3, [pc, #456]	; (800f668 <imagesss+0x914>)
 800f49e:	60fb      	str	r3, [r7, #12]
			break;
 800f4a0:	f000 be93 	b.w	80101ca <imagesss+0x1476>
		case 55:
			retorno = "i055.jpg";
 800f4a4:	4b71      	ldr	r3, [pc, #452]	; (800f66c <imagesss+0x918>)
 800f4a6:	60fb      	str	r3, [r7, #12]
			break;
 800f4a8:	f000 be8f 	b.w	80101ca <imagesss+0x1476>
		case 56:
			retorno = "i056.jpg";
 800f4ac:	4b70      	ldr	r3, [pc, #448]	; (800f670 <imagesss+0x91c>)
 800f4ae:	60fb      	str	r3, [r7, #12]
			break;
 800f4b0:	f000 be8b 	b.w	80101ca <imagesss+0x1476>
		case 57:
			retorno = "i057.jpg";
 800f4b4:	4b6f      	ldr	r3, [pc, #444]	; (800f674 <imagesss+0x920>)
 800f4b6:	60fb      	str	r3, [r7, #12]
			break;
 800f4b8:	f000 be87 	b.w	80101ca <imagesss+0x1476>
		case 58:
			retorno = "i058.jpg";
 800f4bc:	4b6e      	ldr	r3, [pc, #440]	; (800f678 <imagesss+0x924>)
 800f4be:	60fb      	str	r3, [r7, #12]
			break;
 800f4c0:	f000 be83 	b.w	80101ca <imagesss+0x1476>
		case 59:
			retorno = "i059.jpg";
 800f4c4:	4b6d      	ldr	r3, [pc, #436]	; (800f67c <imagesss+0x928>)
 800f4c6:	60fb      	str	r3, [r7, #12]
			break;
 800f4c8:	f000 be7f 	b.w	80101ca <imagesss+0x1476>
		case 60:
			retorno = "i060.jpg";
 800f4cc:	4b6c      	ldr	r3, [pc, #432]	; (800f680 <imagesss+0x92c>)
 800f4ce:	60fb      	str	r3, [r7, #12]
			break;
 800f4d0:	f000 be7b 	b.w	80101ca <imagesss+0x1476>
		case 61:
			retorno = "i061.jpg";
 800f4d4:	4b6b      	ldr	r3, [pc, #428]	; (800f684 <imagesss+0x930>)
 800f4d6:	60fb      	str	r3, [r7, #12]
			break;
 800f4d8:	f000 be77 	b.w	80101ca <imagesss+0x1476>
		case 62:
			retorno = "i062.jpg";
 800f4dc:	4b6a      	ldr	r3, [pc, #424]	; (800f688 <imagesss+0x934>)
 800f4de:	60fb      	str	r3, [r7, #12]
			break;
 800f4e0:	f000 be73 	b.w	80101ca <imagesss+0x1476>
		case 63:
			retorno = "i063.jpg";
 800f4e4:	4b69      	ldr	r3, [pc, #420]	; (800f68c <imagesss+0x938>)
 800f4e6:	60fb      	str	r3, [r7, #12]
			break;
 800f4e8:	f000 be6f 	b.w	80101ca <imagesss+0x1476>
		case 64:
			retorno = "i064.jpg";
 800f4ec:	4b68      	ldr	r3, [pc, #416]	; (800f690 <imagesss+0x93c>)
 800f4ee:	60fb      	str	r3, [r7, #12]
			break;
 800f4f0:	f000 be6b 	b.w	80101ca <imagesss+0x1476>
		case 65:
			retorno = "i065.jpg";
 800f4f4:	4b67      	ldr	r3, [pc, #412]	; (800f694 <imagesss+0x940>)
 800f4f6:	60fb      	str	r3, [r7, #12]
			break;
 800f4f8:	f000 be67 	b.w	80101ca <imagesss+0x1476>
		case 66:
			retorno = "i066.jpg";
 800f4fc:	4b66      	ldr	r3, [pc, #408]	; (800f698 <imagesss+0x944>)
 800f4fe:	60fb      	str	r3, [r7, #12]
			break;
 800f500:	f000 be63 	b.w	80101ca <imagesss+0x1476>
		case 67:
			retorno = "i067.jpg";
 800f504:	4b65      	ldr	r3, [pc, #404]	; (800f69c <imagesss+0x948>)
 800f506:	60fb      	str	r3, [r7, #12]
			break;
 800f508:	f000 be5f 	b.w	80101ca <imagesss+0x1476>
		case 68:
			retorno = "i068.jpg";
 800f50c:	4b64      	ldr	r3, [pc, #400]	; (800f6a0 <imagesss+0x94c>)
 800f50e:	60fb      	str	r3, [r7, #12]
			break;
 800f510:	f000 be5b 	b.w	80101ca <imagesss+0x1476>
		case 69:
			retorno = "i069.jpg";
 800f514:	4b63      	ldr	r3, [pc, #396]	; (800f6a4 <imagesss+0x950>)
 800f516:	60fb      	str	r3, [r7, #12]
			break;
 800f518:	f000 be57 	b.w	80101ca <imagesss+0x1476>
		case 70:
			retorno = "i070.jpg";
 800f51c:	4b62      	ldr	r3, [pc, #392]	; (800f6a8 <imagesss+0x954>)
 800f51e:	60fb      	str	r3, [r7, #12]
			break;
 800f520:	f000 be53 	b.w	80101ca <imagesss+0x1476>
		case 71:
			retorno = "i071.jpg";
 800f524:	4b61      	ldr	r3, [pc, #388]	; (800f6ac <imagesss+0x958>)
 800f526:	60fb      	str	r3, [r7, #12]
			break;
 800f528:	f000 be4f 	b.w	80101ca <imagesss+0x1476>
		case 72:
			retorno = "i072.jpg";
 800f52c:	4b60      	ldr	r3, [pc, #384]	; (800f6b0 <imagesss+0x95c>)
 800f52e:	60fb      	str	r3, [r7, #12]
			break;
 800f530:	f000 be4b 	b.w	80101ca <imagesss+0x1476>
		case 73:
			retorno = "i073.jpg";
 800f534:	4b5f      	ldr	r3, [pc, #380]	; (800f6b4 <imagesss+0x960>)
 800f536:	60fb      	str	r3, [r7, #12]
			break;
 800f538:	f000 be47 	b.w	80101ca <imagesss+0x1476>
		case 74:
			retorno = "i074.jpg";
 800f53c:	4b5e      	ldr	r3, [pc, #376]	; (800f6b8 <imagesss+0x964>)
 800f53e:	60fb      	str	r3, [r7, #12]
			break;
 800f540:	f000 be43 	b.w	80101ca <imagesss+0x1476>
		case 75:
			retorno = "i075.jpg";
 800f544:	4b5d      	ldr	r3, [pc, #372]	; (800f6bc <imagesss+0x968>)
 800f546:	60fb      	str	r3, [r7, #12]
			break;
 800f548:	f000 be3f 	b.w	80101ca <imagesss+0x1476>
		case 76:
			retorno = "i076.jpg";
 800f54c:	4b5c      	ldr	r3, [pc, #368]	; (800f6c0 <imagesss+0x96c>)
 800f54e:	60fb      	str	r3, [r7, #12]
			break;
 800f550:	f000 be3b 	b.w	80101ca <imagesss+0x1476>
		case 77:
			retorno = "i077.jpg";
 800f554:	4b5b      	ldr	r3, [pc, #364]	; (800f6c4 <imagesss+0x970>)
 800f556:	60fb      	str	r3, [r7, #12]
			break;
 800f558:	f000 be37 	b.w	80101ca <imagesss+0x1476>
		case 78:
			retorno = "i078.jpg";
 800f55c:	4b5a      	ldr	r3, [pc, #360]	; (800f6c8 <imagesss+0x974>)
 800f55e:	60fb      	str	r3, [r7, #12]
			break;
 800f560:	f000 be33 	b.w	80101ca <imagesss+0x1476>
		case 79:
			retorno = "i079.jpg";
 800f564:	4b59      	ldr	r3, [pc, #356]	; (800f6cc <imagesss+0x978>)
 800f566:	60fb      	str	r3, [r7, #12]
			break;
 800f568:	f000 be2f 	b.w	80101ca <imagesss+0x1476>
		case 80:
			retorno = "i080.jpg";
 800f56c:	4b58      	ldr	r3, [pc, #352]	; (800f6d0 <imagesss+0x97c>)
 800f56e:	60fb      	str	r3, [r7, #12]
			break;
 800f570:	f000 be2b 	b.w	80101ca <imagesss+0x1476>
		case 81:
			retorno = "i081.jpg";
 800f574:	4b57      	ldr	r3, [pc, #348]	; (800f6d4 <imagesss+0x980>)
 800f576:	60fb      	str	r3, [r7, #12]
			break;
 800f578:	f000 be27 	b.w	80101ca <imagesss+0x1476>
		case 82:
			retorno = "i082.jpg";
 800f57c:	4b56      	ldr	r3, [pc, #344]	; (800f6d8 <imagesss+0x984>)
 800f57e:	60fb      	str	r3, [r7, #12]
			break;
 800f580:	f000 be23 	b.w	80101ca <imagesss+0x1476>
		case 83:
			retorno = "i083.jpg";
 800f584:	4b55      	ldr	r3, [pc, #340]	; (800f6dc <imagesss+0x988>)
 800f586:	60fb      	str	r3, [r7, #12]
			break;
 800f588:	f000 be1f 	b.w	80101ca <imagesss+0x1476>
		case 84:
			retorno = "i084.jpg";
 800f58c:	4b54      	ldr	r3, [pc, #336]	; (800f6e0 <imagesss+0x98c>)
 800f58e:	60fb      	str	r3, [r7, #12]
			break;
 800f590:	f000 be1b 	b.w	80101ca <imagesss+0x1476>
 800f594:	080117b0 	.word	0x080117b0
 800f598:	080117bc 	.word	0x080117bc
 800f59c:	080117c8 	.word	0x080117c8
 800f5a0:	080117d4 	.word	0x080117d4
 800f5a4:	080117e0 	.word	0x080117e0
 800f5a8:	080117ec 	.word	0x080117ec
 800f5ac:	080117f8 	.word	0x080117f8
 800f5b0:	08011804 	.word	0x08011804
 800f5b4:	08011810 	.word	0x08011810
 800f5b8:	0801181c 	.word	0x0801181c
 800f5bc:	08011828 	.word	0x08011828
 800f5c0:	08011834 	.word	0x08011834
 800f5c4:	08011840 	.word	0x08011840
 800f5c8:	0801184c 	.word	0x0801184c
 800f5cc:	08011858 	.word	0x08011858
 800f5d0:	08011864 	.word	0x08011864
 800f5d4:	08011870 	.word	0x08011870
 800f5d8:	0801187c 	.word	0x0801187c
 800f5dc:	08011888 	.word	0x08011888
 800f5e0:	08011894 	.word	0x08011894
 800f5e4:	080118a0 	.word	0x080118a0
 800f5e8:	080118ac 	.word	0x080118ac
 800f5ec:	080118b8 	.word	0x080118b8
 800f5f0:	080118c4 	.word	0x080118c4
 800f5f4:	080118d0 	.word	0x080118d0
 800f5f8:	080118dc 	.word	0x080118dc
 800f5fc:	080118e8 	.word	0x080118e8
 800f600:	080118f4 	.word	0x080118f4
 800f604:	08011900 	.word	0x08011900
 800f608:	0801190c 	.word	0x0801190c
 800f60c:	08011918 	.word	0x08011918
 800f610:	08011924 	.word	0x08011924
 800f614:	08011930 	.word	0x08011930
 800f618:	0801193c 	.word	0x0801193c
 800f61c:	08011948 	.word	0x08011948
 800f620:	08011954 	.word	0x08011954
 800f624:	08011960 	.word	0x08011960
 800f628:	0801196c 	.word	0x0801196c
 800f62c:	08011978 	.word	0x08011978
 800f630:	08011984 	.word	0x08011984
 800f634:	08011990 	.word	0x08011990
 800f638:	0801199c 	.word	0x0801199c
 800f63c:	080119a8 	.word	0x080119a8
 800f640:	080119b4 	.word	0x080119b4
 800f644:	080119c0 	.word	0x080119c0
 800f648:	080119cc 	.word	0x080119cc
 800f64c:	080119d8 	.word	0x080119d8
 800f650:	080119e4 	.word	0x080119e4
 800f654:	080119f0 	.word	0x080119f0
 800f658:	080119fc 	.word	0x080119fc
 800f65c:	08011a08 	.word	0x08011a08
 800f660:	08011a14 	.word	0x08011a14
 800f664:	08011a20 	.word	0x08011a20
 800f668:	08011a2c 	.word	0x08011a2c
 800f66c:	08011a38 	.word	0x08011a38
 800f670:	08011a44 	.word	0x08011a44
 800f674:	08011a50 	.word	0x08011a50
 800f678:	08011a5c 	.word	0x08011a5c
 800f67c:	08011a68 	.word	0x08011a68
 800f680:	08011a74 	.word	0x08011a74
 800f684:	08011a80 	.word	0x08011a80
 800f688:	08011a8c 	.word	0x08011a8c
 800f68c:	08011a98 	.word	0x08011a98
 800f690:	08011aa4 	.word	0x08011aa4
 800f694:	08011ab0 	.word	0x08011ab0
 800f698:	08011abc 	.word	0x08011abc
 800f69c:	08011ac8 	.word	0x08011ac8
 800f6a0:	08011ad4 	.word	0x08011ad4
 800f6a4:	08011ae0 	.word	0x08011ae0
 800f6a8:	08011aec 	.word	0x08011aec
 800f6ac:	08011af8 	.word	0x08011af8
 800f6b0:	08011b04 	.word	0x08011b04
 800f6b4:	08011b10 	.word	0x08011b10
 800f6b8:	08011b1c 	.word	0x08011b1c
 800f6bc:	08011b28 	.word	0x08011b28
 800f6c0:	08011b34 	.word	0x08011b34
 800f6c4:	08011b40 	.word	0x08011b40
 800f6c8:	08011b4c 	.word	0x08011b4c
 800f6cc:	08011b58 	.word	0x08011b58
 800f6d0:	08011b64 	.word	0x08011b64
 800f6d4:	08011b70 	.word	0x08011b70
 800f6d8:	08011b7c 	.word	0x08011b7c
 800f6dc:	08011b88 	.word	0x08011b88
 800f6e0:	08011b94 	.word	0x08011b94
		case 85:
			retorno = "i085.jpg";
 800f6e4:	4ba7      	ldr	r3, [pc, #668]	; (800f984 <imagesss+0xc30>)
 800f6e6:	60fb      	str	r3, [r7, #12]
			break;
 800f6e8:	f000 bd6f 	b.w	80101ca <imagesss+0x1476>
		case 86:
			retorno = "i086.jpg";
 800f6ec:	4ba6      	ldr	r3, [pc, #664]	; (800f988 <imagesss+0xc34>)
 800f6ee:	60fb      	str	r3, [r7, #12]
			break;
 800f6f0:	f000 bd6b 	b.w	80101ca <imagesss+0x1476>
		case 87:
			retorno = "i087.jpg";
 800f6f4:	4ba5      	ldr	r3, [pc, #660]	; (800f98c <imagesss+0xc38>)
 800f6f6:	60fb      	str	r3, [r7, #12]
			break;
 800f6f8:	f000 bd67 	b.w	80101ca <imagesss+0x1476>
		case 88:
			retorno = "i088.jpg";
 800f6fc:	4ba4      	ldr	r3, [pc, #656]	; (800f990 <imagesss+0xc3c>)
 800f6fe:	60fb      	str	r3, [r7, #12]
			break;
 800f700:	f000 bd63 	b.w	80101ca <imagesss+0x1476>
		case 89:
			retorno = "i089.jpg";
 800f704:	4ba3      	ldr	r3, [pc, #652]	; (800f994 <imagesss+0xc40>)
 800f706:	60fb      	str	r3, [r7, #12]
			break;
 800f708:	f000 bd5f 	b.w	80101ca <imagesss+0x1476>
		case 90:
			retorno = "i090.jpg";
 800f70c:	4ba2      	ldr	r3, [pc, #648]	; (800f998 <imagesss+0xc44>)
 800f70e:	60fb      	str	r3, [r7, #12]
			break;
 800f710:	f000 bd5b 	b.w	80101ca <imagesss+0x1476>
		case 91:
			retorno = "i091.jpg";
 800f714:	4ba1      	ldr	r3, [pc, #644]	; (800f99c <imagesss+0xc48>)
 800f716:	60fb      	str	r3, [r7, #12]
			break;
 800f718:	f000 bd57 	b.w	80101ca <imagesss+0x1476>
		case 92:
			retorno = "i092.jpg";
 800f71c:	4ba0      	ldr	r3, [pc, #640]	; (800f9a0 <imagesss+0xc4c>)
 800f71e:	60fb      	str	r3, [r7, #12]
			break;
 800f720:	f000 bd53 	b.w	80101ca <imagesss+0x1476>
		case 93:
			retorno = "i093.jpg";
 800f724:	4b9f      	ldr	r3, [pc, #636]	; (800f9a4 <imagesss+0xc50>)
 800f726:	60fb      	str	r3, [r7, #12]
			break;
 800f728:	f000 bd4f 	b.w	80101ca <imagesss+0x1476>
		case 94:
			retorno = "i094.jpg";
 800f72c:	4b9e      	ldr	r3, [pc, #632]	; (800f9a8 <imagesss+0xc54>)
 800f72e:	60fb      	str	r3, [r7, #12]
			break;
 800f730:	f000 bd4b 	b.w	80101ca <imagesss+0x1476>
		case 95:
			retorno = "i095.jpg";
 800f734:	4b9d      	ldr	r3, [pc, #628]	; (800f9ac <imagesss+0xc58>)
 800f736:	60fb      	str	r3, [r7, #12]
			break;
 800f738:	f000 bd47 	b.w	80101ca <imagesss+0x1476>
		case 96:
			retorno = "i096.jpg";
 800f73c:	4b9c      	ldr	r3, [pc, #624]	; (800f9b0 <imagesss+0xc5c>)
 800f73e:	60fb      	str	r3, [r7, #12]
			break;
 800f740:	f000 bd43 	b.w	80101ca <imagesss+0x1476>
		case 97:
			retorno = "i097.jpg";
 800f744:	4b9b      	ldr	r3, [pc, #620]	; (800f9b4 <imagesss+0xc60>)
 800f746:	60fb      	str	r3, [r7, #12]
			break;
 800f748:	f000 bd3f 	b.w	80101ca <imagesss+0x1476>
		case 98:
			retorno = "i098.jpg";
 800f74c:	4b9a      	ldr	r3, [pc, #616]	; (800f9b8 <imagesss+0xc64>)
 800f74e:	60fb      	str	r3, [r7, #12]
			break;
 800f750:	f000 bd3b 	b.w	80101ca <imagesss+0x1476>
		case 99:
			retorno = "i099.jpg";
 800f754:	4b99      	ldr	r3, [pc, #612]	; (800f9bc <imagesss+0xc68>)
 800f756:	60fb      	str	r3, [r7, #12]
			break;
 800f758:	f000 bd37 	b.w	80101ca <imagesss+0x1476>
		case 100:
			retorno = "i100.jpg";
 800f75c:	4b98      	ldr	r3, [pc, #608]	; (800f9c0 <imagesss+0xc6c>)
 800f75e:	60fb      	str	r3, [r7, #12]
			break;
 800f760:	f000 bd33 	b.w	80101ca <imagesss+0x1476>
		case 101:
			retorno = "i101.jpg";
 800f764:	4b97      	ldr	r3, [pc, #604]	; (800f9c4 <imagesss+0xc70>)
 800f766:	60fb      	str	r3, [r7, #12]
			break;
 800f768:	f000 bd2f 	b.w	80101ca <imagesss+0x1476>
		case 102:
			retorno = "i102.jpg";
 800f76c:	4b96      	ldr	r3, [pc, #600]	; (800f9c8 <imagesss+0xc74>)
 800f76e:	60fb      	str	r3, [r7, #12]
			break;
 800f770:	f000 bd2b 	b.w	80101ca <imagesss+0x1476>
		case 103:
			retorno = "i103.jpg";
 800f774:	4b95      	ldr	r3, [pc, #596]	; (800f9cc <imagesss+0xc78>)
 800f776:	60fb      	str	r3, [r7, #12]
			break;
 800f778:	f000 bd27 	b.w	80101ca <imagesss+0x1476>
		case 104:
			retorno = "i104.jpg";
 800f77c:	4b94      	ldr	r3, [pc, #592]	; (800f9d0 <imagesss+0xc7c>)
 800f77e:	60fb      	str	r3, [r7, #12]
			break;
 800f780:	f000 bd23 	b.w	80101ca <imagesss+0x1476>
		case 105:
			retorno = "i105.jpg";
 800f784:	4b93      	ldr	r3, [pc, #588]	; (800f9d4 <imagesss+0xc80>)
 800f786:	60fb      	str	r3, [r7, #12]
			break;
 800f788:	f000 bd1f 	b.w	80101ca <imagesss+0x1476>
		case 106:
			retorno = "i106.jpg";
 800f78c:	4b92      	ldr	r3, [pc, #584]	; (800f9d8 <imagesss+0xc84>)
 800f78e:	60fb      	str	r3, [r7, #12]
			break;
 800f790:	f000 bd1b 	b.w	80101ca <imagesss+0x1476>
		case 107:
			retorno = "i107.jpg";
 800f794:	4b91      	ldr	r3, [pc, #580]	; (800f9dc <imagesss+0xc88>)
 800f796:	60fb      	str	r3, [r7, #12]
			break;
 800f798:	f000 bd17 	b.w	80101ca <imagesss+0x1476>
		case 108:
			retorno = "i108.jpg";
 800f79c:	4b90      	ldr	r3, [pc, #576]	; (800f9e0 <imagesss+0xc8c>)
 800f79e:	60fb      	str	r3, [r7, #12]
			break;
 800f7a0:	f000 bd13 	b.w	80101ca <imagesss+0x1476>
		case 109:
			retorno = "i109.jpg";
 800f7a4:	4b8f      	ldr	r3, [pc, #572]	; (800f9e4 <imagesss+0xc90>)
 800f7a6:	60fb      	str	r3, [r7, #12]
			break;
 800f7a8:	f000 bd0f 	b.w	80101ca <imagesss+0x1476>
		case 110:
			retorno = "i110.jpg";
 800f7ac:	4b8e      	ldr	r3, [pc, #568]	; (800f9e8 <imagesss+0xc94>)
 800f7ae:	60fb      	str	r3, [r7, #12]
			break;
 800f7b0:	f000 bd0b 	b.w	80101ca <imagesss+0x1476>
		case 111:
			retorno = "i111.jpg";
 800f7b4:	4b8d      	ldr	r3, [pc, #564]	; (800f9ec <imagesss+0xc98>)
 800f7b6:	60fb      	str	r3, [r7, #12]
			break;
 800f7b8:	f000 bd07 	b.w	80101ca <imagesss+0x1476>
		case 112:
			retorno = "i112.jpg";
 800f7bc:	4b8c      	ldr	r3, [pc, #560]	; (800f9f0 <imagesss+0xc9c>)
 800f7be:	60fb      	str	r3, [r7, #12]
			break;
 800f7c0:	f000 bd03 	b.w	80101ca <imagesss+0x1476>
		case 113:
			retorno = "i113.jpg";
 800f7c4:	4b8b      	ldr	r3, [pc, #556]	; (800f9f4 <imagesss+0xca0>)
 800f7c6:	60fb      	str	r3, [r7, #12]
			break;
 800f7c8:	f000 bcff 	b.w	80101ca <imagesss+0x1476>
		case 114:
			retorno = "i114.jpg";
 800f7cc:	4b8a      	ldr	r3, [pc, #552]	; (800f9f8 <imagesss+0xca4>)
 800f7ce:	60fb      	str	r3, [r7, #12]
			break;
 800f7d0:	f000 bcfb 	b.w	80101ca <imagesss+0x1476>
		case 115:
			retorno = "i115.jpg";
 800f7d4:	4b89      	ldr	r3, [pc, #548]	; (800f9fc <imagesss+0xca8>)
 800f7d6:	60fb      	str	r3, [r7, #12]
			break;
 800f7d8:	f000 bcf7 	b.w	80101ca <imagesss+0x1476>
		case 116:
			retorno = "i116.jpg";
 800f7dc:	4b88      	ldr	r3, [pc, #544]	; (800fa00 <imagesss+0xcac>)
 800f7de:	60fb      	str	r3, [r7, #12]
			break;
 800f7e0:	f000 bcf3 	b.w	80101ca <imagesss+0x1476>
		case 117:
			retorno = "i117.jpg";
 800f7e4:	4b87      	ldr	r3, [pc, #540]	; (800fa04 <imagesss+0xcb0>)
 800f7e6:	60fb      	str	r3, [r7, #12]
			break;
 800f7e8:	f000 bcef 	b.w	80101ca <imagesss+0x1476>
		case 118:
			retorno = "i118.jpg";
 800f7ec:	4b86      	ldr	r3, [pc, #536]	; (800fa08 <imagesss+0xcb4>)
 800f7ee:	60fb      	str	r3, [r7, #12]
			break;
 800f7f0:	f000 bceb 	b.w	80101ca <imagesss+0x1476>
		case 119:
			retorno = "i119.jpg";
 800f7f4:	4b85      	ldr	r3, [pc, #532]	; (800fa0c <imagesss+0xcb8>)
 800f7f6:	60fb      	str	r3, [r7, #12]
			break;
 800f7f8:	f000 bce7 	b.w	80101ca <imagesss+0x1476>
		case 120:
			retorno = "i120.jpg";
 800f7fc:	4b84      	ldr	r3, [pc, #528]	; (800fa10 <imagesss+0xcbc>)
 800f7fe:	60fb      	str	r3, [r7, #12]
			break;
 800f800:	f000 bce3 	b.w	80101ca <imagesss+0x1476>
		case 121:
			retorno = "i121.jpg";
 800f804:	4b83      	ldr	r3, [pc, #524]	; (800fa14 <imagesss+0xcc0>)
 800f806:	60fb      	str	r3, [r7, #12]
			break;
 800f808:	f000 bcdf 	b.w	80101ca <imagesss+0x1476>
		case 122:
			retorno = "i122.jpg";
 800f80c:	4b82      	ldr	r3, [pc, #520]	; (800fa18 <imagesss+0xcc4>)
 800f80e:	60fb      	str	r3, [r7, #12]
			break;
 800f810:	f000 bcdb 	b.w	80101ca <imagesss+0x1476>
		case 123:
			retorno = "i123.jpg";
 800f814:	4b81      	ldr	r3, [pc, #516]	; (800fa1c <imagesss+0xcc8>)
 800f816:	60fb      	str	r3, [r7, #12]
			break;
 800f818:	f000 bcd7 	b.w	80101ca <imagesss+0x1476>
		case 124:
			retorno = "i124.jpg";
 800f81c:	4b80      	ldr	r3, [pc, #512]	; (800fa20 <imagesss+0xccc>)
 800f81e:	60fb      	str	r3, [r7, #12]
			break;
 800f820:	f000 bcd3 	b.w	80101ca <imagesss+0x1476>
		case 125:
			retorno = "i125.jpg";
 800f824:	4b7f      	ldr	r3, [pc, #508]	; (800fa24 <imagesss+0xcd0>)
 800f826:	60fb      	str	r3, [r7, #12]
			break;
 800f828:	f000 bccf 	b.w	80101ca <imagesss+0x1476>
		case 126:
			retorno = "i126.jpg";
 800f82c:	4b7e      	ldr	r3, [pc, #504]	; (800fa28 <imagesss+0xcd4>)
 800f82e:	60fb      	str	r3, [r7, #12]
			break;
 800f830:	f000 bccb 	b.w	80101ca <imagesss+0x1476>
		case 127:
			retorno = "i127.jpg";
 800f834:	4b7d      	ldr	r3, [pc, #500]	; (800fa2c <imagesss+0xcd8>)
 800f836:	60fb      	str	r3, [r7, #12]
			break;
 800f838:	f000 bcc7 	b.w	80101ca <imagesss+0x1476>
		case 128:
			retorno = "i128.jpg";
 800f83c:	4b7c      	ldr	r3, [pc, #496]	; (800fa30 <imagesss+0xcdc>)
 800f83e:	60fb      	str	r3, [r7, #12]
			break;
 800f840:	f000 bcc3 	b.w	80101ca <imagesss+0x1476>
		case 129:
			retorno = "i129.jpg";
 800f844:	4b7b      	ldr	r3, [pc, #492]	; (800fa34 <imagesss+0xce0>)
 800f846:	60fb      	str	r3, [r7, #12]
			break;
 800f848:	f000 bcbf 	b.w	80101ca <imagesss+0x1476>
		case 130:
			retorno = "i130.jpg";
 800f84c:	4b7a      	ldr	r3, [pc, #488]	; (800fa38 <imagesss+0xce4>)
 800f84e:	60fb      	str	r3, [r7, #12]
			break;
 800f850:	f000 bcbb 	b.w	80101ca <imagesss+0x1476>
		case 131:
			retorno = "i131.jpg";
 800f854:	4b79      	ldr	r3, [pc, #484]	; (800fa3c <imagesss+0xce8>)
 800f856:	60fb      	str	r3, [r7, #12]
			break;
 800f858:	f000 bcb7 	b.w	80101ca <imagesss+0x1476>
		case 132:
			retorno = "i132.jpg";
 800f85c:	4b78      	ldr	r3, [pc, #480]	; (800fa40 <imagesss+0xcec>)
 800f85e:	60fb      	str	r3, [r7, #12]
			break;
 800f860:	f000 bcb3 	b.w	80101ca <imagesss+0x1476>
		case 133:
			retorno = "i133.jpg";
 800f864:	4b77      	ldr	r3, [pc, #476]	; (800fa44 <imagesss+0xcf0>)
 800f866:	60fb      	str	r3, [r7, #12]
			break;
 800f868:	f000 bcaf 	b.w	80101ca <imagesss+0x1476>
		case 134:
			retorno = "i134.jpg";
 800f86c:	4b76      	ldr	r3, [pc, #472]	; (800fa48 <imagesss+0xcf4>)
 800f86e:	60fb      	str	r3, [r7, #12]
			break;
 800f870:	f000 bcab 	b.w	80101ca <imagesss+0x1476>
		case 135:
			retorno = "i135.jpg";
 800f874:	4b75      	ldr	r3, [pc, #468]	; (800fa4c <imagesss+0xcf8>)
 800f876:	60fb      	str	r3, [r7, #12]
			break;
 800f878:	f000 bca7 	b.w	80101ca <imagesss+0x1476>
		case 136:
			retorno = "i136.jpg";
 800f87c:	4b74      	ldr	r3, [pc, #464]	; (800fa50 <imagesss+0xcfc>)
 800f87e:	60fb      	str	r3, [r7, #12]
			break;
 800f880:	f000 bca3 	b.w	80101ca <imagesss+0x1476>
		case 137:
			retorno = "i137.jpg";
 800f884:	4b73      	ldr	r3, [pc, #460]	; (800fa54 <imagesss+0xd00>)
 800f886:	60fb      	str	r3, [r7, #12]
			break;
 800f888:	f000 bc9f 	b.w	80101ca <imagesss+0x1476>
		case 138:
			retorno = "i138.jpg";
 800f88c:	4b72      	ldr	r3, [pc, #456]	; (800fa58 <imagesss+0xd04>)
 800f88e:	60fb      	str	r3, [r7, #12]
			break;
 800f890:	f000 bc9b 	b.w	80101ca <imagesss+0x1476>
		case 139:
			retorno = "i139.jpg";
 800f894:	4b71      	ldr	r3, [pc, #452]	; (800fa5c <imagesss+0xd08>)
 800f896:	60fb      	str	r3, [r7, #12]
			break;
 800f898:	f000 bc97 	b.w	80101ca <imagesss+0x1476>
		case 140:
			retorno = "i140.jpg";
 800f89c:	4b70      	ldr	r3, [pc, #448]	; (800fa60 <imagesss+0xd0c>)
 800f89e:	60fb      	str	r3, [r7, #12]
			break;
 800f8a0:	f000 bc93 	b.w	80101ca <imagesss+0x1476>
		case 141:
			retorno = "i141.jpg";
 800f8a4:	4b6f      	ldr	r3, [pc, #444]	; (800fa64 <imagesss+0xd10>)
 800f8a6:	60fb      	str	r3, [r7, #12]
			break;
 800f8a8:	f000 bc8f 	b.w	80101ca <imagesss+0x1476>
		case 142:
			retorno = "i142.jpg";
 800f8ac:	4b6e      	ldr	r3, [pc, #440]	; (800fa68 <imagesss+0xd14>)
 800f8ae:	60fb      	str	r3, [r7, #12]
			break;
 800f8b0:	f000 bc8b 	b.w	80101ca <imagesss+0x1476>
		case 143:
			retorno = "i143.jpg";
 800f8b4:	4b6d      	ldr	r3, [pc, #436]	; (800fa6c <imagesss+0xd18>)
 800f8b6:	60fb      	str	r3, [r7, #12]
			break;
 800f8b8:	f000 bc87 	b.w	80101ca <imagesss+0x1476>
		case 144:
			retorno = "i144.jpg";
 800f8bc:	4b6c      	ldr	r3, [pc, #432]	; (800fa70 <imagesss+0xd1c>)
 800f8be:	60fb      	str	r3, [r7, #12]
			break;
 800f8c0:	f000 bc83 	b.w	80101ca <imagesss+0x1476>
		case 145:
			retorno = "i145.jpg";
 800f8c4:	4b6b      	ldr	r3, [pc, #428]	; (800fa74 <imagesss+0xd20>)
 800f8c6:	60fb      	str	r3, [r7, #12]
			break;
 800f8c8:	f000 bc7f 	b.w	80101ca <imagesss+0x1476>
		case 146:
			retorno = "i146.jpg";
 800f8cc:	4b6a      	ldr	r3, [pc, #424]	; (800fa78 <imagesss+0xd24>)
 800f8ce:	60fb      	str	r3, [r7, #12]
			break;
 800f8d0:	f000 bc7b 	b.w	80101ca <imagesss+0x1476>
		case 147:
			retorno = "i147.jpg";
 800f8d4:	4b69      	ldr	r3, [pc, #420]	; (800fa7c <imagesss+0xd28>)
 800f8d6:	60fb      	str	r3, [r7, #12]
			break;
 800f8d8:	f000 bc77 	b.w	80101ca <imagesss+0x1476>
		case 148:
			retorno = "i148.jpg";
 800f8dc:	4b68      	ldr	r3, [pc, #416]	; (800fa80 <imagesss+0xd2c>)
 800f8de:	60fb      	str	r3, [r7, #12]
			break;
 800f8e0:	f000 bc73 	b.w	80101ca <imagesss+0x1476>
		case 149:
			retorno = "i149.jpg";
 800f8e4:	4b67      	ldr	r3, [pc, #412]	; (800fa84 <imagesss+0xd30>)
 800f8e6:	60fb      	str	r3, [r7, #12]
			break;
 800f8e8:	f000 bc6f 	b.w	80101ca <imagesss+0x1476>
		case 150:
			retorno = "i150.jpg";
 800f8ec:	4b66      	ldr	r3, [pc, #408]	; (800fa88 <imagesss+0xd34>)
 800f8ee:	60fb      	str	r3, [r7, #12]
			break;
 800f8f0:	f000 bc6b 	b.w	80101ca <imagesss+0x1476>
		case 151:
			retorno = "i151.jpg";
 800f8f4:	4b65      	ldr	r3, [pc, #404]	; (800fa8c <imagesss+0xd38>)
 800f8f6:	60fb      	str	r3, [r7, #12]
			break;
 800f8f8:	f000 bc67 	b.w	80101ca <imagesss+0x1476>
		case 152:
			retorno = "i152.jpg";
 800f8fc:	4b64      	ldr	r3, [pc, #400]	; (800fa90 <imagesss+0xd3c>)
 800f8fe:	60fb      	str	r3, [r7, #12]
			break;
 800f900:	f000 bc63 	b.w	80101ca <imagesss+0x1476>
		case 153:
			retorno = "i153.jpg";
 800f904:	4b63      	ldr	r3, [pc, #396]	; (800fa94 <imagesss+0xd40>)
 800f906:	60fb      	str	r3, [r7, #12]
			break;
 800f908:	f000 bc5f 	b.w	80101ca <imagesss+0x1476>
		case 154:
			retorno = "i154.jpg";
 800f90c:	4b62      	ldr	r3, [pc, #392]	; (800fa98 <imagesss+0xd44>)
 800f90e:	60fb      	str	r3, [r7, #12]
			break;
 800f910:	f000 bc5b 	b.w	80101ca <imagesss+0x1476>
		case 155:
			retorno = "i155.jpg";
 800f914:	4b61      	ldr	r3, [pc, #388]	; (800fa9c <imagesss+0xd48>)
 800f916:	60fb      	str	r3, [r7, #12]
			break;
 800f918:	f000 bc57 	b.w	80101ca <imagesss+0x1476>
		case 156:
			retorno = "i156.jpg";
 800f91c:	4b60      	ldr	r3, [pc, #384]	; (800faa0 <imagesss+0xd4c>)
 800f91e:	60fb      	str	r3, [r7, #12]
			break;
 800f920:	f000 bc53 	b.w	80101ca <imagesss+0x1476>
		case 157:
			retorno = "i157.jpg";
 800f924:	4b5f      	ldr	r3, [pc, #380]	; (800faa4 <imagesss+0xd50>)
 800f926:	60fb      	str	r3, [r7, #12]
			break;
 800f928:	f000 bc4f 	b.w	80101ca <imagesss+0x1476>
		case 158:
			retorno = "i158.jpg";
 800f92c:	4b5e      	ldr	r3, [pc, #376]	; (800faa8 <imagesss+0xd54>)
 800f92e:	60fb      	str	r3, [r7, #12]
			break;
 800f930:	f000 bc4b 	b.w	80101ca <imagesss+0x1476>
		case 159:
			retorno = "i159.jpg";
 800f934:	4b5d      	ldr	r3, [pc, #372]	; (800faac <imagesss+0xd58>)
 800f936:	60fb      	str	r3, [r7, #12]
			break;
 800f938:	f000 bc47 	b.w	80101ca <imagesss+0x1476>
		case 160:
			retorno = "i160.jpg";
 800f93c:	4b5c      	ldr	r3, [pc, #368]	; (800fab0 <imagesss+0xd5c>)
 800f93e:	60fb      	str	r3, [r7, #12]
			break;
 800f940:	f000 bc43 	b.w	80101ca <imagesss+0x1476>
		case 161:
			retorno = "i161.jpg";
 800f944:	4b5b      	ldr	r3, [pc, #364]	; (800fab4 <imagesss+0xd60>)
 800f946:	60fb      	str	r3, [r7, #12]
			break;
 800f948:	f000 bc3f 	b.w	80101ca <imagesss+0x1476>
		case 162:
			retorno = "i162.jpg";
 800f94c:	4b5a      	ldr	r3, [pc, #360]	; (800fab8 <imagesss+0xd64>)
 800f94e:	60fb      	str	r3, [r7, #12]
			break;
 800f950:	f000 bc3b 	b.w	80101ca <imagesss+0x1476>
		case 163:
			retorno = "i163.jpg";
 800f954:	4b59      	ldr	r3, [pc, #356]	; (800fabc <imagesss+0xd68>)
 800f956:	60fb      	str	r3, [r7, #12]
			break;
 800f958:	f000 bc37 	b.w	80101ca <imagesss+0x1476>
		case 164:
			retorno = "i164.jpg";
 800f95c:	4b58      	ldr	r3, [pc, #352]	; (800fac0 <imagesss+0xd6c>)
 800f95e:	60fb      	str	r3, [r7, #12]
			break;
 800f960:	f000 bc33 	b.w	80101ca <imagesss+0x1476>
		case 165:
			retorno = "i165.jpg";
 800f964:	4b57      	ldr	r3, [pc, #348]	; (800fac4 <imagesss+0xd70>)
 800f966:	60fb      	str	r3, [r7, #12]
			break;
 800f968:	f000 bc2f 	b.w	80101ca <imagesss+0x1476>
		case 166:
			retorno = "i166.jpg";
 800f96c:	4b56      	ldr	r3, [pc, #344]	; (800fac8 <imagesss+0xd74>)
 800f96e:	60fb      	str	r3, [r7, #12]
			break;
 800f970:	f000 bc2b 	b.w	80101ca <imagesss+0x1476>
		case 167:
			retorno = "i167.jpg";
 800f974:	4b55      	ldr	r3, [pc, #340]	; (800facc <imagesss+0xd78>)
 800f976:	60fb      	str	r3, [r7, #12]
			break;
 800f978:	f000 bc27 	b.w	80101ca <imagesss+0x1476>
		case 168:
			retorno = "i168.jpg";
 800f97c:	4b54      	ldr	r3, [pc, #336]	; (800fad0 <imagesss+0xd7c>)
 800f97e:	60fb      	str	r3, [r7, #12]
			break;
 800f980:	f000 bc23 	b.w	80101ca <imagesss+0x1476>
 800f984:	08011ba0 	.word	0x08011ba0
 800f988:	08011bac 	.word	0x08011bac
 800f98c:	08011bb8 	.word	0x08011bb8
 800f990:	08011bc4 	.word	0x08011bc4
 800f994:	08011bd0 	.word	0x08011bd0
 800f998:	08011bdc 	.word	0x08011bdc
 800f99c:	08011be8 	.word	0x08011be8
 800f9a0:	08011bf4 	.word	0x08011bf4
 800f9a4:	08011c00 	.word	0x08011c00
 800f9a8:	08011c0c 	.word	0x08011c0c
 800f9ac:	08011c18 	.word	0x08011c18
 800f9b0:	08011c24 	.word	0x08011c24
 800f9b4:	08011c30 	.word	0x08011c30
 800f9b8:	08011c3c 	.word	0x08011c3c
 800f9bc:	08011c48 	.word	0x08011c48
 800f9c0:	08011c54 	.word	0x08011c54
 800f9c4:	08011c60 	.word	0x08011c60
 800f9c8:	08011c6c 	.word	0x08011c6c
 800f9cc:	08011c78 	.word	0x08011c78
 800f9d0:	08011c84 	.word	0x08011c84
 800f9d4:	08011c90 	.word	0x08011c90
 800f9d8:	08011c9c 	.word	0x08011c9c
 800f9dc:	08011ca8 	.word	0x08011ca8
 800f9e0:	08011cb4 	.word	0x08011cb4
 800f9e4:	08011cc0 	.word	0x08011cc0
 800f9e8:	08011ccc 	.word	0x08011ccc
 800f9ec:	08011cd8 	.word	0x08011cd8
 800f9f0:	08011ce4 	.word	0x08011ce4
 800f9f4:	08011cf0 	.word	0x08011cf0
 800f9f8:	08011cfc 	.word	0x08011cfc
 800f9fc:	08011d08 	.word	0x08011d08
 800fa00:	08011d14 	.word	0x08011d14
 800fa04:	08011d20 	.word	0x08011d20
 800fa08:	08011d2c 	.word	0x08011d2c
 800fa0c:	08011d38 	.word	0x08011d38
 800fa10:	08011d44 	.word	0x08011d44
 800fa14:	08011d50 	.word	0x08011d50
 800fa18:	08011d5c 	.word	0x08011d5c
 800fa1c:	08011d68 	.word	0x08011d68
 800fa20:	08011d74 	.word	0x08011d74
 800fa24:	08011d80 	.word	0x08011d80
 800fa28:	08011d8c 	.word	0x08011d8c
 800fa2c:	08011d98 	.word	0x08011d98
 800fa30:	08011da4 	.word	0x08011da4
 800fa34:	08011db0 	.word	0x08011db0
 800fa38:	08011dbc 	.word	0x08011dbc
 800fa3c:	08011dc8 	.word	0x08011dc8
 800fa40:	08011dd4 	.word	0x08011dd4
 800fa44:	08011de0 	.word	0x08011de0
 800fa48:	08011dec 	.word	0x08011dec
 800fa4c:	08011df8 	.word	0x08011df8
 800fa50:	08011e04 	.word	0x08011e04
 800fa54:	08011e10 	.word	0x08011e10
 800fa58:	08011e1c 	.word	0x08011e1c
 800fa5c:	08011e28 	.word	0x08011e28
 800fa60:	08011e34 	.word	0x08011e34
 800fa64:	08011e40 	.word	0x08011e40
 800fa68:	08011e4c 	.word	0x08011e4c
 800fa6c:	08011e58 	.word	0x08011e58
 800fa70:	08011e64 	.word	0x08011e64
 800fa74:	08011e70 	.word	0x08011e70
 800fa78:	08011e7c 	.word	0x08011e7c
 800fa7c:	08011e88 	.word	0x08011e88
 800fa80:	08011e94 	.word	0x08011e94
 800fa84:	08011ea0 	.word	0x08011ea0
 800fa88:	08011eac 	.word	0x08011eac
 800fa8c:	08011eb8 	.word	0x08011eb8
 800fa90:	08011ec4 	.word	0x08011ec4
 800fa94:	08011ed0 	.word	0x08011ed0
 800fa98:	08011edc 	.word	0x08011edc
 800fa9c:	08011ee8 	.word	0x08011ee8
 800faa0:	08011ef4 	.word	0x08011ef4
 800faa4:	08011f00 	.word	0x08011f00
 800faa8:	08011f0c 	.word	0x08011f0c
 800faac:	08011f18 	.word	0x08011f18
 800fab0:	08011f24 	.word	0x08011f24
 800fab4:	08011f30 	.word	0x08011f30
 800fab8:	08011f3c 	.word	0x08011f3c
 800fabc:	08011f48 	.word	0x08011f48
 800fac0:	08011f54 	.word	0x08011f54
 800fac4:	08011f60 	.word	0x08011f60
 800fac8:	08011f6c 	.word	0x08011f6c
 800facc:	08011f78 	.word	0x08011f78
 800fad0:	08011f84 	.word	0x08011f84
		case 169:
			retorno = "i169.jpg";
 800fad4:	4b7d      	ldr	r3, [pc, #500]	; (800fccc <imagesss+0xf78>)
 800fad6:	60fb      	str	r3, [r7, #12]
			break;
 800fad8:	e377      	b.n	80101ca <imagesss+0x1476>
		case 170:
			retorno = "i170.jpg";
 800fada:	4b7d      	ldr	r3, [pc, #500]	; (800fcd0 <imagesss+0xf7c>)
 800fadc:	60fb      	str	r3, [r7, #12]
			break;
 800fade:	e374      	b.n	80101ca <imagesss+0x1476>
		case 171:
			retorno = "i171.jpg";
 800fae0:	4b7c      	ldr	r3, [pc, #496]	; (800fcd4 <imagesss+0xf80>)
 800fae2:	60fb      	str	r3, [r7, #12]
			break;
 800fae4:	e371      	b.n	80101ca <imagesss+0x1476>
		case 172:
			retorno = "i172.jpg";
 800fae6:	4b7c      	ldr	r3, [pc, #496]	; (800fcd8 <imagesss+0xf84>)
 800fae8:	60fb      	str	r3, [r7, #12]
			break;
 800faea:	e36e      	b.n	80101ca <imagesss+0x1476>
		case 173:
			retorno = "i173.jpg";
 800faec:	4b7b      	ldr	r3, [pc, #492]	; (800fcdc <imagesss+0xf88>)
 800faee:	60fb      	str	r3, [r7, #12]
			break;
 800faf0:	e36b      	b.n	80101ca <imagesss+0x1476>
		case 174:
			retorno = "i174.jpg";
 800faf2:	4b7b      	ldr	r3, [pc, #492]	; (800fce0 <imagesss+0xf8c>)
 800faf4:	60fb      	str	r3, [r7, #12]
			break;
 800faf6:	e368      	b.n	80101ca <imagesss+0x1476>
		case 175:
			retorno = "i175.jpg";
 800faf8:	4b7a      	ldr	r3, [pc, #488]	; (800fce4 <imagesss+0xf90>)
 800fafa:	60fb      	str	r3, [r7, #12]
			break;
 800fafc:	e365      	b.n	80101ca <imagesss+0x1476>
		case 176:
			retorno = "i176.jpg";
 800fafe:	4b7a      	ldr	r3, [pc, #488]	; (800fce8 <imagesss+0xf94>)
 800fb00:	60fb      	str	r3, [r7, #12]
			break;
 800fb02:	e362      	b.n	80101ca <imagesss+0x1476>
		case 177:
			retorno = "i177.jpg";
 800fb04:	4b79      	ldr	r3, [pc, #484]	; (800fcec <imagesss+0xf98>)
 800fb06:	60fb      	str	r3, [r7, #12]
			break;
 800fb08:	e35f      	b.n	80101ca <imagesss+0x1476>
		case 178:
			retorno = "i178.jpg";
 800fb0a:	4b79      	ldr	r3, [pc, #484]	; (800fcf0 <imagesss+0xf9c>)
 800fb0c:	60fb      	str	r3, [r7, #12]
			break;
 800fb0e:	e35c      	b.n	80101ca <imagesss+0x1476>
		case 179:
			retorno = "i179.jpg";
 800fb10:	4b78      	ldr	r3, [pc, #480]	; (800fcf4 <imagesss+0xfa0>)
 800fb12:	60fb      	str	r3, [r7, #12]
			break;
 800fb14:	e359      	b.n	80101ca <imagesss+0x1476>
		case 180:
			retorno = "i180.jpg";
 800fb16:	4b78      	ldr	r3, [pc, #480]	; (800fcf8 <imagesss+0xfa4>)
 800fb18:	60fb      	str	r3, [r7, #12]
			break;
 800fb1a:	e356      	b.n	80101ca <imagesss+0x1476>
		case 181:
			retorno = "i181.jpg";
 800fb1c:	4b77      	ldr	r3, [pc, #476]	; (800fcfc <imagesss+0xfa8>)
 800fb1e:	60fb      	str	r3, [r7, #12]
			break;
 800fb20:	e353      	b.n	80101ca <imagesss+0x1476>
		case 182:
			retorno = "i182.jpg";
 800fb22:	4b77      	ldr	r3, [pc, #476]	; (800fd00 <imagesss+0xfac>)
 800fb24:	60fb      	str	r3, [r7, #12]
			break;
 800fb26:	e350      	b.n	80101ca <imagesss+0x1476>
		case 183:
			retorno = "i183.jpg";
 800fb28:	4b76      	ldr	r3, [pc, #472]	; (800fd04 <imagesss+0xfb0>)
 800fb2a:	60fb      	str	r3, [r7, #12]
			break;
 800fb2c:	e34d      	b.n	80101ca <imagesss+0x1476>
		case 184:
			retorno = "i184.jpg";
 800fb2e:	4b76      	ldr	r3, [pc, #472]	; (800fd08 <imagesss+0xfb4>)
 800fb30:	60fb      	str	r3, [r7, #12]
			break;
 800fb32:	e34a      	b.n	80101ca <imagesss+0x1476>
		case 185:
			retorno = "i185.jpg";
 800fb34:	4b75      	ldr	r3, [pc, #468]	; (800fd0c <imagesss+0xfb8>)
 800fb36:	60fb      	str	r3, [r7, #12]
			break;
 800fb38:	e347      	b.n	80101ca <imagesss+0x1476>
		case 186:
			retorno = "i186.jpg";
 800fb3a:	4b75      	ldr	r3, [pc, #468]	; (800fd10 <imagesss+0xfbc>)
 800fb3c:	60fb      	str	r3, [r7, #12]
			break;
 800fb3e:	e344      	b.n	80101ca <imagesss+0x1476>
		case 187:
			retorno = "i187.jpg";
 800fb40:	4b74      	ldr	r3, [pc, #464]	; (800fd14 <imagesss+0xfc0>)
 800fb42:	60fb      	str	r3, [r7, #12]
			break;
 800fb44:	e341      	b.n	80101ca <imagesss+0x1476>
		case 188:
			retorno = "i188.jpg";
 800fb46:	4b74      	ldr	r3, [pc, #464]	; (800fd18 <imagesss+0xfc4>)
 800fb48:	60fb      	str	r3, [r7, #12]
			break;
 800fb4a:	e33e      	b.n	80101ca <imagesss+0x1476>
		case 189:
			retorno = "i189.jpg";
 800fb4c:	4b73      	ldr	r3, [pc, #460]	; (800fd1c <imagesss+0xfc8>)
 800fb4e:	60fb      	str	r3, [r7, #12]
			break;
 800fb50:	e33b      	b.n	80101ca <imagesss+0x1476>
		case 190:
			retorno = "i190.jpg";
 800fb52:	4b73      	ldr	r3, [pc, #460]	; (800fd20 <imagesss+0xfcc>)
 800fb54:	60fb      	str	r3, [r7, #12]
			break;
 800fb56:	e338      	b.n	80101ca <imagesss+0x1476>
		case 191:
			retorno = "i191.jpg";
 800fb58:	4b72      	ldr	r3, [pc, #456]	; (800fd24 <imagesss+0xfd0>)
 800fb5a:	60fb      	str	r3, [r7, #12]
			break;
 800fb5c:	e335      	b.n	80101ca <imagesss+0x1476>
		case 192:
			retorno = "i192.jpg";
 800fb5e:	4b72      	ldr	r3, [pc, #456]	; (800fd28 <imagesss+0xfd4>)
 800fb60:	60fb      	str	r3, [r7, #12]
			break;
 800fb62:	e332      	b.n	80101ca <imagesss+0x1476>
		case 193:
			retorno = "i193.jpg";
 800fb64:	4b71      	ldr	r3, [pc, #452]	; (800fd2c <imagesss+0xfd8>)
 800fb66:	60fb      	str	r3, [r7, #12]
			break;
 800fb68:	e32f      	b.n	80101ca <imagesss+0x1476>
		case 194:
			retorno = "i194.jpg";
 800fb6a:	4b71      	ldr	r3, [pc, #452]	; (800fd30 <imagesss+0xfdc>)
 800fb6c:	60fb      	str	r3, [r7, #12]
			break;
 800fb6e:	e32c      	b.n	80101ca <imagesss+0x1476>
		case 195:
			retorno = "i195.jpg";
 800fb70:	4b70      	ldr	r3, [pc, #448]	; (800fd34 <imagesss+0xfe0>)
 800fb72:	60fb      	str	r3, [r7, #12]
			break;
 800fb74:	e329      	b.n	80101ca <imagesss+0x1476>
		case 196:
			retorno = "i196.jpg";
 800fb76:	4b70      	ldr	r3, [pc, #448]	; (800fd38 <imagesss+0xfe4>)
 800fb78:	60fb      	str	r3, [r7, #12]
			break;
 800fb7a:	e326      	b.n	80101ca <imagesss+0x1476>
		case 197:
			retorno = "i197.jpg";
 800fb7c:	4b6f      	ldr	r3, [pc, #444]	; (800fd3c <imagesss+0xfe8>)
 800fb7e:	60fb      	str	r3, [r7, #12]
			break;
 800fb80:	e323      	b.n	80101ca <imagesss+0x1476>
		case 198:
			retorno = "i198.jpg";
 800fb82:	4b6f      	ldr	r3, [pc, #444]	; (800fd40 <imagesss+0xfec>)
 800fb84:	60fb      	str	r3, [r7, #12]
			break;
 800fb86:	e320      	b.n	80101ca <imagesss+0x1476>
		case 199:
			retorno = "i199.jpg";
 800fb88:	4b6e      	ldr	r3, [pc, #440]	; (800fd44 <imagesss+0xff0>)
 800fb8a:	60fb      	str	r3, [r7, #12]
			break;
 800fb8c:	e31d      	b.n	80101ca <imagesss+0x1476>
		case 200:
			retorno = "i200.jpg";
 800fb8e:	4b6e      	ldr	r3, [pc, #440]	; (800fd48 <imagesss+0xff4>)
 800fb90:	60fb      	str	r3, [r7, #12]
			break;
 800fb92:	e31a      	b.n	80101ca <imagesss+0x1476>
		case 201:
			retorno = "i201.jpg";
 800fb94:	4b6d      	ldr	r3, [pc, #436]	; (800fd4c <imagesss+0xff8>)
 800fb96:	60fb      	str	r3, [r7, #12]
			break;
 800fb98:	e317      	b.n	80101ca <imagesss+0x1476>
		case 202:
			retorno = "i202.jpg";
 800fb9a:	4b6d      	ldr	r3, [pc, #436]	; (800fd50 <imagesss+0xffc>)
 800fb9c:	60fb      	str	r3, [r7, #12]
			break;
 800fb9e:	e314      	b.n	80101ca <imagesss+0x1476>
		case 203:
			retorno = "i203.jpg";
 800fba0:	4b6c      	ldr	r3, [pc, #432]	; (800fd54 <imagesss+0x1000>)
 800fba2:	60fb      	str	r3, [r7, #12]
			break;
 800fba4:	e311      	b.n	80101ca <imagesss+0x1476>
		case 204:
			retorno = "i204.jpg";
 800fba6:	4b6c      	ldr	r3, [pc, #432]	; (800fd58 <imagesss+0x1004>)
 800fba8:	60fb      	str	r3, [r7, #12]
			break;
 800fbaa:	e30e      	b.n	80101ca <imagesss+0x1476>
		case 205:
			retorno = "i205.jpg";
 800fbac:	4b6b      	ldr	r3, [pc, #428]	; (800fd5c <imagesss+0x1008>)
 800fbae:	60fb      	str	r3, [r7, #12]
			break;
 800fbb0:	e30b      	b.n	80101ca <imagesss+0x1476>
		case 206:
			retorno = "i206.jpg";
 800fbb2:	4b6b      	ldr	r3, [pc, #428]	; (800fd60 <imagesss+0x100c>)
 800fbb4:	60fb      	str	r3, [r7, #12]
			break;
 800fbb6:	e308      	b.n	80101ca <imagesss+0x1476>
		case 207:
			retorno = "i207.jpg";
 800fbb8:	4b6a      	ldr	r3, [pc, #424]	; (800fd64 <imagesss+0x1010>)
 800fbba:	60fb      	str	r3, [r7, #12]
			break;
 800fbbc:	e305      	b.n	80101ca <imagesss+0x1476>
		case 208:
			retorno = "i208.jpg";
 800fbbe:	4b6a      	ldr	r3, [pc, #424]	; (800fd68 <imagesss+0x1014>)
 800fbc0:	60fb      	str	r3, [r7, #12]
			break;
 800fbc2:	e302      	b.n	80101ca <imagesss+0x1476>
		case 209:
			retorno = "i209.jpg";
 800fbc4:	4b69      	ldr	r3, [pc, #420]	; (800fd6c <imagesss+0x1018>)
 800fbc6:	60fb      	str	r3, [r7, #12]
			break;
 800fbc8:	e2ff      	b.n	80101ca <imagesss+0x1476>
		case 210:
			retorno = "i210.jpg";
 800fbca:	4b69      	ldr	r3, [pc, #420]	; (800fd70 <imagesss+0x101c>)
 800fbcc:	60fb      	str	r3, [r7, #12]
			break;
 800fbce:	e2fc      	b.n	80101ca <imagesss+0x1476>
		case 211:
			retorno = "i211.jpg";
 800fbd0:	4b68      	ldr	r3, [pc, #416]	; (800fd74 <imagesss+0x1020>)
 800fbd2:	60fb      	str	r3, [r7, #12]
			break;
 800fbd4:	e2f9      	b.n	80101ca <imagesss+0x1476>
		case 212:
			retorno = "i212.jpg";
 800fbd6:	4b68      	ldr	r3, [pc, #416]	; (800fd78 <imagesss+0x1024>)
 800fbd8:	60fb      	str	r3, [r7, #12]
			break;
 800fbda:	e2f6      	b.n	80101ca <imagesss+0x1476>
		case 213:
			retorno = "i213.jpg";
 800fbdc:	4b67      	ldr	r3, [pc, #412]	; (800fd7c <imagesss+0x1028>)
 800fbde:	60fb      	str	r3, [r7, #12]
			break;
 800fbe0:	e2f3      	b.n	80101ca <imagesss+0x1476>
		case 214:
			retorno = "i214.jpg";
 800fbe2:	4b67      	ldr	r3, [pc, #412]	; (800fd80 <imagesss+0x102c>)
 800fbe4:	60fb      	str	r3, [r7, #12]
			break;
 800fbe6:	e2f0      	b.n	80101ca <imagesss+0x1476>
		case 215:
			retorno = "i215.jpg";
 800fbe8:	4b66      	ldr	r3, [pc, #408]	; (800fd84 <imagesss+0x1030>)
 800fbea:	60fb      	str	r3, [r7, #12]
			break;
 800fbec:	e2ed      	b.n	80101ca <imagesss+0x1476>
		case 216:
			retorno = "i216.jpg";
 800fbee:	4b66      	ldr	r3, [pc, #408]	; (800fd88 <imagesss+0x1034>)
 800fbf0:	60fb      	str	r3, [r7, #12]
			break;
 800fbf2:	e2ea      	b.n	80101ca <imagesss+0x1476>
		case 217:
			retorno = "i217.jpg";
 800fbf4:	4b65      	ldr	r3, [pc, #404]	; (800fd8c <imagesss+0x1038>)
 800fbf6:	60fb      	str	r3, [r7, #12]
			break;
 800fbf8:	e2e7      	b.n	80101ca <imagesss+0x1476>
		case 218:
			retorno = "i218.jpg";
 800fbfa:	4b65      	ldr	r3, [pc, #404]	; (800fd90 <imagesss+0x103c>)
 800fbfc:	60fb      	str	r3, [r7, #12]
			break;
 800fbfe:	e2e4      	b.n	80101ca <imagesss+0x1476>
		case 219:
			retorno = "i219.jpg";
 800fc00:	4b64      	ldr	r3, [pc, #400]	; (800fd94 <imagesss+0x1040>)
 800fc02:	60fb      	str	r3, [r7, #12]
			break;
 800fc04:	e2e1      	b.n	80101ca <imagesss+0x1476>
		case 220:
			retorno = "i220.jpg";
 800fc06:	4b64      	ldr	r3, [pc, #400]	; (800fd98 <imagesss+0x1044>)
 800fc08:	60fb      	str	r3, [r7, #12]
			break;
 800fc0a:	e2de      	b.n	80101ca <imagesss+0x1476>
		case 221:
			retorno = "i221.jpg";
 800fc0c:	4b63      	ldr	r3, [pc, #396]	; (800fd9c <imagesss+0x1048>)
 800fc0e:	60fb      	str	r3, [r7, #12]
			break;
 800fc10:	e2db      	b.n	80101ca <imagesss+0x1476>
		case 222:
			retorno = "i222.jpg";
 800fc12:	4b63      	ldr	r3, [pc, #396]	; (800fda0 <imagesss+0x104c>)
 800fc14:	60fb      	str	r3, [r7, #12]
			break;
 800fc16:	e2d8      	b.n	80101ca <imagesss+0x1476>
		case 223:
			retorno = "i223.jpg";
 800fc18:	4b62      	ldr	r3, [pc, #392]	; (800fda4 <imagesss+0x1050>)
 800fc1a:	60fb      	str	r3, [r7, #12]
			break;
 800fc1c:	e2d5      	b.n	80101ca <imagesss+0x1476>
		case 224:
			retorno = "i224.jpg";
 800fc1e:	4b62      	ldr	r3, [pc, #392]	; (800fda8 <imagesss+0x1054>)
 800fc20:	60fb      	str	r3, [r7, #12]
			break;
 800fc22:	e2d2      	b.n	80101ca <imagesss+0x1476>
		case 225:
			retorno = "i225.jpg";
 800fc24:	4b61      	ldr	r3, [pc, #388]	; (800fdac <imagesss+0x1058>)
 800fc26:	60fb      	str	r3, [r7, #12]
			break;
 800fc28:	e2cf      	b.n	80101ca <imagesss+0x1476>
		case 226:
			retorno = "i226.jpg";
 800fc2a:	4b61      	ldr	r3, [pc, #388]	; (800fdb0 <imagesss+0x105c>)
 800fc2c:	60fb      	str	r3, [r7, #12]
			break;
 800fc2e:	e2cc      	b.n	80101ca <imagesss+0x1476>
		case 227:
			retorno = "i227.jpg";
 800fc30:	4b60      	ldr	r3, [pc, #384]	; (800fdb4 <imagesss+0x1060>)
 800fc32:	60fb      	str	r3, [r7, #12]
			break;
 800fc34:	e2c9      	b.n	80101ca <imagesss+0x1476>
		case 228:
			retorno = "i228.jpg";
 800fc36:	4b60      	ldr	r3, [pc, #384]	; (800fdb8 <imagesss+0x1064>)
 800fc38:	60fb      	str	r3, [r7, #12]
			break;
 800fc3a:	e2c6      	b.n	80101ca <imagesss+0x1476>
		case 229:
			retorno = "i229.jpg";
 800fc3c:	4b5f      	ldr	r3, [pc, #380]	; (800fdbc <imagesss+0x1068>)
 800fc3e:	60fb      	str	r3, [r7, #12]
			break;
 800fc40:	e2c3      	b.n	80101ca <imagesss+0x1476>
		case 230:
			retorno = "i230.jpg";
 800fc42:	4b5f      	ldr	r3, [pc, #380]	; (800fdc0 <imagesss+0x106c>)
 800fc44:	60fb      	str	r3, [r7, #12]
			break;
 800fc46:	e2c0      	b.n	80101ca <imagesss+0x1476>
		case 231:
			retorno = "i231.jpg";
 800fc48:	4b5e      	ldr	r3, [pc, #376]	; (800fdc4 <imagesss+0x1070>)
 800fc4a:	60fb      	str	r3, [r7, #12]
			break;
 800fc4c:	e2bd      	b.n	80101ca <imagesss+0x1476>
		case 232:
			retorno = "i232.jpg";
 800fc4e:	4b5e      	ldr	r3, [pc, #376]	; (800fdc8 <imagesss+0x1074>)
 800fc50:	60fb      	str	r3, [r7, #12]
			break;
 800fc52:	e2ba      	b.n	80101ca <imagesss+0x1476>
		case 233:
			retorno = "i233.jpg";
 800fc54:	4b5d      	ldr	r3, [pc, #372]	; (800fdcc <imagesss+0x1078>)
 800fc56:	60fb      	str	r3, [r7, #12]
			break;
 800fc58:	e2b7      	b.n	80101ca <imagesss+0x1476>
		case 234:
			retorno = "i234.jpg";
 800fc5a:	4b5d      	ldr	r3, [pc, #372]	; (800fdd0 <imagesss+0x107c>)
 800fc5c:	60fb      	str	r3, [r7, #12]
			break;
 800fc5e:	e2b4      	b.n	80101ca <imagesss+0x1476>
		case 235:
			retorno = "i235.jpg";
 800fc60:	4b5c      	ldr	r3, [pc, #368]	; (800fdd4 <imagesss+0x1080>)
 800fc62:	60fb      	str	r3, [r7, #12]
			break;
 800fc64:	e2b1      	b.n	80101ca <imagesss+0x1476>
		case 236:
			retorno = "i236.jpg";
 800fc66:	4b5c      	ldr	r3, [pc, #368]	; (800fdd8 <imagesss+0x1084>)
 800fc68:	60fb      	str	r3, [r7, #12]
			break;
 800fc6a:	e2ae      	b.n	80101ca <imagesss+0x1476>
		case 237:
			retorno = "i237.jpg";
 800fc6c:	4b5b      	ldr	r3, [pc, #364]	; (800fddc <imagesss+0x1088>)
 800fc6e:	60fb      	str	r3, [r7, #12]
			break;
 800fc70:	e2ab      	b.n	80101ca <imagesss+0x1476>
		case 238:
			retorno = "i238.jpg";
 800fc72:	4b5b      	ldr	r3, [pc, #364]	; (800fde0 <imagesss+0x108c>)
 800fc74:	60fb      	str	r3, [r7, #12]
			break;
 800fc76:	e2a8      	b.n	80101ca <imagesss+0x1476>
		case 239:
			retorno = "i239.jpg";
 800fc78:	4b5a      	ldr	r3, [pc, #360]	; (800fde4 <imagesss+0x1090>)
 800fc7a:	60fb      	str	r3, [r7, #12]
			break;
 800fc7c:	e2a5      	b.n	80101ca <imagesss+0x1476>
		case 240:
			retorno = "i240.jpg";
 800fc7e:	4b5a      	ldr	r3, [pc, #360]	; (800fde8 <imagesss+0x1094>)
 800fc80:	60fb      	str	r3, [r7, #12]
			break;
 800fc82:	e2a2      	b.n	80101ca <imagesss+0x1476>
		case 241:
			retorno = "i241.jpg";
 800fc84:	4b59      	ldr	r3, [pc, #356]	; (800fdec <imagesss+0x1098>)
 800fc86:	60fb      	str	r3, [r7, #12]
			break;
 800fc88:	e29f      	b.n	80101ca <imagesss+0x1476>
		case 242:
			retorno = "i242.jpg";
 800fc8a:	4b59      	ldr	r3, [pc, #356]	; (800fdf0 <imagesss+0x109c>)
 800fc8c:	60fb      	str	r3, [r7, #12]
			break;
 800fc8e:	e29c      	b.n	80101ca <imagesss+0x1476>
		case 243:
			retorno = "i243.jpg";
 800fc90:	4b58      	ldr	r3, [pc, #352]	; (800fdf4 <imagesss+0x10a0>)
 800fc92:	60fb      	str	r3, [r7, #12]
			break;
 800fc94:	e299      	b.n	80101ca <imagesss+0x1476>
		case 244:
			retorno = "i244.jpg";
 800fc96:	4b58      	ldr	r3, [pc, #352]	; (800fdf8 <imagesss+0x10a4>)
 800fc98:	60fb      	str	r3, [r7, #12]
			break;
 800fc9a:	e296      	b.n	80101ca <imagesss+0x1476>
		case 245:
			retorno = "i245.jpg";
 800fc9c:	4b57      	ldr	r3, [pc, #348]	; (800fdfc <imagesss+0x10a8>)
 800fc9e:	60fb      	str	r3, [r7, #12]
			break;
 800fca0:	e293      	b.n	80101ca <imagesss+0x1476>
		case 246:
			retorno = "i246.jpg";
 800fca2:	4b57      	ldr	r3, [pc, #348]	; (800fe00 <imagesss+0x10ac>)
 800fca4:	60fb      	str	r3, [r7, #12]
			break;
 800fca6:	e290      	b.n	80101ca <imagesss+0x1476>
		case 247:
			retorno = "i247.jpg";
 800fca8:	4b56      	ldr	r3, [pc, #344]	; (800fe04 <imagesss+0x10b0>)
 800fcaa:	60fb      	str	r3, [r7, #12]
			break;
 800fcac:	e28d      	b.n	80101ca <imagesss+0x1476>
		case 248:
			retorno = "i248.jpg";
 800fcae:	4b56      	ldr	r3, [pc, #344]	; (800fe08 <imagesss+0x10b4>)
 800fcb0:	60fb      	str	r3, [r7, #12]
			break;
 800fcb2:	e28a      	b.n	80101ca <imagesss+0x1476>
		case 249:
			retorno = "i249.jpg";
 800fcb4:	4b55      	ldr	r3, [pc, #340]	; (800fe0c <imagesss+0x10b8>)
 800fcb6:	60fb      	str	r3, [r7, #12]
			break;
 800fcb8:	e287      	b.n	80101ca <imagesss+0x1476>
		case 250:
			retorno = "i250.jpg";
 800fcba:	4b55      	ldr	r3, [pc, #340]	; (800fe10 <imagesss+0x10bc>)
 800fcbc:	60fb      	str	r3, [r7, #12]
			break;
 800fcbe:	e284      	b.n	80101ca <imagesss+0x1476>
		case 251:
			retorno = "i251.jpg";
 800fcc0:	4b54      	ldr	r3, [pc, #336]	; (800fe14 <imagesss+0x10c0>)
 800fcc2:	60fb      	str	r3, [r7, #12]
			break;
 800fcc4:	e281      	b.n	80101ca <imagesss+0x1476>
		case 252:
			retorno = "i252.jpg";
 800fcc6:	4b54      	ldr	r3, [pc, #336]	; (800fe18 <imagesss+0x10c4>)
 800fcc8:	60fb      	str	r3, [r7, #12]
			break;
 800fcca:	e27e      	b.n	80101ca <imagesss+0x1476>
 800fccc:	08011f90 	.word	0x08011f90
 800fcd0:	08011f9c 	.word	0x08011f9c
 800fcd4:	08011fa8 	.word	0x08011fa8
 800fcd8:	08011fb4 	.word	0x08011fb4
 800fcdc:	08011fc0 	.word	0x08011fc0
 800fce0:	08011fcc 	.word	0x08011fcc
 800fce4:	08011fd8 	.word	0x08011fd8
 800fce8:	08011fe4 	.word	0x08011fe4
 800fcec:	08011ff0 	.word	0x08011ff0
 800fcf0:	08011ffc 	.word	0x08011ffc
 800fcf4:	08012008 	.word	0x08012008
 800fcf8:	08012014 	.word	0x08012014
 800fcfc:	08012020 	.word	0x08012020
 800fd00:	0801202c 	.word	0x0801202c
 800fd04:	08012038 	.word	0x08012038
 800fd08:	08012044 	.word	0x08012044
 800fd0c:	08012050 	.word	0x08012050
 800fd10:	0801205c 	.word	0x0801205c
 800fd14:	08012068 	.word	0x08012068
 800fd18:	08012074 	.word	0x08012074
 800fd1c:	08012080 	.word	0x08012080
 800fd20:	0801208c 	.word	0x0801208c
 800fd24:	08012098 	.word	0x08012098
 800fd28:	080120a4 	.word	0x080120a4
 800fd2c:	080120b0 	.word	0x080120b0
 800fd30:	080120bc 	.word	0x080120bc
 800fd34:	080120c8 	.word	0x080120c8
 800fd38:	080120d4 	.word	0x080120d4
 800fd3c:	080120e0 	.word	0x080120e0
 800fd40:	080120ec 	.word	0x080120ec
 800fd44:	080120f8 	.word	0x080120f8
 800fd48:	08012104 	.word	0x08012104
 800fd4c:	08012110 	.word	0x08012110
 800fd50:	0801211c 	.word	0x0801211c
 800fd54:	08012128 	.word	0x08012128
 800fd58:	08012134 	.word	0x08012134
 800fd5c:	08012140 	.word	0x08012140
 800fd60:	0801214c 	.word	0x0801214c
 800fd64:	08012158 	.word	0x08012158
 800fd68:	08012164 	.word	0x08012164
 800fd6c:	08012170 	.word	0x08012170
 800fd70:	0801217c 	.word	0x0801217c
 800fd74:	08012188 	.word	0x08012188
 800fd78:	08012194 	.word	0x08012194
 800fd7c:	080121a0 	.word	0x080121a0
 800fd80:	080121ac 	.word	0x080121ac
 800fd84:	080121b8 	.word	0x080121b8
 800fd88:	080121c4 	.word	0x080121c4
 800fd8c:	080121d0 	.word	0x080121d0
 800fd90:	080121dc 	.word	0x080121dc
 800fd94:	080121e8 	.word	0x080121e8
 800fd98:	080121f4 	.word	0x080121f4
 800fd9c:	08012200 	.word	0x08012200
 800fda0:	0801220c 	.word	0x0801220c
 800fda4:	08012218 	.word	0x08012218
 800fda8:	08012224 	.word	0x08012224
 800fdac:	08012230 	.word	0x08012230
 800fdb0:	0801223c 	.word	0x0801223c
 800fdb4:	08012248 	.word	0x08012248
 800fdb8:	08012254 	.word	0x08012254
 800fdbc:	08012260 	.word	0x08012260
 800fdc0:	0801226c 	.word	0x0801226c
 800fdc4:	08012278 	.word	0x08012278
 800fdc8:	08012284 	.word	0x08012284
 800fdcc:	08012290 	.word	0x08012290
 800fdd0:	0801229c 	.word	0x0801229c
 800fdd4:	080122a8 	.word	0x080122a8
 800fdd8:	080122b4 	.word	0x080122b4
 800fddc:	080122c0 	.word	0x080122c0
 800fde0:	080122cc 	.word	0x080122cc
 800fde4:	080122d8 	.word	0x080122d8
 800fde8:	080122e4 	.word	0x080122e4
 800fdec:	080122f0 	.word	0x080122f0
 800fdf0:	080122fc 	.word	0x080122fc
 800fdf4:	08012308 	.word	0x08012308
 800fdf8:	08012314 	.word	0x08012314
 800fdfc:	08012320 	.word	0x08012320
 800fe00:	0801232c 	.word	0x0801232c
 800fe04:	08012338 	.word	0x08012338
 800fe08:	08012344 	.word	0x08012344
 800fe0c:	08012350 	.word	0x08012350
 800fe10:	0801235c 	.word	0x0801235c
 800fe14:	08012368 	.word	0x08012368
 800fe18:	08012374 	.word	0x08012374
		case 253:
			retorno = "i253.jpg";
 800fe1c:	4b7d      	ldr	r3, [pc, #500]	; (8010014 <imagesss+0x12c0>)
 800fe1e:	60fb      	str	r3, [r7, #12]
			break;
 800fe20:	e1d3      	b.n	80101ca <imagesss+0x1476>
		case 254:
			retorno = "i254.jpg";
 800fe22:	4b7d      	ldr	r3, [pc, #500]	; (8010018 <imagesss+0x12c4>)
 800fe24:	60fb      	str	r3, [r7, #12]
			break;
 800fe26:	e1d0      	b.n	80101ca <imagesss+0x1476>
		case 255:
			retorno = "i255.jpg";
 800fe28:	4b7c      	ldr	r3, [pc, #496]	; (801001c <imagesss+0x12c8>)
 800fe2a:	60fb      	str	r3, [r7, #12]
			break;
 800fe2c:	e1cd      	b.n	80101ca <imagesss+0x1476>
		case 256:
			retorno = "i256.jpg";
 800fe2e:	4b7c      	ldr	r3, [pc, #496]	; (8010020 <imagesss+0x12cc>)
 800fe30:	60fb      	str	r3, [r7, #12]
			break;
 800fe32:	e1ca      	b.n	80101ca <imagesss+0x1476>
		case 257:
			retorno = "i257.jpg";
 800fe34:	4b7b      	ldr	r3, [pc, #492]	; (8010024 <imagesss+0x12d0>)
 800fe36:	60fb      	str	r3, [r7, #12]
			break;
 800fe38:	e1c7      	b.n	80101ca <imagesss+0x1476>
		case 258:
			retorno = "i258.jpg";
 800fe3a:	4b7b      	ldr	r3, [pc, #492]	; (8010028 <imagesss+0x12d4>)
 800fe3c:	60fb      	str	r3, [r7, #12]
			break;
 800fe3e:	e1c4      	b.n	80101ca <imagesss+0x1476>
		case 259:
			retorno = "i259.jpg";
 800fe40:	4b7a      	ldr	r3, [pc, #488]	; (801002c <imagesss+0x12d8>)
 800fe42:	60fb      	str	r3, [r7, #12]
			break;
 800fe44:	e1c1      	b.n	80101ca <imagesss+0x1476>
		case 260:
			retorno = "i260.jpg";
 800fe46:	4b7a      	ldr	r3, [pc, #488]	; (8010030 <imagesss+0x12dc>)
 800fe48:	60fb      	str	r3, [r7, #12]
			break;
 800fe4a:	e1be      	b.n	80101ca <imagesss+0x1476>
		case 261:
			retorno = "i261.jpg";
 800fe4c:	4b79      	ldr	r3, [pc, #484]	; (8010034 <imagesss+0x12e0>)
 800fe4e:	60fb      	str	r3, [r7, #12]
			break;
 800fe50:	e1bb      	b.n	80101ca <imagesss+0x1476>
		case 262:
			retorno = "i262.jpg";
 800fe52:	4b79      	ldr	r3, [pc, #484]	; (8010038 <imagesss+0x12e4>)
 800fe54:	60fb      	str	r3, [r7, #12]
			break;
 800fe56:	e1b8      	b.n	80101ca <imagesss+0x1476>
		case 263:
			retorno = "i263.jpg";
 800fe58:	4b78      	ldr	r3, [pc, #480]	; (801003c <imagesss+0x12e8>)
 800fe5a:	60fb      	str	r3, [r7, #12]
			break;
 800fe5c:	e1b5      	b.n	80101ca <imagesss+0x1476>
		case 264:
			retorno = "i264.jpg";
 800fe5e:	4b78      	ldr	r3, [pc, #480]	; (8010040 <imagesss+0x12ec>)
 800fe60:	60fb      	str	r3, [r7, #12]
			break;
 800fe62:	e1b2      	b.n	80101ca <imagesss+0x1476>
		case 265:
			retorno = "i265.jpg";
 800fe64:	4b77      	ldr	r3, [pc, #476]	; (8010044 <imagesss+0x12f0>)
 800fe66:	60fb      	str	r3, [r7, #12]
			break;
 800fe68:	e1af      	b.n	80101ca <imagesss+0x1476>
		case 266:
			retorno = "i266.jpg";
 800fe6a:	4b77      	ldr	r3, [pc, #476]	; (8010048 <imagesss+0x12f4>)
 800fe6c:	60fb      	str	r3, [r7, #12]
			break;
 800fe6e:	e1ac      	b.n	80101ca <imagesss+0x1476>
		case 267:
			retorno = "i267.jpg";
 800fe70:	4b76      	ldr	r3, [pc, #472]	; (801004c <imagesss+0x12f8>)
 800fe72:	60fb      	str	r3, [r7, #12]
			break;
 800fe74:	e1a9      	b.n	80101ca <imagesss+0x1476>
		case 268:
			retorno = "i268.jpg";
 800fe76:	4b76      	ldr	r3, [pc, #472]	; (8010050 <imagesss+0x12fc>)
 800fe78:	60fb      	str	r3, [r7, #12]
			break;
 800fe7a:	e1a6      	b.n	80101ca <imagesss+0x1476>
		case 269:
			retorno = "i269.jpg";
 800fe7c:	4b75      	ldr	r3, [pc, #468]	; (8010054 <imagesss+0x1300>)
 800fe7e:	60fb      	str	r3, [r7, #12]
			break;
 800fe80:	e1a3      	b.n	80101ca <imagesss+0x1476>
		case 270:
			retorno = "i270.jpg";
 800fe82:	4b75      	ldr	r3, [pc, #468]	; (8010058 <imagesss+0x1304>)
 800fe84:	60fb      	str	r3, [r7, #12]
			break;
 800fe86:	e1a0      	b.n	80101ca <imagesss+0x1476>
		case 271:
			retorno = "i271.jpg";
 800fe88:	4b74      	ldr	r3, [pc, #464]	; (801005c <imagesss+0x1308>)
 800fe8a:	60fb      	str	r3, [r7, #12]
			break;
 800fe8c:	e19d      	b.n	80101ca <imagesss+0x1476>
		case 272:
			retorno = "i272.jpg";
 800fe8e:	4b74      	ldr	r3, [pc, #464]	; (8010060 <imagesss+0x130c>)
 800fe90:	60fb      	str	r3, [r7, #12]
			break;
 800fe92:	e19a      	b.n	80101ca <imagesss+0x1476>
		case 273:
			retorno = "i273.jpg";
 800fe94:	4b73      	ldr	r3, [pc, #460]	; (8010064 <imagesss+0x1310>)
 800fe96:	60fb      	str	r3, [r7, #12]
			break;
 800fe98:	e197      	b.n	80101ca <imagesss+0x1476>
		case 274:
			retorno = "i274.jpg";
 800fe9a:	4b73      	ldr	r3, [pc, #460]	; (8010068 <imagesss+0x1314>)
 800fe9c:	60fb      	str	r3, [r7, #12]
			break;
 800fe9e:	e194      	b.n	80101ca <imagesss+0x1476>
		case 275:
			retorno = "i275.jpg";
 800fea0:	4b72      	ldr	r3, [pc, #456]	; (801006c <imagesss+0x1318>)
 800fea2:	60fb      	str	r3, [r7, #12]
			break;
 800fea4:	e191      	b.n	80101ca <imagesss+0x1476>
		case 276:
			retorno = "i276.jpg";
 800fea6:	4b72      	ldr	r3, [pc, #456]	; (8010070 <imagesss+0x131c>)
 800fea8:	60fb      	str	r3, [r7, #12]
			break;
 800feaa:	e18e      	b.n	80101ca <imagesss+0x1476>
		case 277:
			retorno = "i277.jpg";
 800feac:	4b71      	ldr	r3, [pc, #452]	; (8010074 <imagesss+0x1320>)
 800feae:	60fb      	str	r3, [r7, #12]
			break;
 800feb0:	e18b      	b.n	80101ca <imagesss+0x1476>
		case 278:
			retorno = "i278.jpg";
 800feb2:	4b71      	ldr	r3, [pc, #452]	; (8010078 <imagesss+0x1324>)
 800feb4:	60fb      	str	r3, [r7, #12]
			break;
 800feb6:	e188      	b.n	80101ca <imagesss+0x1476>
		case 279:
			retorno = "i279.jpg";
 800feb8:	4b70      	ldr	r3, [pc, #448]	; (801007c <imagesss+0x1328>)
 800feba:	60fb      	str	r3, [r7, #12]
			break;
 800febc:	e185      	b.n	80101ca <imagesss+0x1476>
		case 280:
			retorno = "i280.jpg";
 800febe:	4b70      	ldr	r3, [pc, #448]	; (8010080 <imagesss+0x132c>)
 800fec0:	60fb      	str	r3, [r7, #12]
			break;
 800fec2:	e182      	b.n	80101ca <imagesss+0x1476>
		case 281:
			retorno = "i281.jpg";
 800fec4:	4b6f      	ldr	r3, [pc, #444]	; (8010084 <imagesss+0x1330>)
 800fec6:	60fb      	str	r3, [r7, #12]
			break;
 800fec8:	e17f      	b.n	80101ca <imagesss+0x1476>
		case 282:
			retorno = "i282.jpg";
 800feca:	4b6f      	ldr	r3, [pc, #444]	; (8010088 <imagesss+0x1334>)
 800fecc:	60fb      	str	r3, [r7, #12]
			break;
 800fece:	e17c      	b.n	80101ca <imagesss+0x1476>
		case 283:
			retorno = "i283.jpg";
 800fed0:	4b6e      	ldr	r3, [pc, #440]	; (801008c <imagesss+0x1338>)
 800fed2:	60fb      	str	r3, [r7, #12]
			break;
 800fed4:	e179      	b.n	80101ca <imagesss+0x1476>
		case 284:
			retorno = "i284.jpg";
 800fed6:	4b6e      	ldr	r3, [pc, #440]	; (8010090 <imagesss+0x133c>)
 800fed8:	60fb      	str	r3, [r7, #12]
			break;
 800feda:	e176      	b.n	80101ca <imagesss+0x1476>
		case 285:
			retorno = "i285.jpg";
 800fedc:	4b6d      	ldr	r3, [pc, #436]	; (8010094 <imagesss+0x1340>)
 800fede:	60fb      	str	r3, [r7, #12]
			break;
 800fee0:	e173      	b.n	80101ca <imagesss+0x1476>
		case 286:
			retorno = "i286.jpg";
 800fee2:	4b6d      	ldr	r3, [pc, #436]	; (8010098 <imagesss+0x1344>)
 800fee4:	60fb      	str	r3, [r7, #12]
			break;
 800fee6:	e170      	b.n	80101ca <imagesss+0x1476>
		case 287:
			retorno = "i287.jpg";
 800fee8:	4b6c      	ldr	r3, [pc, #432]	; (801009c <imagesss+0x1348>)
 800feea:	60fb      	str	r3, [r7, #12]
			break;
 800feec:	e16d      	b.n	80101ca <imagesss+0x1476>
		case 288:
			retorno = "i288.jpg";
 800feee:	4b6c      	ldr	r3, [pc, #432]	; (80100a0 <imagesss+0x134c>)
 800fef0:	60fb      	str	r3, [r7, #12]
			break;
 800fef2:	e16a      	b.n	80101ca <imagesss+0x1476>
		case 289:
			retorno = "i289.jpg";
 800fef4:	4b6b      	ldr	r3, [pc, #428]	; (80100a4 <imagesss+0x1350>)
 800fef6:	60fb      	str	r3, [r7, #12]
			break;
 800fef8:	e167      	b.n	80101ca <imagesss+0x1476>
		case 290:
			retorno = "i290.jpg";
 800fefa:	4b6b      	ldr	r3, [pc, #428]	; (80100a8 <imagesss+0x1354>)
 800fefc:	60fb      	str	r3, [r7, #12]
			break;
 800fefe:	e164      	b.n	80101ca <imagesss+0x1476>
		case 291:
			retorno = "i291.jpg";
 800ff00:	4b6a      	ldr	r3, [pc, #424]	; (80100ac <imagesss+0x1358>)
 800ff02:	60fb      	str	r3, [r7, #12]
			break;
 800ff04:	e161      	b.n	80101ca <imagesss+0x1476>
		case 292:
			retorno = "i292.jpg";
 800ff06:	4b6a      	ldr	r3, [pc, #424]	; (80100b0 <imagesss+0x135c>)
 800ff08:	60fb      	str	r3, [r7, #12]
			break;
 800ff0a:	e15e      	b.n	80101ca <imagesss+0x1476>
		case 293:
			retorno = "i293.jpg";
 800ff0c:	4b69      	ldr	r3, [pc, #420]	; (80100b4 <imagesss+0x1360>)
 800ff0e:	60fb      	str	r3, [r7, #12]
			break;
 800ff10:	e15b      	b.n	80101ca <imagesss+0x1476>
		case 294:
			retorno = "i294.jpg";
 800ff12:	4b69      	ldr	r3, [pc, #420]	; (80100b8 <imagesss+0x1364>)
 800ff14:	60fb      	str	r3, [r7, #12]
			break;
 800ff16:	e158      	b.n	80101ca <imagesss+0x1476>
		case 295:
			retorno = "i295.jpg";
 800ff18:	4b68      	ldr	r3, [pc, #416]	; (80100bc <imagesss+0x1368>)
 800ff1a:	60fb      	str	r3, [r7, #12]
			break;
 800ff1c:	e155      	b.n	80101ca <imagesss+0x1476>
		case 296:
			retorno = "i296.jpg";
 800ff1e:	4b68      	ldr	r3, [pc, #416]	; (80100c0 <imagesss+0x136c>)
 800ff20:	60fb      	str	r3, [r7, #12]
			break;
 800ff22:	e152      	b.n	80101ca <imagesss+0x1476>
		case 297:
			retorno = "i297.jpg";
 800ff24:	4b67      	ldr	r3, [pc, #412]	; (80100c4 <imagesss+0x1370>)
 800ff26:	60fb      	str	r3, [r7, #12]
			break;
 800ff28:	e14f      	b.n	80101ca <imagesss+0x1476>
		case 298:
			retorno = "i298.jpg";
 800ff2a:	4b67      	ldr	r3, [pc, #412]	; (80100c8 <imagesss+0x1374>)
 800ff2c:	60fb      	str	r3, [r7, #12]
			break;
 800ff2e:	e14c      	b.n	80101ca <imagesss+0x1476>
		case 299:
			retorno = "i299.jpg";
 800ff30:	4b66      	ldr	r3, [pc, #408]	; (80100cc <imagesss+0x1378>)
 800ff32:	60fb      	str	r3, [r7, #12]
			break;
 800ff34:	e149      	b.n	80101ca <imagesss+0x1476>
		case 300:
			retorno = "i300.jpg";
 800ff36:	4b66      	ldr	r3, [pc, #408]	; (80100d0 <imagesss+0x137c>)
 800ff38:	60fb      	str	r3, [r7, #12]
			break;
 800ff3a:	e146      	b.n	80101ca <imagesss+0x1476>
		case 301:
			retorno = "i301.jpg";
 800ff3c:	4b65      	ldr	r3, [pc, #404]	; (80100d4 <imagesss+0x1380>)
 800ff3e:	60fb      	str	r3, [r7, #12]
			break;
 800ff40:	e143      	b.n	80101ca <imagesss+0x1476>
		case 302:
			retorno = "i302.jpg";
 800ff42:	4b65      	ldr	r3, [pc, #404]	; (80100d8 <imagesss+0x1384>)
 800ff44:	60fb      	str	r3, [r7, #12]
			break;
 800ff46:	e140      	b.n	80101ca <imagesss+0x1476>
		case 303:
			retorno = "i303.jpg";
 800ff48:	4b64      	ldr	r3, [pc, #400]	; (80100dc <imagesss+0x1388>)
 800ff4a:	60fb      	str	r3, [r7, #12]
			break;
 800ff4c:	e13d      	b.n	80101ca <imagesss+0x1476>
		case 304:
			retorno = "i304.jpg";
 800ff4e:	4b64      	ldr	r3, [pc, #400]	; (80100e0 <imagesss+0x138c>)
 800ff50:	60fb      	str	r3, [r7, #12]
			break;
 800ff52:	e13a      	b.n	80101ca <imagesss+0x1476>
		case 305:
			retorno = "i305.jpg";
 800ff54:	4b63      	ldr	r3, [pc, #396]	; (80100e4 <imagesss+0x1390>)
 800ff56:	60fb      	str	r3, [r7, #12]
			break;
 800ff58:	e137      	b.n	80101ca <imagesss+0x1476>
		case 306:
			retorno = "i306.jpg";
 800ff5a:	4b63      	ldr	r3, [pc, #396]	; (80100e8 <imagesss+0x1394>)
 800ff5c:	60fb      	str	r3, [r7, #12]
			break;
 800ff5e:	e134      	b.n	80101ca <imagesss+0x1476>
		case 307:
			retorno = "i307.jpg";
 800ff60:	4b62      	ldr	r3, [pc, #392]	; (80100ec <imagesss+0x1398>)
 800ff62:	60fb      	str	r3, [r7, #12]
			break;
 800ff64:	e131      	b.n	80101ca <imagesss+0x1476>
		case 308:
			retorno = "i308.jpg";
 800ff66:	4b62      	ldr	r3, [pc, #392]	; (80100f0 <imagesss+0x139c>)
 800ff68:	60fb      	str	r3, [r7, #12]
			break;
 800ff6a:	e12e      	b.n	80101ca <imagesss+0x1476>
		case 309:
			retorno = "i309.jpg";
 800ff6c:	4b61      	ldr	r3, [pc, #388]	; (80100f4 <imagesss+0x13a0>)
 800ff6e:	60fb      	str	r3, [r7, #12]
			break;
 800ff70:	e12b      	b.n	80101ca <imagesss+0x1476>
		case 310:
			retorno = "i310.jpg";
 800ff72:	4b61      	ldr	r3, [pc, #388]	; (80100f8 <imagesss+0x13a4>)
 800ff74:	60fb      	str	r3, [r7, #12]
			break;
 800ff76:	e128      	b.n	80101ca <imagesss+0x1476>
		case 311:
			retorno = "i311.jpg";
 800ff78:	4b60      	ldr	r3, [pc, #384]	; (80100fc <imagesss+0x13a8>)
 800ff7a:	60fb      	str	r3, [r7, #12]
			break;
 800ff7c:	e125      	b.n	80101ca <imagesss+0x1476>
		case 312:
			retorno = "i312.jpg";
 800ff7e:	4b60      	ldr	r3, [pc, #384]	; (8010100 <imagesss+0x13ac>)
 800ff80:	60fb      	str	r3, [r7, #12]
			break;
 800ff82:	e122      	b.n	80101ca <imagesss+0x1476>
		case 313:
			retorno = "i313.jpg";
 800ff84:	4b5f      	ldr	r3, [pc, #380]	; (8010104 <imagesss+0x13b0>)
 800ff86:	60fb      	str	r3, [r7, #12]
			break;
 800ff88:	e11f      	b.n	80101ca <imagesss+0x1476>
		case 314:
			retorno = "i314.jpg";
 800ff8a:	4b5f      	ldr	r3, [pc, #380]	; (8010108 <imagesss+0x13b4>)
 800ff8c:	60fb      	str	r3, [r7, #12]
			break;
 800ff8e:	e11c      	b.n	80101ca <imagesss+0x1476>
		case 315:
			retorno = "i315.jpg";
 800ff90:	4b5e      	ldr	r3, [pc, #376]	; (801010c <imagesss+0x13b8>)
 800ff92:	60fb      	str	r3, [r7, #12]
			break;
 800ff94:	e119      	b.n	80101ca <imagesss+0x1476>
		case 316:
			retorno = "i316.jpg";
 800ff96:	4b5e      	ldr	r3, [pc, #376]	; (8010110 <imagesss+0x13bc>)
 800ff98:	60fb      	str	r3, [r7, #12]
			break;
 800ff9a:	e116      	b.n	80101ca <imagesss+0x1476>
		case 317:
			retorno = "i317.jpg";
 800ff9c:	4b5d      	ldr	r3, [pc, #372]	; (8010114 <imagesss+0x13c0>)
 800ff9e:	60fb      	str	r3, [r7, #12]
			break;
 800ffa0:	e113      	b.n	80101ca <imagesss+0x1476>
		case 318:
			retorno = "i318.jpg";
 800ffa2:	4b5d      	ldr	r3, [pc, #372]	; (8010118 <imagesss+0x13c4>)
 800ffa4:	60fb      	str	r3, [r7, #12]
			break;
 800ffa6:	e110      	b.n	80101ca <imagesss+0x1476>
		case 319:
			retorno = "i319.jpg";
 800ffa8:	4b5c      	ldr	r3, [pc, #368]	; (801011c <imagesss+0x13c8>)
 800ffaa:	60fb      	str	r3, [r7, #12]
			break;
 800ffac:	e10d      	b.n	80101ca <imagesss+0x1476>
		case 320:
			retorno = "i320.jpg";
 800ffae:	4b5c      	ldr	r3, [pc, #368]	; (8010120 <imagesss+0x13cc>)
 800ffb0:	60fb      	str	r3, [r7, #12]
			break;
 800ffb2:	e10a      	b.n	80101ca <imagesss+0x1476>
		case 321:
			retorno = "i321.jpg";
 800ffb4:	4b5b      	ldr	r3, [pc, #364]	; (8010124 <imagesss+0x13d0>)
 800ffb6:	60fb      	str	r3, [r7, #12]
			break;
 800ffb8:	e107      	b.n	80101ca <imagesss+0x1476>
		case 322:
			retorno = "i322.jpg";
 800ffba:	4b5b      	ldr	r3, [pc, #364]	; (8010128 <imagesss+0x13d4>)
 800ffbc:	60fb      	str	r3, [r7, #12]
			break;
 800ffbe:	e104      	b.n	80101ca <imagesss+0x1476>
		case 323:
			retorno = "i323.jpg";
 800ffc0:	4b5a      	ldr	r3, [pc, #360]	; (801012c <imagesss+0x13d8>)
 800ffc2:	60fb      	str	r3, [r7, #12]
			break;
 800ffc4:	e101      	b.n	80101ca <imagesss+0x1476>
		case 324:
			retorno = "i324.jpg";
 800ffc6:	4b5a      	ldr	r3, [pc, #360]	; (8010130 <imagesss+0x13dc>)
 800ffc8:	60fb      	str	r3, [r7, #12]
			break;
 800ffca:	e0fe      	b.n	80101ca <imagesss+0x1476>
		case 325:
			retorno = "i325.jpg";
 800ffcc:	4b59      	ldr	r3, [pc, #356]	; (8010134 <imagesss+0x13e0>)
 800ffce:	60fb      	str	r3, [r7, #12]
			break;
 800ffd0:	e0fb      	b.n	80101ca <imagesss+0x1476>
		case 326:
			retorno = "i326.jpg";
 800ffd2:	4b59      	ldr	r3, [pc, #356]	; (8010138 <imagesss+0x13e4>)
 800ffd4:	60fb      	str	r3, [r7, #12]
			break;
 800ffd6:	e0f8      	b.n	80101ca <imagesss+0x1476>
		case 327:
			retorno = "i327.jpg";
 800ffd8:	4b58      	ldr	r3, [pc, #352]	; (801013c <imagesss+0x13e8>)
 800ffda:	60fb      	str	r3, [r7, #12]
			break;
 800ffdc:	e0f5      	b.n	80101ca <imagesss+0x1476>
		case 328:
			retorno = "i328.jpg";
 800ffde:	4b58      	ldr	r3, [pc, #352]	; (8010140 <imagesss+0x13ec>)
 800ffe0:	60fb      	str	r3, [r7, #12]
			break;
 800ffe2:	e0f2      	b.n	80101ca <imagesss+0x1476>
		case 329:
			retorno = "i329.jpg";
 800ffe4:	4b57      	ldr	r3, [pc, #348]	; (8010144 <imagesss+0x13f0>)
 800ffe6:	60fb      	str	r3, [r7, #12]
			break;
 800ffe8:	e0ef      	b.n	80101ca <imagesss+0x1476>
		case 330:
			retorno = "i330.jpg";
 800ffea:	4b57      	ldr	r3, [pc, #348]	; (8010148 <imagesss+0x13f4>)
 800ffec:	60fb      	str	r3, [r7, #12]
			break;
 800ffee:	e0ec      	b.n	80101ca <imagesss+0x1476>
		case 331:
			retorno = "i331.jpg";
 800fff0:	4b56      	ldr	r3, [pc, #344]	; (801014c <imagesss+0x13f8>)
 800fff2:	60fb      	str	r3, [r7, #12]
			break;
 800fff4:	e0e9      	b.n	80101ca <imagesss+0x1476>
		case 332:
			retorno = "i332.jpg";
 800fff6:	4b56      	ldr	r3, [pc, #344]	; (8010150 <imagesss+0x13fc>)
 800fff8:	60fb      	str	r3, [r7, #12]
			break;
 800fffa:	e0e6      	b.n	80101ca <imagesss+0x1476>
		case 333:
			retorno = "i333.jpg";
 800fffc:	4b55      	ldr	r3, [pc, #340]	; (8010154 <imagesss+0x1400>)
 800fffe:	60fb      	str	r3, [r7, #12]
			break;
 8010000:	e0e3      	b.n	80101ca <imagesss+0x1476>
		case 334:
			retorno = "i334.jpg";
 8010002:	4b55      	ldr	r3, [pc, #340]	; (8010158 <imagesss+0x1404>)
 8010004:	60fb      	str	r3, [r7, #12]
			break;
 8010006:	e0e0      	b.n	80101ca <imagesss+0x1476>
		case 335:
			retorno = "i335.jpg";
 8010008:	4b54      	ldr	r3, [pc, #336]	; (801015c <imagesss+0x1408>)
 801000a:	60fb      	str	r3, [r7, #12]
			break;
 801000c:	e0dd      	b.n	80101ca <imagesss+0x1476>
		case 336:
			retorno = "i336.jpg";
 801000e:	4b54      	ldr	r3, [pc, #336]	; (8010160 <imagesss+0x140c>)
 8010010:	60fb      	str	r3, [r7, #12]
			break;
 8010012:	e0da      	b.n	80101ca <imagesss+0x1476>
 8010014:	08012380 	.word	0x08012380
 8010018:	0801238c 	.word	0x0801238c
 801001c:	08012398 	.word	0x08012398
 8010020:	080123a4 	.word	0x080123a4
 8010024:	080123b0 	.word	0x080123b0
 8010028:	080123bc 	.word	0x080123bc
 801002c:	080123c8 	.word	0x080123c8
 8010030:	080123d4 	.word	0x080123d4
 8010034:	080123e0 	.word	0x080123e0
 8010038:	080123ec 	.word	0x080123ec
 801003c:	080123f8 	.word	0x080123f8
 8010040:	08012404 	.word	0x08012404
 8010044:	08012410 	.word	0x08012410
 8010048:	0801241c 	.word	0x0801241c
 801004c:	08012428 	.word	0x08012428
 8010050:	08012434 	.word	0x08012434
 8010054:	08012440 	.word	0x08012440
 8010058:	0801244c 	.word	0x0801244c
 801005c:	08012458 	.word	0x08012458
 8010060:	08012464 	.word	0x08012464
 8010064:	08012470 	.word	0x08012470
 8010068:	0801247c 	.word	0x0801247c
 801006c:	08012488 	.word	0x08012488
 8010070:	08012494 	.word	0x08012494
 8010074:	080124a0 	.word	0x080124a0
 8010078:	080124ac 	.word	0x080124ac
 801007c:	080124b8 	.word	0x080124b8
 8010080:	080124c4 	.word	0x080124c4
 8010084:	080124d0 	.word	0x080124d0
 8010088:	080124dc 	.word	0x080124dc
 801008c:	080124e8 	.word	0x080124e8
 8010090:	080124f4 	.word	0x080124f4
 8010094:	08012500 	.word	0x08012500
 8010098:	0801250c 	.word	0x0801250c
 801009c:	08012518 	.word	0x08012518
 80100a0:	08012524 	.word	0x08012524
 80100a4:	08012530 	.word	0x08012530
 80100a8:	0801253c 	.word	0x0801253c
 80100ac:	08012548 	.word	0x08012548
 80100b0:	08012554 	.word	0x08012554
 80100b4:	08012560 	.word	0x08012560
 80100b8:	0801256c 	.word	0x0801256c
 80100bc:	08012578 	.word	0x08012578
 80100c0:	08012584 	.word	0x08012584
 80100c4:	08012590 	.word	0x08012590
 80100c8:	0801259c 	.word	0x0801259c
 80100cc:	080125a8 	.word	0x080125a8
 80100d0:	080125b4 	.word	0x080125b4
 80100d4:	080125c0 	.word	0x080125c0
 80100d8:	080125cc 	.word	0x080125cc
 80100dc:	080125d8 	.word	0x080125d8
 80100e0:	080125e4 	.word	0x080125e4
 80100e4:	080125f0 	.word	0x080125f0
 80100e8:	080125fc 	.word	0x080125fc
 80100ec:	08012608 	.word	0x08012608
 80100f0:	08012614 	.word	0x08012614
 80100f4:	08012620 	.word	0x08012620
 80100f8:	0801262c 	.word	0x0801262c
 80100fc:	08012638 	.word	0x08012638
 8010100:	08012644 	.word	0x08012644
 8010104:	08012650 	.word	0x08012650
 8010108:	0801265c 	.word	0x0801265c
 801010c:	08012668 	.word	0x08012668
 8010110:	08012674 	.word	0x08012674
 8010114:	08012680 	.word	0x08012680
 8010118:	0801268c 	.word	0x0801268c
 801011c:	08012698 	.word	0x08012698
 8010120:	080126a4 	.word	0x080126a4
 8010124:	080126b0 	.word	0x080126b0
 8010128:	080126bc 	.word	0x080126bc
 801012c:	080126c8 	.word	0x080126c8
 8010130:	080126d4 	.word	0x080126d4
 8010134:	080126e0 	.word	0x080126e0
 8010138:	080126ec 	.word	0x080126ec
 801013c:	080126f8 	.word	0x080126f8
 8010140:	08012704 	.word	0x08012704
 8010144:	08012710 	.word	0x08012710
 8010148:	0801271c 	.word	0x0801271c
 801014c:	08012728 	.word	0x08012728
 8010150:	08012734 	.word	0x08012734
 8010154:	08012740 	.word	0x08012740
 8010158:	0801274c 	.word	0x0801274c
 801015c:	08012758 	.word	0x08012758
 8010160:	08012764 	.word	0x08012764
		case 337:
			retorno = "i337.jpg";
 8010164:	4b1c      	ldr	r3, [pc, #112]	; (80101d8 <imagesss+0x1484>)
 8010166:	60fb      	str	r3, [r7, #12]
			break;
 8010168:	e02f      	b.n	80101ca <imagesss+0x1476>
		case 338:
			retorno = "i338.jpg";
 801016a:	4b1c      	ldr	r3, [pc, #112]	; (80101dc <imagesss+0x1488>)
 801016c:	60fb      	str	r3, [r7, #12]
			break;
 801016e:	e02c      	b.n	80101ca <imagesss+0x1476>
		case 339:
			retorno = "i339.jpg";
 8010170:	4b1b      	ldr	r3, [pc, #108]	; (80101e0 <imagesss+0x148c>)
 8010172:	60fb      	str	r3, [r7, #12]
			break;
 8010174:	e029      	b.n	80101ca <imagesss+0x1476>
		case 340:
			retorno = "i340.jpg";
 8010176:	4b1b      	ldr	r3, [pc, #108]	; (80101e4 <imagesss+0x1490>)
 8010178:	60fb      	str	r3, [r7, #12]
			break;
 801017a:	e026      	b.n	80101ca <imagesss+0x1476>
		case 341:
			retorno = "i341.jpg";
 801017c:	4b1a      	ldr	r3, [pc, #104]	; (80101e8 <imagesss+0x1494>)
 801017e:	60fb      	str	r3, [r7, #12]
			break;
 8010180:	e023      	b.n	80101ca <imagesss+0x1476>
		case 342:
			retorno = "i342.jpg";
 8010182:	4b1a      	ldr	r3, [pc, #104]	; (80101ec <imagesss+0x1498>)
 8010184:	60fb      	str	r3, [r7, #12]
			break;
 8010186:	e020      	b.n	80101ca <imagesss+0x1476>
		case 343:
			retorno = "i343.jpg";
 8010188:	4b19      	ldr	r3, [pc, #100]	; (80101f0 <imagesss+0x149c>)
 801018a:	60fb      	str	r3, [r7, #12]
			break;
 801018c:	e01d      	b.n	80101ca <imagesss+0x1476>
		case 344:
			retorno = "i344.jpg";
 801018e:	4b19      	ldr	r3, [pc, #100]	; (80101f4 <imagesss+0x14a0>)
 8010190:	60fb      	str	r3, [r7, #12]
			break;
 8010192:	e01a      	b.n	80101ca <imagesss+0x1476>
		case 345:
			retorno = "i345.jpg";
 8010194:	4b18      	ldr	r3, [pc, #96]	; (80101f8 <imagesss+0x14a4>)
 8010196:	60fb      	str	r3, [r7, #12]
			break;
 8010198:	e017      	b.n	80101ca <imagesss+0x1476>
		case 346:
			retorno = "i346.jpg";
 801019a:	4b18      	ldr	r3, [pc, #96]	; (80101fc <imagesss+0x14a8>)
 801019c:	60fb      	str	r3, [r7, #12]
			break;
 801019e:	e014      	b.n	80101ca <imagesss+0x1476>
		case 347:
			retorno = "i347.jpg";
 80101a0:	4b17      	ldr	r3, [pc, #92]	; (8010200 <imagesss+0x14ac>)
 80101a2:	60fb      	str	r3, [r7, #12]
			break;
 80101a4:	e011      	b.n	80101ca <imagesss+0x1476>
		case 348:
			retorno = "i348.jpg";
 80101a6:	4b17      	ldr	r3, [pc, #92]	; (8010204 <imagesss+0x14b0>)
 80101a8:	60fb      	str	r3, [r7, #12]
			break;
 80101aa:	e00e      	b.n	80101ca <imagesss+0x1476>
		case 349:
			retorno = "i349.jpg";
 80101ac:	4b16      	ldr	r3, [pc, #88]	; (8010208 <imagesss+0x14b4>)
 80101ae:	60fb      	str	r3, [r7, #12]
			break;
 80101b0:	e00b      	b.n	80101ca <imagesss+0x1476>
		case 350:
			retorno = "i350.jpg";
 80101b2:	4b16      	ldr	r3, [pc, #88]	; (801020c <imagesss+0x14b8>)
 80101b4:	60fb      	str	r3, [r7, #12]
			break;
 80101b6:	e008      	b.n	80101ca <imagesss+0x1476>
		case 351:
			retorno = "i351.jpg";
 80101b8:	4b15      	ldr	r3, [pc, #84]	; (8010210 <imagesss+0x14bc>)
 80101ba:	60fb      	str	r3, [r7, #12]
			break;
 80101bc:	e005      	b.n	80101ca <imagesss+0x1476>
		case 352:
			retorno = "i352.jpg";
 80101be:	4b15      	ldr	r3, [pc, #84]	; (8010214 <imagesss+0x14c0>)
 80101c0:	60fb      	str	r3, [r7, #12]
			break;
 80101c2:	e002      	b.n	80101ca <imagesss+0x1476>
		case 353:
			retorno = "i353.jpg";
 80101c4:	4b14      	ldr	r3, [pc, #80]	; (8010218 <imagesss+0x14c4>)
 80101c6:	60fb      	str	r3, [r7, #12]
			break;
 80101c8:	bf00      	nop
	}
return retorno;
 80101ca:	68fb      	ldr	r3, [r7, #12]

}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3714      	adds	r7, #20
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr
 80101d8:	08012770 	.word	0x08012770
 80101dc:	0801277c 	.word	0x0801277c
 80101e0:	08012788 	.word	0x08012788
 80101e4:	08012794 	.word	0x08012794
 80101e8:	080127a0 	.word	0x080127a0
 80101ec:	080127ac 	.word	0x080127ac
 80101f0:	080127b8 	.word	0x080127b8
 80101f4:	080127c4 	.word	0x080127c4
 80101f8:	080127d0 	.word	0x080127d0
 80101fc:	080127dc 	.word	0x080127dc
 8010200:	080127e8 	.word	0x080127e8
 8010204:	080127f4 	.word	0x080127f4
 8010208:	08012800 	.word	0x08012800
 801020c:	0801280c 	.word	0x0801280c
 8010210:	08012818 	.word	0x08012818
 8010214:	08012824 	.word	0x08012824
 8010218:	08012830 	.word	0x08012830

0801021c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010220:	2201      	movs	r2, #1
 8010222:	490e      	ldr	r1, [pc, #56]	; (801025c <MX_USB_HOST_Init+0x40>)
 8010224:	480e      	ldr	r0, [pc, #56]	; (8010260 <MX_USB_HOST_Init+0x44>)
 8010226:	f7fa ff15 	bl	800b054 <USBH_Init>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d001      	beq.n	8010234 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010230:	f7f3 fb98 	bl	8003964 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010234:	490b      	ldr	r1, [pc, #44]	; (8010264 <MX_USB_HOST_Init+0x48>)
 8010236:	480a      	ldr	r0, [pc, #40]	; (8010260 <MX_USB_HOST_Init+0x44>)
 8010238:	f7fa ff91 	bl	800b15e <USBH_RegisterClass>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d001      	beq.n	8010246 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010242:	f7f3 fb8f 	bl	8003964 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010246:	4806      	ldr	r0, [pc, #24]	; (8010260 <MX_USB_HOST_Init+0x44>)
 8010248:	f7fb f816 	bl	800b278 <USBH_Start>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d001      	beq.n	8010256 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010252:	f7f3 fb87 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010256:	bf00      	nop
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	0801027d 	.word	0x0801027d
 8010260:	20002f50 	.word	0x20002f50
 8010264:	2000000c 	.word	0x2000000c

08010268 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801026c:	4802      	ldr	r0, [pc, #8]	; (8010278 <MX_USB_HOST_Process+0x10>)
 801026e:	f7fb f813 	bl	800b298 <USBH_Process>
}
 8010272:	bf00      	nop
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	20002f50 	.word	0x20002f50

0801027c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	460b      	mov	r3, r1
 8010286:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010288:	78fb      	ldrb	r3, [r7, #3]
 801028a:	3b01      	subs	r3, #1
 801028c:	2b04      	cmp	r3, #4
 801028e:	d81b      	bhi.n	80102c8 <USBH_UserProcess+0x4c>
 8010290:	a201      	add	r2, pc, #4	; (adr r2, 8010298 <USBH_UserProcess+0x1c>)
 8010292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010296:	bf00      	nop
 8010298:	080102c9 	.word	0x080102c9
 801029c:	080102b5 	.word	0x080102b5
 80102a0:	080102c9 	.word	0x080102c9
 80102a4:	080102c1 	.word	0x080102c1
 80102a8:	080102ad 	.word	0x080102ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80102ac:	4b09      	ldr	r3, [pc, #36]	; (80102d4 <USBH_UserProcess+0x58>)
 80102ae:	2203      	movs	r2, #3
 80102b0:	701a      	strb	r2, [r3, #0]
  break;
 80102b2:	e00a      	b.n	80102ca <USBH_UserProcess+0x4e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80102b4:	4b07      	ldr	r3, [pc, #28]	; (80102d4 <USBH_UserProcess+0x58>)
 80102b6:	2202      	movs	r2, #2
 80102b8:	701a      	strb	r2, [r3, #0]
  MSC_Application();
 80102ba:	f7fe fc9d 	bl	800ebf8 <MSC_Application>
  break;
 80102be:	e004      	b.n	80102ca <USBH_UserProcess+0x4e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80102c0:	4b04      	ldr	r3, [pc, #16]	; (80102d4 <USBH_UserProcess+0x58>)
 80102c2:	2201      	movs	r2, #1
 80102c4:	701a      	strb	r2, [r3, #0]
  break;
 80102c6:	e000      	b.n	80102ca <USBH_UserProcess+0x4e>

  default:
  break;
 80102c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80102ca:	bf00      	nop
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	bf00      	nop
 80102d4:	20001dfc 	.word	0x20001dfc

080102d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b08a      	sub	sp, #40	; 0x28
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102e0:	f107 0314 	add.w	r3, r7, #20
 80102e4:	2200      	movs	r2, #0
 80102e6:	601a      	str	r2, [r3, #0]
 80102e8:	605a      	str	r2, [r3, #4]
 80102ea:	609a      	str	r2, [r3, #8]
 80102ec:	60da      	str	r2, [r3, #12]
 80102ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80102f8:	d14e      	bne.n	8010398 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102fa:	4b29      	ldr	r3, [pc, #164]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 80102fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102fe:	4a28      	ldr	r2, [pc, #160]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 8010300:	f043 0301 	orr.w	r3, r3, #1
 8010304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010306:	4b26      	ldr	r3, [pc, #152]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 8010308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801030a:	f003 0301 	and.w	r3, r3, #1
 801030e:	613b      	str	r3, [r7, #16]
 8010310:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010312:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010318:	2302      	movs	r3, #2
 801031a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801031c:	2300      	movs	r3, #0
 801031e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010320:	2303      	movs	r3, #3
 8010322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010324:	230a      	movs	r3, #10
 8010326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010328:	f107 0314 	add.w	r3, r7, #20
 801032c:	4619      	mov	r1, r3
 801032e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010332:	f7f3 fe93 	bl	800405c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010336:	4b1a      	ldr	r3, [pc, #104]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 8010338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801033a:	4a19      	ldr	r2, [pc, #100]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 801033c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010342:	4b17      	ldr	r3, [pc, #92]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 8010344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801034a:	60fb      	str	r3, [r7, #12]
 801034c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801034e:	4b14      	ldr	r3, [pc, #80]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 8010350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010356:	2b00      	cmp	r3, #0
 8010358:	d114      	bne.n	8010384 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801035a:	4b11      	ldr	r3, [pc, #68]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 801035c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801035e:	4a10      	ldr	r2, [pc, #64]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 8010360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010364:	6593      	str	r3, [r2, #88]	; 0x58
 8010366:	4b0e      	ldr	r3, [pc, #56]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 8010368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801036a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801036e:	60bb      	str	r3, [r7, #8]
 8010370:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8010372:	f7f5 fce9 	bl	8005d48 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010376:	4b0a      	ldr	r3, [pc, #40]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 8010378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801037a:	4a09      	ldr	r2, [pc, #36]	; (80103a0 <HAL_HCD_MspInit+0xc8>)
 801037c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010380:	6593      	str	r3, [r2, #88]	; 0x58
 8010382:	e001      	b.n	8010388 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010384:	f7f5 fce0 	bl	8005d48 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010388:	2200      	movs	r2, #0
 801038a:	2100      	movs	r1, #0
 801038c:	2043      	movs	r0, #67	; 0x43
 801038e:	f7f3 fdee 	bl	8003f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010392:	2043      	movs	r0, #67	; 0x43
 8010394:	f7f3 fe07 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010398:	bf00      	nop
 801039a:	3728      	adds	r7, #40	; 0x28
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	40021000 	.word	0x40021000

080103a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fb fa3f 	bl	800b836 <USBH_LL_IncTimer>
}
 80103b8:	bf00      	nop
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7fb fa77 	bl	800b8c2 <USBH_LL_Connect>
}
 80103d4:	bf00      	nop
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fb fa80 	bl	800b8f0 <USBH_LL_Disconnect>
}
 80103f0:	bf00      	nop
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b083      	sub	sp, #12
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	460b      	mov	r3, r1
 8010402:	70fb      	strb	r3, [r7, #3]
 8010404:	4613      	mov	r3, r2
 8010406:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010408:	bf00      	nop
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010422:	4618      	mov	r0, r3
 8010424:	f7fb fa31 	bl	800b88a <USBH_LL_PortEnabled>
} 
 8010428:	bf00      	nop
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801043e:	4618      	mov	r0, r3
 8010440:	f7fb fa31 	bl	800b8a6 <USBH_LL_PortDisabled>
} 
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 801045a:	2b01      	cmp	r3, #1
 801045c:	d12a      	bne.n	80104b4 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801045e:	4a18      	ldr	r2, [pc, #96]	; (80104c0 <USBH_LL_Init+0x74>)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4a15      	ldr	r2, [pc, #84]	; (80104c0 <USBH_LL_Init+0x74>)
 801046a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801046e:	4b14      	ldr	r3, [pc, #80]	; (80104c0 <USBH_LL_Init+0x74>)
 8010470:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010474:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010476:	4b12      	ldr	r3, [pc, #72]	; (80104c0 <USBH_LL_Init+0x74>)
 8010478:	2208      	movs	r2, #8
 801047a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801047c:	4b10      	ldr	r3, [pc, #64]	; (80104c0 <USBH_LL_Init+0x74>)
 801047e:	2201      	movs	r2, #1
 8010480:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010482:	4b0f      	ldr	r3, [pc, #60]	; (80104c0 <USBH_LL_Init+0x74>)
 8010484:	2200      	movs	r2, #0
 8010486:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010488:	4b0d      	ldr	r3, [pc, #52]	; (80104c0 <USBH_LL_Init+0x74>)
 801048a:	2202      	movs	r2, #2
 801048c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801048e:	4b0c      	ldr	r3, [pc, #48]	; (80104c0 <USBH_LL_Init+0x74>)
 8010490:	2200      	movs	r2, #0
 8010492:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010494:	480a      	ldr	r0, [pc, #40]	; (80104c0 <USBH_LL_Init+0x74>)
 8010496:	f7f3 ffa1 	bl	80043dc <HAL_HCD_Init>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d001      	beq.n	80104a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80104a0:	f7f3 fa60 	bl	8003964 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80104a4:	4806      	ldr	r0, [pc, #24]	; (80104c0 <USBH_LL_Init+0x74>)
 80104a6:	f7f4 fba1 	bl	8004bec <HAL_HCD_GetCurrentFrame>
 80104aa:	4603      	mov	r3, r0
 80104ac:	4619      	mov	r1, r3
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7fb f9b2 	bl	800b818 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80104b4:	2300      	movs	r3, #0
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3708      	adds	r7, #8
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	20003784 	.word	0x20003784

080104c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b084      	sub	sp, #16
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104cc:	2300      	movs	r3, #0
 80104ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104d0:	2300      	movs	r3, #0
 80104d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80104da:	4618      	mov	r0, r3
 80104dc:	f7f4 fb0e 	bl	8004afc <HAL_HCD_Start>
 80104e0:	4603      	mov	r3, r0
 80104e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80104e4:	7bfb      	ldrb	r3, [r7, #15]
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 f990 	bl	801080c <USBH_Get_USB_Status>
 80104ec:	4603      	mov	r3, r0
 80104ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80104f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3710      	adds	r7, #16
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}

080104fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80104fa:	b580      	push	{r7, lr}
 80104fc:	b084      	sub	sp, #16
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010502:	2300      	movs	r3, #0
 8010504:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010506:	2300      	movs	r3, #0
 8010508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010510:	4618      	mov	r0, r3
 8010512:	f7f4 fb16 	bl	8004b42 <HAL_HCD_Stop>
 8010516:	4603      	mov	r3, r0
 8010518:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801051a:	7bfb      	ldrb	r3, [r7, #15]
 801051c:	4618      	mov	r0, r3
 801051e:	f000 f975 	bl	801080c <USBH_Get_USB_Status>
 8010522:	4603      	mov	r3, r0
 8010524:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8010526:	7bbb      	ldrb	r3, [r7, #14]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010538:	2301      	movs	r3, #1
 801053a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010542:	4618      	mov	r0, r3
 8010544:	f7f4 fb60 	bl	8004c08 <HAL_HCD_GetCurrentSpeed>
 8010548:	4603      	mov	r3, r0
 801054a:	2b01      	cmp	r3, #1
 801054c:	d007      	beq.n	801055e <USBH_LL_GetSpeed+0x2e>
 801054e:	2b01      	cmp	r3, #1
 8010550:	d302      	bcc.n	8010558 <USBH_LL_GetSpeed+0x28>
 8010552:	2b02      	cmp	r3, #2
 8010554:	d006      	beq.n	8010564 <USBH_LL_GetSpeed+0x34>
 8010556:	e008      	b.n	801056a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010558:	2300      	movs	r3, #0
 801055a:	73fb      	strb	r3, [r7, #15]
    break;
 801055c:	e008      	b.n	8010570 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801055e:	2301      	movs	r3, #1
 8010560:	73fb      	strb	r3, [r7, #15]
    break;
 8010562:	e005      	b.n	8010570 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010564:	2302      	movs	r3, #2
 8010566:	73fb      	strb	r3, [r7, #15]
    break;
 8010568:	e002      	b.n	8010570 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801056a:	2301      	movs	r3, #1
 801056c:	73fb      	strb	r3, [r7, #15]
    break;
 801056e:	bf00      	nop
  }
  return  speed;
 8010570:	7bfb      	ldrb	r3, [r7, #15]
}
 8010572:	4618      	mov	r0, r3
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}

0801057a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801057a:	b580      	push	{r7, lr}
 801057c:	b084      	sub	sp, #16
 801057e:	af00      	add	r7, sp, #0
 8010580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010582:	2300      	movs	r3, #0
 8010584:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010586:	2300      	movs	r3, #0
 8010588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010590:	4618      	mov	r0, r3
 8010592:	f7f4 faf3 	bl	8004b7c <HAL_HCD_ResetPort>
 8010596:	4603      	mov	r3, r0
 8010598:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801059a:	7bfb      	ldrb	r3, [r7, #15]
 801059c:	4618      	mov	r0, r3
 801059e:	f000 f935 	bl	801080c <USBH_Get_USB_Status>
 80105a2:	4603      	mov	r3, r0
 80105a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80105a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80105c2:	78fa      	ldrb	r2, [r7, #3]
 80105c4:	4611      	mov	r1, r2
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7f4 fafb 	bl	8004bc2 <HAL_HCD_HC_GetXferCount>
 80105cc:	4603      	mov	r3, r0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80105d6:	b590      	push	{r4, r7, lr}
 80105d8:	b089      	sub	sp, #36	; 0x24
 80105da:	af04      	add	r7, sp, #16
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	4608      	mov	r0, r1
 80105e0:	4611      	mov	r1, r2
 80105e2:	461a      	mov	r2, r3
 80105e4:	4603      	mov	r3, r0
 80105e6:	70fb      	strb	r3, [r7, #3]
 80105e8:	460b      	mov	r3, r1
 80105ea:	70bb      	strb	r3, [r7, #2]
 80105ec:	4613      	mov	r3, r2
 80105ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105f0:	2300      	movs	r3, #0
 80105f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105f4:	2300      	movs	r3, #0
 80105f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 80105fe:	787c      	ldrb	r4, [r7, #1]
 8010600:	78ba      	ldrb	r2, [r7, #2]
 8010602:	78f9      	ldrb	r1, [r7, #3]
 8010604:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010606:	9302      	str	r3, [sp, #8]
 8010608:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	4623      	mov	r3, r4
 8010616:	f7f3 ff43 	bl	80044a0 <HAL_HCD_HC_Init>
 801061a:	4603      	mov	r3, r0
 801061c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801061e:	7bfb      	ldrb	r3, [r7, #15]
 8010620:	4618      	mov	r0, r3
 8010622:	f000 f8f3 	bl	801080c <USBH_Get_USB_Status>
 8010626:	4603      	mov	r3, r0
 8010628:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801062a:	7bbb      	ldrb	r3, [r7, #14]
}
 801062c:	4618      	mov	r0, r3
 801062e:	3714      	adds	r7, #20
 8010630:	46bd      	mov	sp, r7
 8010632:	bd90      	pop	{r4, r7, pc}

08010634 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	460b      	mov	r3, r1
 801063e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010640:	2300      	movs	r3, #0
 8010642:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010644:	2300      	movs	r3, #0
 8010646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801064e:	78fa      	ldrb	r2, [r7, #3]
 8010650:	4611      	mov	r1, r2
 8010652:	4618      	mov	r0, r3
 8010654:	f7f3 ffbc 	bl	80045d0 <HAL_HCD_HC_Halt>
 8010658:	4603      	mov	r3, r0
 801065a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801065c:	7bfb      	ldrb	r3, [r7, #15]
 801065e:	4618      	mov	r0, r3
 8010660:	f000 f8d4 	bl	801080c <USBH_Get_USB_Status>
 8010664:	4603      	mov	r3, r0
 8010666:	73bb      	strb	r3, [r7, #14]
   
  return usb_status;
 8010668:	7bbb      	ldrb	r3, [r7, #14]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3710      	adds	r7, #16
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010672:	b590      	push	{r4, r7, lr}
 8010674:	b089      	sub	sp, #36	; 0x24
 8010676:	af04      	add	r7, sp, #16
 8010678:	6078      	str	r0, [r7, #4]
 801067a:	4608      	mov	r0, r1
 801067c:	4611      	mov	r1, r2
 801067e:	461a      	mov	r2, r3
 8010680:	4603      	mov	r3, r0
 8010682:	70fb      	strb	r3, [r7, #3]
 8010684:	460b      	mov	r3, r1
 8010686:	70bb      	strb	r3, [r7, #2]
 8010688:	4613      	mov	r3, r2
 801068a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801068c:	2300      	movs	r3, #0
 801068e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010690:	2300      	movs	r3, #0
 8010692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 801069a:	787c      	ldrb	r4, [r7, #1]
 801069c:	78ba      	ldrb	r2, [r7, #2]
 801069e:	78f9      	ldrb	r1, [r7, #3]
 80106a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80106a4:	9303      	str	r3, [sp, #12]
 80106a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106a8:	9302      	str	r3, [sp, #8]
 80106aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ac:	9301      	str	r3, [sp, #4]
 80106ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106b2:	9300      	str	r3, [sp, #0]
 80106b4:	4623      	mov	r3, r4
 80106b6:	f7f3 ffaf 	bl	8004618 <HAL_HCD_HC_SubmitRequest>
 80106ba:	4603      	mov	r3, r0
 80106bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 80106be:	7bfb      	ldrb	r3, [r7, #15]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f000 f8a3 	bl	801080c <USBH_Get_USB_Status>
 80106c6:	4603      	mov	r3, r0
 80106c8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80106ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3714      	adds	r7, #20
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd90      	pop	{r4, r7, pc}

080106d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	460b      	mov	r3, r1
 80106de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80106e6:	78fa      	ldrb	r2, [r7, #3]
 80106e8:	4611      	mov	r1, r2
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7f4 fa54 	bl	8004b98 <HAL_HCD_HC_GetURBState>
 80106f0:	4603      	mov	r3, r0
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3708      	adds	r7, #8
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b082      	sub	sp, #8
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
 8010702:	460b      	mov	r3, r1
 8010704:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 801070c:	2b01      	cmp	r3, #1
 801070e:	d103      	bne.n	8010718 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010710:	78fb      	ldrb	r3, [r7, #3]
 8010712:	4618      	mov	r0, r3
 8010714:	f000 f8a6 	bl	8010864 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010718:	20c8      	movs	r0, #200	; 0xc8
 801071a:	f7f3 fb2b 	bl	8003d74 <HAL_Delay>
  return USBH_OK;
 801071e:	2300      	movs	r3, #0
}
 8010720:	4618      	mov	r0, r3
 8010722:	3708      	adds	r7, #8
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	460b      	mov	r3, r1
 8010732:	70fb      	strb	r3, [r7, #3]
 8010734:	4613      	mov	r3, r2
 8010736:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801073e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010740:	78fa      	ldrb	r2, [r7, #3]
 8010742:	68f9      	ldr	r1, [r7, #12]
 8010744:	4613      	mov	r3, r2
 8010746:	009b      	lsls	r3, r3, #2
 8010748:	4413      	add	r3, r2
 801074a:	00db      	lsls	r3, r3, #3
 801074c:	440b      	add	r3, r1
 801074e:	333b      	adds	r3, #59	; 0x3b
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00a      	beq.n	801076c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010756:	78fa      	ldrb	r2, [r7, #3]
 8010758:	68f9      	ldr	r1, [r7, #12]
 801075a:	4613      	mov	r3, r2
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4413      	add	r3, r2
 8010760:	00db      	lsls	r3, r3, #3
 8010762:	440b      	add	r3, r1
 8010764:	3350      	adds	r3, #80	; 0x50
 8010766:	78ba      	ldrb	r2, [r7, #2]
 8010768:	701a      	strb	r2, [r3, #0]
 801076a:	e009      	b.n	8010780 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801076c:	78fa      	ldrb	r2, [r7, #3]
 801076e:	68f9      	ldr	r1, [r7, #12]
 8010770:	4613      	mov	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	440b      	add	r3, r1
 801077a:	3351      	adds	r3, #81	; 0x51
 801077c:	78ba      	ldrb	r2, [r7, #2]
 801077e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3714      	adds	r7, #20
 8010786:	46bd      	mov	sp, r7
 8010788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078c:	4770      	bx	lr

0801078e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801078e:	b480      	push	{r7}
 8010790:	b085      	sub	sp, #20
 8010792:	af00      	add	r7, sp, #0
 8010794:	6078      	str	r0, [r7, #4]
 8010796:	460b      	mov	r3, r1
 8010798:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801079a:	2300      	movs	r3, #0
 801079c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80107a4:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80107a6:	78fa      	ldrb	r2, [r7, #3]
 80107a8:	68b9      	ldr	r1, [r7, #8]
 80107aa:	4613      	mov	r3, r2
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4413      	add	r3, r2
 80107b0:	00db      	lsls	r3, r3, #3
 80107b2:	440b      	add	r3, r1
 80107b4:	333b      	adds	r3, #59	; 0x3b
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d00a      	beq.n	80107d2 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80107bc:	78fa      	ldrb	r2, [r7, #3]
 80107be:	68b9      	ldr	r1, [r7, #8]
 80107c0:	4613      	mov	r3, r2
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	4413      	add	r3, r2
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	440b      	add	r3, r1
 80107ca:	3350      	adds	r3, #80	; 0x50
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	73fb      	strb	r3, [r7, #15]
 80107d0:	e009      	b.n	80107e6 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80107d2:	78fa      	ldrb	r2, [r7, #3]
 80107d4:	68b9      	ldr	r1, [r7, #8]
 80107d6:	4613      	mov	r3, r2
 80107d8:	009b      	lsls	r3, r3, #2
 80107da:	4413      	add	r3, r2
 80107dc:	00db      	lsls	r3, r3, #3
 80107de:	440b      	add	r3, r1
 80107e0:	3351      	adds	r3, #81	; 0x51
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80107e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3714      	adds	r7, #20
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr

080107f4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f7f3 fab9 	bl	8003d74 <HAL_Delay>
}
 8010802:	bf00      	nop
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
	...

0801080c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801080c:	b480      	push	{r7}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
 8010812:	4603      	mov	r3, r0
 8010814:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010816:	2300      	movs	r3, #0
 8010818:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801081a:	79fb      	ldrb	r3, [r7, #7]
 801081c:	2b03      	cmp	r3, #3
 801081e:	d817      	bhi.n	8010850 <USBH_Get_USB_Status+0x44>
 8010820:	a201      	add	r2, pc, #4	; (adr r2, 8010828 <USBH_Get_USB_Status+0x1c>)
 8010822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010826:	bf00      	nop
 8010828:	08010839 	.word	0x08010839
 801082c:	0801083f 	.word	0x0801083f
 8010830:	08010845 	.word	0x08010845
 8010834:	0801084b 	.word	0x0801084b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	73fb      	strb	r3, [r7, #15]
    break;
 801083c:	e00b      	b.n	8010856 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801083e:	2302      	movs	r3, #2
 8010840:	73fb      	strb	r3, [r7, #15]
    break;
 8010842:	e008      	b.n	8010856 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010844:	2301      	movs	r3, #1
 8010846:	73fb      	strb	r3, [r7, #15]
    break;
 8010848:	e005      	b.n	8010856 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801084a:	2302      	movs	r3, #2
 801084c:	73fb      	strb	r3, [r7, #15]
    break;
 801084e:	e002      	b.n	8010856 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010850:	2302      	movs	r3, #2
 8010852:	73fb      	strb	r3, [r7, #15]
    break;
 8010854:	bf00      	nop
  }
  return usb_status;
 8010856:	7bfb      	ldrb	r3, [r7, #15]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3714      	adds	r7, #20
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	4603      	mov	r3, r0
 801086c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 801086e:	79fb      	ldrb	r3, [r7, #7]
 8010870:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010872:	79fb      	ldrb	r3, [r7, #7]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d102      	bne.n	801087e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8010878:	2301      	movs	r3, #1
 801087a:	73fb      	strb	r3, [r7, #15]
 801087c:	e001      	b.n	8010882 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801087e:	2300      	movs	r3, #0
 8010880:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,(GPIO_PinState)data);
 8010882:	7bfb      	ldrb	r3, [r7, #15]
 8010884:	461a      	mov	r2, r3
 8010886:	f44f 7180 	mov.w	r1, #256	; 0x100
 801088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801088e:	f7f3 fd8d 	bl	80043ac <HAL_GPIO_WritePin>
}
 8010892:	bf00      	nop
 8010894:	3710      	adds	r7, #16
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
	...

0801089c <__errno>:
 801089c:	4b01      	ldr	r3, [pc, #4]	; (80108a4 <__errno+0x8>)
 801089e:	6818      	ldr	r0, [r3, #0]
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop
 80108a4:	20000038 	.word	0x20000038

080108a8 <__libc_init_array>:
 80108a8:	b570      	push	{r4, r5, r6, lr}
 80108aa:	4e0d      	ldr	r6, [pc, #52]	; (80108e0 <__libc_init_array+0x38>)
 80108ac:	4c0d      	ldr	r4, [pc, #52]	; (80108e4 <__libc_init_array+0x3c>)
 80108ae:	1ba4      	subs	r4, r4, r6
 80108b0:	10a4      	asrs	r4, r4, #2
 80108b2:	2500      	movs	r5, #0
 80108b4:	42a5      	cmp	r5, r4
 80108b6:	d109      	bne.n	80108cc <__libc_init_array+0x24>
 80108b8:	4e0b      	ldr	r6, [pc, #44]	; (80108e8 <__libc_init_array+0x40>)
 80108ba:	4c0c      	ldr	r4, [pc, #48]	; (80108ec <__libc_init_array+0x44>)
 80108bc:	f000 fcc6 	bl	801124c <_init>
 80108c0:	1ba4      	subs	r4, r4, r6
 80108c2:	10a4      	asrs	r4, r4, #2
 80108c4:	2500      	movs	r5, #0
 80108c6:	42a5      	cmp	r5, r4
 80108c8:	d105      	bne.n	80108d6 <__libc_init_array+0x2e>
 80108ca:	bd70      	pop	{r4, r5, r6, pc}
 80108cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80108d0:	4798      	blx	r3
 80108d2:	3501      	adds	r5, #1
 80108d4:	e7ee      	b.n	80108b4 <__libc_init_array+0xc>
 80108d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80108da:	4798      	blx	r3
 80108dc:	3501      	adds	r5, #1
 80108de:	e7f2      	b.n	80108c6 <__libc_init_array+0x1e>
 80108e0:	08012954 	.word	0x08012954
 80108e4:	08012954 	.word	0x08012954
 80108e8:	08012954 	.word	0x08012954
 80108ec:	08012958 	.word	0x08012958

080108f0 <malloc>:
 80108f0:	4b02      	ldr	r3, [pc, #8]	; (80108fc <malloc+0xc>)
 80108f2:	4601      	mov	r1, r0
 80108f4:	6818      	ldr	r0, [r3, #0]
 80108f6:	f000 b87b 	b.w	80109f0 <_malloc_r>
 80108fa:	bf00      	nop
 80108fc:	20000038 	.word	0x20000038

08010900 <free>:
 8010900:	4b02      	ldr	r3, [pc, #8]	; (801090c <free+0xc>)
 8010902:	4601      	mov	r1, r0
 8010904:	6818      	ldr	r0, [r3, #0]
 8010906:	f000 b825 	b.w	8010954 <_free_r>
 801090a:	bf00      	nop
 801090c:	20000038 	.word	0x20000038

08010910 <memcmp>:
 8010910:	b530      	push	{r4, r5, lr}
 8010912:	2400      	movs	r4, #0
 8010914:	42a2      	cmp	r2, r4
 8010916:	d101      	bne.n	801091c <memcmp+0xc>
 8010918:	2000      	movs	r0, #0
 801091a:	e007      	b.n	801092c <memcmp+0x1c>
 801091c:	5d03      	ldrb	r3, [r0, r4]
 801091e:	3401      	adds	r4, #1
 8010920:	190d      	adds	r5, r1, r4
 8010922:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8010926:	42ab      	cmp	r3, r5
 8010928:	d0f4      	beq.n	8010914 <memcmp+0x4>
 801092a:	1b58      	subs	r0, r3, r5
 801092c:	bd30      	pop	{r4, r5, pc}

0801092e <memcpy>:
 801092e:	b510      	push	{r4, lr}
 8010930:	1e43      	subs	r3, r0, #1
 8010932:	440a      	add	r2, r1
 8010934:	4291      	cmp	r1, r2
 8010936:	d100      	bne.n	801093a <memcpy+0xc>
 8010938:	bd10      	pop	{r4, pc}
 801093a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801093e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010942:	e7f7      	b.n	8010934 <memcpy+0x6>

08010944 <memset>:
 8010944:	4402      	add	r2, r0
 8010946:	4603      	mov	r3, r0
 8010948:	4293      	cmp	r3, r2
 801094a:	d100      	bne.n	801094e <memset+0xa>
 801094c:	4770      	bx	lr
 801094e:	f803 1b01 	strb.w	r1, [r3], #1
 8010952:	e7f9      	b.n	8010948 <memset+0x4>

08010954 <_free_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	4605      	mov	r5, r0
 8010958:	2900      	cmp	r1, #0
 801095a:	d045      	beq.n	80109e8 <_free_r+0x94>
 801095c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010960:	1f0c      	subs	r4, r1, #4
 8010962:	2b00      	cmp	r3, #0
 8010964:	bfb8      	it	lt
 8010966:	18e4      	addlt	r4, r4, r3
 8010968:	f000 f94c 	bl	8010c04 <__malloc_lock>
 801096c:	4a1f      	ldr	r2, [pc, #124]	; (80109ec <_free_r+0x98>)
 801096e:	6813      	ldr	r3, [r2, #0]
 8010970:	4610      	mov	r0, r2
 8010972:	b933      	cbnz	r3, 8010982 <_free_r+0x2e>
 8010974:	6063      	str	r3, [r4, #4]
 8010976:	6014      	str	r4, [r2, #0]
 8010978:	4628      	mov	r0, r5
 801097a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801097e:	f000 b942 	b.w	8010c06 <__malloc_unlock>
 8010982:	42a3      	cmp	r3, r4
 8010984:	d90c      	bls.n	80109a0 <_free_r+0x4c>
 8010986:	6821      	ldr	r1, [r4, #0]
 8010988:	1862      	adds	r2, r4, r1
 801098a:	4293      	cmp	r3, r2
 801098c:	bf04      	itt	eq
 801098e:	681a      	ldreq	r2, [r3, #0]
 8010990:	685b      	ldreq	r3, [r3, #4]
 8010992:	6063      	str	r3, [r4, #4]
 8010994:	bf04      	itt	eq
 8010996:	1852      	addeq	r2, r2, r1
 8010998:	6022      	streq	r2, [r4, #0]
 801099a:	6004      	str	r4, [r0, #0]
 801099c:	e7ec      	b.n	8010978 <_free_r+0x24>
 801099e:	4613      	mov	r3, r2
 80109a0:	685a      	ldr	r2, [r3, #4]
 80109a2:	b10a      	cbz	r2, 80109a8 <_free_r+0x54>
 80109a4:	42a2      	cmp	r2, r4
 80109a6:	d9fa      	bls.n	801099e <_free_r+0x4a>
 80109a8:	6819      	ldr	r1, [r3, #0]
 80109aa:	1858      	adds	r0, r3, r1
 80109ac:	42a0      	cmp	r0, r4
 80109ae:	d10b      	bne.n	80109c8 <_free_r+0x74>
 80109b0:	6820      	ldr	r0, [r4, #0]
 80109b2:	4401      	add	r1, r0
 80109b4:	1858      	adds	r0, r3, r1
 80109b6:	4282      	cmp	r2, r0
 80109b8:	6019      	str	r1, [r3, #0]
 80109ba:	d1dd      	bne.n	8010978 <_free_r+0x24>
 80109bc:	6810      	ldr	r0, [r2, #0]
 80109be:	6852      	ldr	r2, [r2, #4]
 80109c0:	605a      	str	r2, [r3, #4]
 80109c2:	4401      	add	r1, r0
 80109c4:	6019      	str	r1, [r3, #0]
 80109c6:	e7d7      	b.n	8010978 <_free_r+0x24>
 80109c8:	d902      	bls.n	80109d0 <_free_r+0x7c>
 80109ca:	230c      	movs	r3, #12
 80109cc:	602b      	str	r3, [r5, #0]
 80109ce:	e7d3      	b.n	8010978 <_free_r+0x24>
 80109d0:	6820      	ldr	r0, [r4, #0]
 80109d2:	1821      	adds	r1, r4, r0
 80109d4:	428a      	cmp	r2, r1
 80109d6:	bf04      	itt	eq
 80109d8:	6811      	ldreq	r1, [r2, #0]
 80109da:	6852      	ldreq	r2, [r2, #4]
 80109dc:	6062      	str	r2, [r4, #4]
 80109de:	bf04      	itt	eq
 80109e0:	1809      	addeq	r1, r1, r0
 80109e2:	6021      	streq	r1, [r4, #0]
 80109e4:	605c      	str	r4, [r3, #4]
 80109e6:	e7c7      	b.n	8010978 <_free_r+0x24>
 80109e8:	bd38      	pop	{r3, r4, r5, pc}
 80109ea:	bf00      	nop
 80109ec:	20001e10 	.word	0x20001e10

080109f0 <_malloc_r>:
 80109f0:	b570      	push	{r4, r5, r6, lr}
 80109f2:	1ccd      	adds	r5, r1, #3
 80109f4:	f025 0503 	bic.w	r5, r5, #3
 80109f8:	3508      	adds	r5, #8
 80109fa:	2d0c      	cmp	r5, #12
 80109fc:	bf38      	it	cc
 80109fe:	250c      	movcc	r5, #12
 8010a00:	2d00      	cmp	r5, #0
 8010a02:	4606      	mov	r6, r0
 8010a04:	db01      	blt.n	8010a0a <_malloc_r+0x1a>
 8010a06:	42a9      	cmp	r1, r5
 8010a08:	d903      	bls.n	8010a12 <_malloc_r+0x22>
 8010a0a:	230c      	movs	r3, #12
 8010a0c:	6033      	str	r3, [r6, #0]
 8010a0e:	2000      	movs	r0, #0
 8010a10:	bd70      	pop	{r4, r5, r6, pc}
 8010a12:	f000 f8f7 	bl	8010c04 <__malloc_lock>
 8010a16:	4a21      	ldr	r2, [pc, #132]	; (8010a9c <_malloc_r+0xac>)
 8010a18:	6814      	ldr	r4, [r2, #0]
 8010a1a:	4621      	mov	r1, r4
 8010a1c:	b991      	cbnz	r1, 8010a44 <_malloc_r+0x54>
 8010a1e:	4c20      	ldr	r4, [pc, #128]	; (8010aa0 <_malloc_r+0xb0>)
 8010a20:	6823      	ldr	r3, [r4, #0]
 8010a22:	b91b      	cbnz	r3, 8010a2c <_malloc_r+0x3c>
 8010a24:	4630      	mov	r0, r6
 8010a26:	f000 f83d 	bl	8010aa4 <_sbrk_r>
 8010a2a:	6020      	str	r0, [r4, #0]
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	4630      	mov	r0, r6
 8010a30:	f000 f838 	bl	8010aa4 <_sbrk_r>
 8010a34:	1c43      	adds	r3, r0, #1
 8010a36:	d124      	bne.n	8010a82 <_malloc_r+0x92>
 8010a38:	230c      	movs	r3, #12
 8010a3a:	6033      	str	r3, [r6, #0]
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f000 f8e2 	bl	8010c06 <__malloc_unlock>
 8010a42:	e7e4      	b.n	8010a0e <_malloc_r+0x1e>
 8010a44:	680b      	ldr	r3, [r1, #0]
 8010a46:	1b5b      	subs	r3, r3, r5
 8010a48:	d418      	bmi.n	8010a7c <_malloc_r+0x8c>
 8010a4a:	2b0b      	cmp	r3, #11
 8010a4c:	d90f      	bls.n	8010a6e <_malloc_r+0x7e>
 8010a4e:	600b      	str	r3, [r1, #0]
 8010a50:	50cd      	str	r5, [r1, r3]
 8010a52:	18cc      	adds	r4, r1, r3
 8010a54:	4630      	mov	r0, r6
 8010a56:	f000 f8d6 	bl	8010c06 <__malloc_unlock>
 8010a5a:	f104 000b 	add.w	r0, r4, #11
 8010a5e:	1d23      	adds	r3, r4, #4
 8010a60:	f020 0007 	bic.w	r0, r0, #7
 8010a64:	1ac3      	subs	r3, r0, r3
 8010a66:	d0d3      	beq.n	8010a10 <_malloc_r+0x20>
 8010a68:	425a      	negs	r2, r3
 8010a6a:	50e2      	str	r2, [r4, r3]
 8010a6c:	e7d0      	b.n	8010a10 <_malloc_r+0x20>
 8010a6e:	428c      	cmp	r4, r1
 8010a70:	684b      	ldr	r3, [r1, #4]
 8010a72:	bf16      	itet	ne
 8010a74:	6063      	strne	r3, [r4, #4]
 8010a76:	6013      	streq	r3, [r2, #0]
 8010a78:	460c      	movne	r4, r1
 8010a7a:	e7eb      	b.n	8010a54 <_malloc_r+0x64>
 8010a7c:	460c      	mov	r4, r1
 8010a7e:	6849      	ldr	r1, [r1, #4]
 8010a80:	e7cc      	b.n	8010a1c <_malloc_r+0x2c>
 8010a82:	1cc4      	adds	r4, r0, #3
 8010a84:	f024 0403 	bic.w	r4, r4, #3
 8010a88:	42a0      	cmp	r0, r4
 8010a8a:	d005      	beq.n	8010a98 <_malloc_r+0xa8>
 8010a8c:	1a21      	subs	r1, r4, r0
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f000 f808 	bl	8010aa4 <_sbrk_r>
 8010a94:	3001      	adds	r0, #1
 8010a96:	d0cf      	beq.n	8010a38 <_malloc_r+0x48>
 8010a98:	6025      	str	r5, [r4, #0]
 8010a9a:	e7db      	b.n	8010a54 <_malloc_r+0x64>
 8010a9c:	20001e10 	.word	0x20001e10
 8010aa0:	20001e14 	.word	0x20001e14

08010aa4 <_sbrk_r>:
 8010aa4:	b538      	push	{r3, r4, r5, lr}
 8010aa6:	4c06      	ldr	r4, [pc, #24]	; (8010ac0 <_sbrk_r+0x1c>)
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	4605      	mov	r5, r0
 8010aac:	4608      	mov	r0, r1
 8010aae:	6023      	str	r3, [r4, #0]
 8010ab0:	f7f3 f864 	bl	8003b7c <_sbrk>
 8010ab4:	1c43      	adds	r3, r0, #1
 8010ab6:	d102      	bne.n	8010abe <_sbrk_r+0x1a>
 8010ab8:	6823      	ldr	r3, [r4, #0]
 8010aba:	b103      	cbz	r3, 8010abe <_sbrk_r+0x1a>
 8010abc:	602b      	str	r3, [r5, #0]
 8010abe:	bd38      	pop	{r3, r4, r5, pc}
 8010ac0:	20003a48 	.word	0x20003a48

08010ac4 <siprintf>:
 8010ac4:	b40e      	push	{r1, r2, r3}
 8010ac6:	b500      	push	{lr}
 8010ac8:	b09c      	sub	sp, #112	; 0x70
 8010aca:	ab1d      	add	r3, sp, #116	; 0x74
 8010acc:	9002      	str	r0, [sp, #8]
 8010ace:	9006      	str	r0, [sp, #24]
 8010ad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ad4:	4809      	ldr	r0, [pc, #36]	; (8010afc <siprintf+0x38>)
 8010ad6:	9107      	str	r1, [sp, #28]
 8010ad8:	9104      	str	r1, [sp, #16]
 8010ada:	4909      	ldr	r1, [pc, #36]	; (8010b00 <siprintf+0x3c>)
 8010adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ae0:	9105      	str	r1, [sp, #20]
 8010ae2:	6800      	ldr	r0, [r0, #0]
 8010ae4:	9301      	str	r3, [sp, #4]
 8010ae6:	a902      	add	r1, sp, #8
 8010ae8:	f000 f8e8 	bl	8010cbc <_svfiprintf_r>
 8010aec:	9b02      	ldr	r3, [sp, #8]
 8010aee:	2200      	movs	r2, #0
 8010af0:	701a      	strb	r2, [r3, #0]
 8010af2:	b01c      	add	sp, #112	; 0x70
 8010af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010af8:	b003      	add	sp, #12
 8010afa:	4770      	bx	lr
 8010afc:	20000038 	.word	0x20000038
 8010b00:	ffff0208 	.word	0xffff0208

08010b04 <strncmp>:
 8010b04:	b510      	push	{r4, lr}
 8010b06:	b16a      	cbz	r2, 8010b24 <strncmp+0x20>
 8010b08:	3901      	subs	r1, #1
 8010b0a:	1884      	adds	r4, r0, r2
 8010b0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010b10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d103      	bne.n	8010b20 <strncmp+0x1c>
 8010b18:	42a0      	cmp	r0, r4
 8010b1a:	d001      	beq.n	8010b20 <strncmp+0x1c>
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d1f5      	bne.n	8010b0c <strncmp+0x8>
 8010b20:	1a98      	subs	r0, r3, r2
 8010b22:	bd10      	pop	{r4, pc}
 8010b24:	4610      	mov	r0, r2
 8010b26:	e7fc      	b.n	8010b22 <strncmp+0x1e>

08010b28 <strstr>:
 8010b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b2a:	7803      	ldrb	r3, [r0, #0]
 8010b2c:	b17b      	cbz	r3, 8010b4e <strstr+0x26>
 8010b2e:	4604      	mov	r4, r0
 8010b30:	7823      	ldrb	r3, [r4, #0]
 8010b32:	4620      	mov	r0, r4
 8010b34:	1c66      	adds	r6, r4, #1
 8010b36:	b17b      	cbz	r3, 8010b58 <strstr+0x30>
 8010b38:	1e4a      	subs	r2, r1, #1
 8010b3a:	1e63      	subs	r3, r4, #1
 8010b3c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8010b40:	b14d      	cbz	r5, 8010b56 <strstr+0x2e>
 8010b42:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8010b46:	42af      	cmp	r7, r5
 8010b48:	4634      	mov	r4, r6
 8010b4a:	d0f7      	beq.n	8010b3c <strstr+0x14>
 8010b4c:	e7f0      	b.n	8010b30 <strstr+0x8>
 8010b4e:	780b      	ldrb	r3, [r1, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	bf18      	it	ne
 8010b54:	2000      	movne	r0, #0
 8010b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	e7fc      	b.n	8010b56 <strstr+0x2e>

08010b5c <strtok>:
 8010b5c:	4b13      	ldr	r3, [pc, #76]	; (8010bac <strtok+0x50>)
 8010b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b62:	681d      	ldr	r5, [r3, #0]
 8010b64:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8010b66:	4606      	mov	r6, r0
 8010b68:	460f      	mov	r7, r1
 8010b6a:	b9b4      	cbnz	r4, 8010b9a <strtok+0x3e>
 8010b6c:	2050      	movs	r0, #80	; 0x50
 8010b6e:	f7ff febf 	bl	80108f0 <malloc>
 8010b72:	65a8      	str	r0, [r5, #88]	; 0x58
 8010b74:	e9c0 4400 	strd	r4, r4, [r0]
 8010b78:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010b7c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010b80:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010b84:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010b88:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010b8c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010b90:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010b94:	6184      	str	r4, [r0, #24]
 8010b96:	7704      	strb	r4, [r0, #28]
 8010b98:	6244      	str	r4, [r0, #36]	; 0x24
 8010b9a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8010b9c:	4639      	mov	r1, r7
 8010b9e:	4630      	mov	r0, r6
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba6:	f000 b803 	b.w	8010bb0 <__strtok_r>
 8010baa:	bf00      	nop
 8010bac:	20000038 	.word	0x20000038

08010bb0 <__strtok_r>:
 8010bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bb2:	b918      	cbnz	r0, 8010bbc <__strtok_r+0xc>
 8010bb4:	6810      	ldr	r0, [r2, #0]
 8010bb6:	b908      	cbnz	r0, 8010bbc <__strtok_r+0xc>
 8010bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bba:	4620      	mov	r0, r4
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	460f      	mov	r7, r1
 8010bc0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010bc4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010bc8:	b91e      	cbnz	r6, 8010bd2 <__strtok_r+0x22>
 8010bca:	b96d      	cbnz	r5, 8010be8 <__strtok_r+0x38>
 8010bcc:	6015      	str	r5, [r2, #0]
 8010bce:	4628      	mov	r0, r5
 8010bd0:	e7f2      	b.n	8010bb8 <__strtok_r+0x8>
 8010bd2:	42b5      	cmp	r5, r6
 8010bd4:	d1f6      	bne.n	8010bc4 <__strtok_r+0x14>
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d1ef      	bne.n	8010bba <__strtok_r+0xa>
 8010bda:	6014      	str	r4, [r2, #0]
 8010bdc:	7003      	strb	r3, [r0, #0]
 8010bde:	e7eb      	b.n	8010bb8 <__strtok_r+0x8>
 8010be0:	462b      	mov	r3, r5
 8010be2:	e00d      	b.n	8010c00 <__strtok_r+0x50>
 8010be4:	b926      	cbnz	r6, 8010bf0 <__strtok_r+0x40>
 8010be6:	461c      	mov	r4, r3
 8010be8:	4623      	mov	r3, r4
 8010bea:	460f      	mov	r7, r1
 8010bec:	f813 5b01 	ldrb.w	r5, [r3], #1
 8010bf0:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010bf4:	42b5      	cmp	r5, r6
 8010bf6:	d1f5      	bne.n	8010be4 <__strtok_r+0x34>
 8010bf8:	2d00      	cmp	r5, #0
 8010bfa:	d0f1      	beq.n	8010be0 <__strtok_r+0x30>
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	7021      	strb	r1, [r4, #0]
 8010c00:	6013      	str	r3, [r2, #0]
 8010c02:	e7d9      	b.n	8010bb8 <__strtok_r+0x8>

08010c04 <__malloc_lock>:
 8010c04:	4770      	bx	lr

08010c06 <__malloc_unlock>:
 8010c06:	4770      	bx	lr

08010c08 <__ssputs_r>:
 8010c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c0c:	688e      	ldr	r6, [r1, #8]
 8010c0e:	429e      	cmp	r6, r3
 8010c10:	4682      	mov	sl, r0
 8010c12:	460c      	mov	r4, r1
 8010c14:	4690      	mov	r8, r2
 8010c16:	4699      	mov	r9, r3
 8010c18:	d837      	bhi.n	8010c8a <__ssputs_r+0x82>
 8010c1a:	898a      	ldrh	r2, [r1, #12]
 8010c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c20:	d031      	beq.n	8010c86 <__ssputs_r+0x7e>
 8010c22:	6825      	ldr	r5, [r4, #0]
 8010c24:	6909      	ldr	r1, [r1, #16]
 8010c26:	1a6f      	subs	r7, r5, r1
 8010c28:	6965      	ldr	r5, [r4, #20]
 8010c2a:	2302      	movs	r3, #2
 8010c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c30:	fb95 f5f3 	sdiv	r5, r5, r3
 8010c34:	f109 0301 	add.w	r3, r9, #1
 8010c38:	443b      	add	r3, r7
 8010c3a:	429d      	cmp	r5, r3
 8010c3c:	bf38      	it	cc
 8010c3e:	461d      	movcc	r5, r3
 8010c40:	0553      	lsls	r3, r2, #21
 8010c42:	d530      	bpl.n	8010ca6 <__ssputs_r+0x9e>
 8010c44:	4629      	mov	r1, r5
 8010c46:	f7ff fed3 	bl	80109f0 <_malloc_r>
 8010c4a:	4606      	mov	r6, r0
 8010c4c:	b950      	cbnz	r0, 8010c64 <__ssputs_r+0x5c>
 8010c4e:	230c      	movs	r3, #12
 8010c50:	f8ca 3000 	str.w	r3, [sl]
 8010c54:	89a3      	ldrh	r3, [r4, #12]
 8010c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c5a:	81a3      	strh	r3, [r4, #12]
 8010c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c64:	463a      	mov	r2, r7
 8010c66:	6921      	ldr	r1, [r4, #16]
 8010c68:	f7ff fe61 	bl	801092e <memcpy>
 8010c6c:	89a3      	ldrh	r3, [r4, #12]
 8010c6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c76:	81a3      	strh	r3, [r4, #12]
 8010c78:	6126      	str	r6, [r4, #16]
 8010c7a:	6165      	str	r5, [r4, #20]
 8010c7c:	443e      	add	r6, r7
 8010c7e:	1bed      	subs	r5, r5, r7
 8010c80:	6026      	str	r6, [r4, #0]
 8010c82:	60a5      	str	r5, [r4, #8]
 8010c84:	464e      	mov	r6, r9
 8010c86:	454e      	cmp	r6, r9
 8010c88:	d900      	bls.n	8010c8c <__ssputs_r+0x84>
 8010c8a:	464e      	mov	r6, r9
 8010c8c:	4632      	mov	r2, r6
 8010c8e:	4641      	mov	r1, r8
 8010c90:	6820      	ldr	r0, [r4, #0]
 8010c92:	f000 fa93 	bl	80111bc <memmove>
 8010c96:	68a3      	ldr	r3, [r4, #8]
 8010c98:	1b9b      	subs	r3, r3, r6
 8010c9a:	60a3      	str	r3, [r4, #8]
 8010c9c:	6823      	ldr	r3, [r4, #0]
 8010c9e:	441e      	add	r6, r3
 8010ca0:	6026      	str	r6, [r4, #0]
 8010ca2:	2000      	movs	r0, #0
 8010ca4:	e7dc      	b.n	8010c60 <__ssputs_r+0x58>
 8010ca6:	462a      	mov	r2, r5
 8010ca8:	f000 faa1 	bl	80111ee <_realloc_r>
 8010cac:	4606      	mov	r6, r0
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	d1e2      	bne.n	8010c78 <__ssputs_r+0x70>
 8010cb2:	6921      	ldr	r1, [r4, #16]
 8010cb4:	4650      	mov	r0, sl
 8010cb6:	f7ff fe4d 	bl	8010954 <_free_r>
 8010cba:	e7c8      	b.n	8010c4e <__ssputs_r+0x46>

08010cbc <_svfiprintf_r>:
 8010cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc0:	461d      	mov	r5, r3
 8010cc2:	898b      	ldrh	r3, [r1, #12]
 8010cc4:	061f      	lsls	r7, r3, #24
 8010cc6:	b09d      	sub	sp, #116	; 0x74
 8010cc8:	4680      	mov	r8, r0
 8010cca:	460c      	mov	r4, r1
 8010ccc:	4616      	mov	r6, r2
 8010cce:	d50f      	bpl.n	8010cf0 <_svfiprintf_r+0x34>
 8010cd0:	690b      	ldr	r3, [r1, #16]
 8010cd2:	b96b      	cbnz	r3, 8010cf0 <_svfiprintf_r+0x34>
 8010cd4:	2140      	movs	r1, #64	; 0x40
 8010cd6:	f7ff fe8b 	bl	80109f0 <_malloc_r>
 8010cda:	6020      	str	r0, [r4, #0]
 8010cdc:	6120      	str	r0, [r4, #16]
 8010cde:	b928      	cbnz	r0, 8010cec <_svfiprintf_r+0x30>
 8010ce0:	230c      	movs	r3, #12
 8010ce2:	f8c8 3000 	str.w	r3, [r8]
 8010ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8010cea:	e0c8      	b.n	8010e7e <_svfiprintf_r+0x1c2>
 8010cec:	2340      	movs	r3, #64	; 0x40
 8010cee:	6163      	str	r3, [r4, #20]
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8010cf4:	2320      	movs	r3, #32
 8010cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cfa:	2330      	movs	r3, #48	; 0x30
 8010cfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d00:	9503      	str	r5, [sp, #12]
 8010d02:	f04f 0b01 	mov.w	fp, #1
 8010d06:	4637      	mov	r7, r6
 8010d08:	463d      	mov	r5, r7
 8010d0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010d0e:	b10b      	cbz	r3, 8010d14 <_svfiprintf_r+0x58>
 8010d10:	2b25      	cmp	r3, #37	; 0x25
 8010d12:	d13e      	bne.n	8010d92 <_svfiprintf_r+0xd6>
 8010d14:	ebb7 0a06 	subs.w	sl, r7, r6
 8010d18:	d00b      	beq.n	8010d32 <_svfiprintf_r+0x76>
 8010d1a:	4653      	mov	r3, sl
 8010d1c:	4632      	mov	r2, r6
 8010d1e:	4621      	mov	r1, r4
 8010d20:	4640      	mov	r0, r8
 8010d22:	f7ff ff71 	bl	8010c08 <__ssputs_r>
 8010d26:	3001      	adds	r0, #1
 8010d28:	f000 80a4 	beq.w	8010e74 <_svfiprintf_r+0x1b8>
 8010d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d2e:	4453      	add	r3, sl
 8010d30:	9309      	str	r3, [sp, #36]	; 0x24
 8010d32:	783b      	ldrb	r3, [r7, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f000 809d 	beq.w	8010e74 <_svfiprintf_r+0x1b8>
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d44:	9304      	str	r3, [sp, #16]
 8010d46:	9307      	str	r3, [sp, #28]
 8010d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8010d4e:	462f      	mov	r7, r5
 8010d50:	2205      	movs	r2, #5
 8010d52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010d56:	4850      	ldr	r0, [pc, #320]	; (8010e98 <_svfiprintf_r+0x1dc>)
 8010d58:	f7ef fa52 	bl	8000200 <memchr>
 8010d5c:	9b04      	ldr	r3, [sp, #16]
 8010d5e:	b9d0      	cbnz	r0, 8010d96 <_svfiprintf_r+0xda>
 8010d60:	06d9      	lsls	r1, r3, #27
 8010d62:	bf44      	itt	mi
 8010d64:	2220      	movmi	r2, #32
 8010d66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010d6a:	071a      	lsls	r2, r3, #28
 8010d6c:	bf44      	itt	mi
 8010d6e:	222b      	movmi	r2, #43	; 0x2b
 8010d70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010d74:	782a      	ldrb	r2, [r5, #0]
 8010d76:	2a2a      	cmp	r2, #42	; 0x2a
 8010d78:	d015      	beq.n	8010da6 <_svfiprintf_r+0xea>
 8010d7a:	9a07      	ldr	r2, [sp, #28]
 8010d7c:	462f      	mov	r7, r5
 8010d7e:	2000      	movs	r0, #0
 8010d80:	250a      	movs	r5, #10
 8010d82:	4639      	mov	r1, r7
 8010d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d88:	3b30      	subs	r3, #48	; 0x30
 8010d8a:	2b09      	cmp	r3, #9
 8010d8c:	d94d      	bls.n	8010e2a <_svfiprintf_r+0x16e>
 8010d8e:	b1b8      	cbz	r0, 8010dc0 <_svfiprintf_r+0x104>
 8010d90:	e00f      	b.n	8010db2 <_svfiprintf_r+0xf6>
 8010d92:	462f      	mov	r7, r5
 8010d94:	e7b8      	b.n	8010d08 <_svfiprintf_r+0x4c>
 8010d96:	4a40      	ldr	r2, [pc, #256]	; (8010e98 <_svfiprintf_r+0x1dc>)
 8010d98:	1a80      	subs	r0, r0, r2
 8010d9a:	fa0b f000 	lsl.w	r0, fp, r0
 8010d9e:	4318      	orrs	r0, r3
 8010da0:	9004      	str	r0, [sp, #16]
 8010da2:	463d      	mov	r5, r7
 8010da4:	e7d3      	b.n	8010d4e <_svfiprintf_r+0x92>
 8010da6:	9a03      	ldr	r2, [sp, #12]
 8010da8:	1d11      	adds	r1, r2, #4
 8010daa:	6812      	ldr	r2, [r2, #0]
 8010dac:	9103      	str	r1, [sp, #12]
 8010dae:	2a00      	cmp	r2, #0
 8010db0:	db01      	blt.n	8010db6 <_svfiprintf_r+0xfa>
 8010db2:	9207      	str	r2, [sp, #28]
 8010db4:	e004      	b.n	8010dc0 <_svfiprintf_r+0x104>
 8010db6:	4252      	negs	r2, r2
 8010db8:	f043 0302 	orr.w	r3, r3, #2
 8010dbc:	9207      	str	r2, [sp, #28]
 8010dbe:	9304      	str	r3, [sp, #16]
 8010dc0:	783b      	ldrb	r3, [r7, #0]
 8010dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8010dc4:	d10c      	bne.n	8010de0 <_svfiprintf_r+0x124>
 8010dc6:	787b      	ldrb	r3, [r7, #1]
 8010dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8010dca:	d133      	bne.n	8010e34 <_svfiprintf_r+0x178>
 8010dcc:	9b03      	ldr	r3, [sp, #12]
 8010dce:	1d1a      	adds	r2, r3, #4
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	9203      	str	r2, [sp, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	bfb8      	it	lt
 8010dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ddc:	3702      	adds	r7, #2
 8010dde:	9305      	str	r3, [sp, #20]
 8010de0:	4d2e      	ldr	r5, [pc, #184]	; (8010e9c <_svfiprintf_r+0x1e0>)
 8010de2:	7839      	ldrb	r1, [r7, #0]
 8010de4:	2203      	movs	r2, #3
 8010de6:	4628      	mov	r0, r5
 8010de8:	f7ef fa0a 	bl	8000200 <memchr>
 8010dec:	b138      	cbz	r0, 8010dfe <_svfiprintf_r+0x142>
 8010dee:	2340      	movs	r3, #64	; 0x40
 8010df0:	1b40      	subs	r0, r0, r5
 8010df2:	fa03 f000 	lsl.w	r0, r3, r0
 8010df6:	9b04      	ldr	r3, [sp, #16]
 8010df8:	4303      	orrs	r3, r0
 8010dfa:	3701      	adds	r7, #1
 8010dfc:	9304      	str	r3, [sp, #16]
 8010dfe:	7839      	ldrb	r1, [r7, #0]
 8010e00:	4827      	ldr	r0, [pc, #156]	; (8010ea0 <_svfiprintf_r+0x1e4>)
 8010e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e06:	2206      	movs	r2, #6
 8010e08:	1c7e      	adds	r6, r7, #1
 8010e0a:	f7ef f9f9 	bl	8000200 <memchr>
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	d038      	beq.n	8010e84 <_svfiprintf_r+0x1c8>
 8010e12:	4b24      	ldr	r3, [pc, #144]	; (8010ea4 <_svfiprintf_r+0x1e8>)
 8010e14:	bb13      	cbnz	r3, 8010e5c <_svfiprintf_r+0x1a0>
 8010e16:	9b03      	ldr	r3, [sp, #12]
 8010e18:	3307      	adds	r3, #7
 8010e1a:	f023 0307 	bic.w	r3, r3, #7
 8010e1e:	3308      	adds	r3, #8
 8010e20:	9303      	str	r3, [sp, #12]
 8010e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e24:	444b      	add	r3, r9
 8010e26:	9309      	str	r3, [sp, #36]	; 0x24
 8010e28:	e76d      	b.n	8010d06 <_svfiprintf_r+0x4a>
 8010e2a:	fb05 3202 	mla	r2, r5, r2, r3
 8010e2e:	2001      	movs	r0, #1
 8010e30:	460f      	mov	r7, r1
 8010e32:	e7a6      	b.n	8010d82 <_svfiprintf_r+0xc6>
 8010e34:	2300      	movs	r3, #0
 8010e36:	3701      	adds	r7, #1
 8010e38:	9305      	str	r3, [sp, #20]
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	250a      	movs	r5, #10
 8010e3e:	4638      	mov	r0, r7
 8010e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e44:	3a30      	subs	r2, #48	; 0x30
 8010e46:	2a09      	cmp	r2, #9
 8010e48:	d903      	bls.n	8010e52 <_svfiprintf_r+0x196>
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d0c8      	beq.n	8010de0 <_svfiprintf_r+0x124>
 8010e4e:	9105      	str	r1, [sp, #20]
 8010e50:	e7c6      	b.n	8010de0 <_svfiprintf_r+0x124>
 8010e52:	fb05 2101 	mla	r1, r5, r1, r2
 8010e56:	2301      	movs	r3, #1
 8010e58:	4607      	mov	r7, r0
 8010e5a:	e7f0      	b.n	8010e3e <_svfiprintf_r+0x182>
 8010e5c:	ab03      	add	r3, sp, #12
 8010e5e:	9300      	str	r3, [sp, #0]
 8010e60:	4622      	mov	r2, r4
 8010e62:	4b11      	ldr	r3, [pc, #68]	; (8010ea8 <_svfiprintf_r+0x1ec>)
 8010e64:	a904      	add	r1, sp, #16
 8010e66:	4640      	mov	r0, r8
 8010e68:	f3af 8000 	nop.w
 8010e6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010e70:	4681      	mov	r9, r0
 8010e72:	d1d6      	bne.n	8010e22 <_svfiprintf_r+0x166>
 8010e74:	89a3      	ldrh	r3, [r4, #12]
 8010e76:	065b      	lsls	r3, r3, #25
 8010e78:	f53f af35 	bmi.w	8010ce6 <_svfiprintf_r+0x2a>
 8010e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e7e:	b01d      	add	sp, #116	; 0x74
 8010e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e84:	ab03      	add	r3, sp, #12
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	4622      	mov	r2, r4
 8010e8a:	4b07      	ldr	r3, [pc, #28]	; (8010ea8 <_svfiprintf_r+0x1ec>)
 8010e8c:	a904      	add	r1, sp, #16
 8010e8e:	4640      	mov	r0, r8
 8010e90:	f000 f882 	bl	8010f98 <_printf_i>
 8010e94:	e7ea      	b.n	8010e6c <_svfiprintf_r+0x1b0>
 8010e96:	bf00      	nop
 8010e98:	08012918 	.word	0x08012918
 8010e9c:	0801291e 	.word	0x0801291e
 8010ea0:	08012922 	.word	0x08012922
 8010ea4:	00000000 	.word	0x00000000
 8010ea8:	08010c09 	.word	0x08010c09

08010eac <_printf_common>:
 8010eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eb0:	4691      	mov	r9, r2
 8010eb2:	461f      	mov	r7, r3
 8010eb4:	688a      	ldr	r2, [r1, #8]
 8010eb6:	690b      	ldr	r3, [r1, #16]
 8010eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	bfb8      	it	lt
 8010ec0:	4613      	movlt	r3, r2
 8010ec2:	f8c9 3000 	str.w	r3, [r9]
 8010ec6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010eca:	4606      	mov	r6, r0
 8010ecc:	460c      	mov	r4, r1
 8010ece:	b112      	cbz	r2, 8010ed6 <_printf_common+0x2a>
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	f8c9 3000 	str.w	r3, [r9]
 8010ed6:	6823      	ldr	r3, [r4, #0]
 8010ed8:	0699      	lsls	r1, r3, #26
 8010eda:	bf42      	ittt	mi
 8010edc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010ee0:	3302      	addmi	r3, #2
 8010ee2:	f8c9 3000 	strmi.w	r3, [r9]
 8010ee6:	6825      	ldr	r5, [r4, #0]
 8010ee8:	f015 0506 	ands.w	r5, r5, #6
 8010eec:	d107      	bne.n	8010efe <_printf_common+0x52>
 8010eee:	f104 0a19 	add.w	sl, r4, #25
 8010ef2:	68e3      	ldr	r3, [r4, #12]
 8010ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8010ef8:	1a9b      	subs	r3, r3, r2
 8010efa:	42ab      	cmp	r3, r5
 8010efc:	dc28      	bgt.n	8010f50 <_printf_common+0xa4>
 8010efe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010f02:	6822      	ldr	r2, [r4, #0]
 8010f04:	3300      	adds	r3, #0
 8010f06:	bf18      	it	ne
 8010f08:	2301      	movne	r3, #1
 8010f0a:	0692      	lsls	r2, r2, #26
 8010f0c:	d42d      	bmi.n	8010f6a <_printf_common+0xbe>
 8010f0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f12:	4639      	mov	r1, r7
 8010f14:	4630      	mov	r0, r6
 8010f16:	47c0      	blx	r8
 8010f18:	3001      	adds	r0, #1
 8010f1a:	d020      	beq.n	8010f5e <_printf_common+0xb2>
 8010f1c:	6823      	ldr	r3, [r4, #0]
 8010f1e:	68e5      	ldr	r5, [r4, #12]
 8010f20:	f8d9 2000 	ldr.w	r2, [r9]
 8010f24:	f003 0306 	and.w	r3, r3, #6
 8010f28:	2b04      	cmp	r3, #4
 8010f2a:	bf08      	it	eq
 8010f2c:	1aad      	subeq	r5, r5, r2
 8010f2e:	68a3      	ldr	r3, [r4, #8]
 8010f30:	6922      	ldr	r2, [r4, #16]
 8010f32:	bf0c      	ite	eq
 8010f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f38:	2500      	movne	r5, #0
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	bfc4      	itt	gt
 8010f3e:	1a9b      	subgt	r3, r3, r2
 8010f40:	18ed      	addgt	r5, r5, r3
 8010f42:	f04f 0900 	mov.w	r9, #0
 8010f46:	341a      	adds	r4, #26
 8010f48:	454d      	cmp	r5, r9
 8010f4a:	d11a      	bne.n	8010f82 <_printf_common+0xd6>
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	e008      	b.n	8010f62 <_printf_common+0xb6>
 8010f50:	2301      	movs	r3, #1
 8010f52:	4652      	mov	r2, sl
 8010f54:	4639      	mov	r1, r7
 8010f56:	4630      	mov	r0, r6
 8010f58:	47c0      	blx	r8
 8010f5a:	3001      	adds	r0, #1
 8010f5c:	d103      	bne.n	8010f66 <_printf_common+0xba>
 8010f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f66:	3501      	adds	r5, #1
 8010f68:	e7c3      	b.n	8010ef2 <_printf_common+0x46>
 8010f6a:	18e1      	adds	r1, r4, r3
 8010f6c:	1c5a      	adds	r2, r3, #1
 8010f6e:	2030      	movs	r0, #48	; 0x30
 8010f70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f74:	4422      	add	r2, r4
 8010f76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f7e:	3302      	adds	r3, #2
 8010f80:	e7c5      	b.n	8010f0e <_printf_common+0x62>
 8010f82:	2301      	movs	r3, #1
 8010f84:	4622      	mov	r2, r4
 8010f86:	4639      	mov	r1, r7
 8010f88:	4630      	mov	r0, r6
 8010f8a:	47c0      	blx	r8
 8010f8c:	3001      	adds	r0, #1
 8010f8e:	d0e6      	beq.n	8010f5e <_printf_common+0xb2>
 8010f90:	f109 0901 	add.w	r9, r9, #1
 8010f94:	e7d8      	b.n	8010f48 <_printf_common+0x9c>
	...

08010f98 <_printf_i>:
 8010f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010fa0:	460c      	mov	r4, r1
 8010fa2:	7e09      	ldrb	r1, [r1, #24]
 8010fa4:	b085      	sub	sp, #20
 8010fa6:	296e      	cmp	r1, #110	; 0x6e
 8010fa8:	4617      	mov	r7, r2
 8010faa:	4606      	mov	r6, r0
 8010fac:	4698      	mov	r8, r3
 8010fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fb0:	f000 80b3 	beq.w	801111a <_printf_i+0x182>
 8010fb4:	d822      	bhi.n	8010ffc <_printf_i+0x64>
 8010fb6:	2963      	cmp	r1, #99	; 0x63
 8010fb8:	d036      	beq.n	8011028 <_printf_i+0x90>
 8010fba:	d80a      	bhi.n	8010fd2 <_printf_i+0x3a>
 8010fbc:	2900      	cmp	r1, #0
 8010fbe:	f000 80b9 	beq.w	8011134 <_printf_i+0x19c>
 8010fc2:	2958      	cmp	r1, #88	; 0x58
 8010fc4:	f000 8083 	beq.w	80110ce <_printf_i+0x136>
 8010fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010fd0:	e032      	b.n	8011038 <_printf_i+0xa0>
 8010fd2:	2964      	cmp	r1, #100	; 0x64
 8010fd4:	d001      	beq.n	8010fda <_printf_i+0x42>
 8010fd6:	2969      	cmp	r1, #105	; 0x69
 8010fd8:	d1f6      	bne.n	8010fc8 <_printf_i+0x30>
 8010fda:	6820      	ldr	r0, [r4, #0]
 8010fdc:	6813      	ldr	r3, [r2, #0]
 8010fde:	0605      	lsls	r5, r0, #24
 8010fe0:	f103 0104 	add.w	r1, r3, #4
 8010fe4:	d52a      	bpl.n	801103c <_printf_i+0xa4>
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	6011      	str	r1, [r2, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	da03      	bge.n	8010ff6 <_printf_i+0x5e>
 8010fee:	222d      	movs	r2, #45	; 0x2d
 8010ff0:	425b      	negs	r3, r3
 8010ff2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010ff6:	486f      	ldr	r0, [pc, #444]	; (80111b4 <_printf_i+0x21c>)
 8010ff8:	220a      	movs	r2, #10
 8010ffa:	e039      	b.n	8011070 <_printf_i+0xd8>
 8010ffc:	2973      	cmp	r1, #115	; 0x73
 8010ffe:	f000 809d 	beq.w	801113c <_printf_i+0x1a4>
 8011002:	d808      	bhi.n	8011016 <_printf_i+0x7e>
 8011004:	296f      	cmp	r1, #111	; 0x6f
 8011006:	d020      	beq.n	801104a <_printf_i+0xb2>
 8011008:	2970      	cmp	r1, #112	; 0x70
 801100a:	d1dd      	bne.n	8010fc8 <_printf_i+0x30>
 801100c:	6823      	ldr	r3, [r4, #0]
 801100e:	f043 0320 	orr.w	r3, r3, #32
 8011012:	6023      	str	r3, [r4, #0]
 8011014:	e003      	b.n	801101e <_printf_i+0x86>
 8011016:	2975      	cmp	r1, #117	; 0x75
 8011018:	d017      	beq.n	801104a <_printf_i+0xb2>
 801101a:	2978      	cmp	r1, #120	; 0x78
 801101c:	d1d4      	bne.n	8010fc8 <_printf_i+0x30>
 801101e:	2378      	movs	r3, #120	; 0x78
 8011020:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011024:	4864      	ldr	r0, [pc, #400]	; (80111b8 <_printf_i+0x220>)
 8011026:	e055      	b.n	80110d4 <_printf_i+0x13c>
 8011028:	6813      	ldr	r3, [r2, #0]
 801102a:	1d19      	adds	r1, r3, #4
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	6011      	str	r1, [r2, #0]
 8011030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011038:	2301      	movs	r3, #1
 801103a:	e08c      	b.n	8011156 <_printf_i+0x1be>
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	6011      	str	r1, [r2, #0]
 8011040:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011044:	bf18      	it	ne
 8011046:	b21b      	sxthne	r3, r3
 8011048:	e7cf      	b.n	8010fea <_printf_i+0x52>
 801104a:	6813      	ldr	r3, [r2, #0]
 801104c:	6825      	ldr	r5, [r4, #0]
 801104e:	1d18      	adds	r0, r3, #4
 8011050:	6010      	str	r0, [r2, #0]
 8011052:	0628      	lsls	r0, r5, #24
 8011054:	d501      	bpl.n	801105a <_printf_i+0xc2>
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	e002      	b.n	8011060 <_printf_i+0xc8>
 801105a:	0668      	lsls	r0, r5, #25
 801105c:	d5fb      	bpl.n	8011056 <_printf_i+0xbe>
 801105e:	881b      	ldrh	r3, [r3, #0]
 8011060:	4854      	ldr	r0, [pc, #336]	; (80111b4 <_printf_i+0x21c>)
 8011062:	296f      	cmp	r1, #111	; 0x6f
 8011064:	bf14      	ite	ne
 8011066:	220a      	movne	r2, #10
 8011068:	2208      	moveq	r2, #8
 801106a:	2100      	movs	r1, #0
 801106c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011070:	6865      	ldr	r5, [r4, #4]
 8011072:	60a5      	str	r5, [r4, #8]
 8011074:	2d00      	cmp	r5, #0
 8011076:	f2c0 8095 	blt.w	80111a4 <_printf_i+0x20c>
 801107a:	6821      	ldr	r1, [r4, #0]
 801107c:	f021 0104 	bic.w	r1, r1, #4
 8011080:	6021      	str	r1, [r4, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d13d      	bne.n	8011102 <_printf_i+0x16a>
 8011086:	2d00      	cmp	r5, #0
 8011088:	f040 808e 	bne.w	80111a8 <_printf_i+0x210>
 801108c:	4665      	mov	r5, ip
 801108e:	2a08      	cmp	r2, #8
 8011090:	d10b      	bne.n	80110aa <_printf_i+0x112>
 8011092:	6823      	ldr	r3, [r4, #0]
 8011094:	07db      	lsls	r3, r3, #31
 8011096:	d508      	bpl.n	80110aa <_printf_i+0x112>
 8011098:	6923      	ldr	r3, [r4, #16]
 801109a:	6862      	ldr	r2, [r4, #4]
 801109c:	429a      	cmp	r2, r3
 801109e:	bfde      	ittt	le
 80110a0:	2330      	movle	r3, #48	; 0x30
 80110a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80110a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110aa:	ebac 0305 	sub.w	r3, ip, r5
 80110ae:	6123      	str	r3, [r4, #16]
 80110b0:	f8cd 8000 	str.w	r8, [sp]
 80110b4:	463b      	mov	r3, r7
 80110b6:	aa03      	add	r2, sp, #12
 80110b8:	4621      	mov	r1, r4
 80110ba:	4630      	mov	r0, r6
 80110bc:	f7ff fef6 	bl	8010eac <_printf_common>
 80110c0:	3001      	adds	r0, #1
 80110c2:	d14d      	bne.n	8011160 <_printf_i+0x1c8>
 80110c4:	f04f 30ff 	mov.w	r0, #4294967295
 80110c8:	b005      	add	sp, #20
 80110ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110ce:	4839      	ldr	r0, [pc, #228]	; (80111b4 <_printf_i+0x21c>)
 80110d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80110d4:	6813      	ldr	r3, [r2, #0]
 80110d6:	6821      	ldr	r1, [r4, #0]
 80110d8:	1d1d      	adds	r5, r3, #4
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	6015      	str	r5, [r2, #0]
 80110de:	060a      	lsls	r2, r1, #24
 80110e0:	d50b      	bpl.n	80110fa <_printf_i+0x162>
 80110e2:	07ca      	lsls	r2, r1, #31
 80110e4:	bf44      	itt	mi
 80110e6:	f041 0120 	orrmi.w	r1, r1, #32
 80110ea:	6021      	strmi	r1, [r4, #0]
 80110ec:	b91b      	cbnz	r3, 80110f6 <_printf_i+0x15e>
 80110ee:	6822      	ldr	r2, [r4, #0]
 80110f0:	f022 0220 	bic.w	r2, r2, #32
 80110f4:	6022      	str	r2, [r4, #0]
 80110f6:	2210      	movs	r2, #16
 80110f8:	e7b7      	b.n	801106a <_printf_i+0xd2>
 80110fa:	064d      	lsls	r5, r1, #25
 80110fc:	bf48      	it	mi
 80110fe:	b29b      	uxthmi	r3, r3
 8011100:	e7ef      	b.n	80110e2 <_printf_i+0x14a>
 8011102:	4665      	mov	r5, ip
 8011104:	fbb3 f1f2 	udiv	r1, r3, r2
 8011108:	fb02 3311 	mls	r3, r2, r1, r3
 801110c:	5cc3      	ldrb	r3, [r0, r3]
 801110e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011112:	460b      	mov	r3, r1
 8011114:	2900      	cmp	r1, #0
 8011116:	d1f5      	bne.n	8011104 <_printf_i+0x16c>
 8011118:	e7b9      	b.n	801108e <_printf_i+0xf6>
 801111a:	6813      	ldr	r3, [r2, #0]
 801111c:	6825      	ldr	r5, [r4, #0]
 801111e:	6961      	ldr	r1, [r4, #20]
 8011120:	1d18      	adds	r0, r3, #4
 8011122:	6010      	str	r0, [r2, #0]
 8011124:	0628      	lsls	r0, r5, #24
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	d501      	bpl.n	801112e <_printf_i+0x196>
 801112a:	6019      	str	r1, [r3, #0]
 801112c:	e002      	b.n	8011134 <_printf_i+0x19c>
 801112e:	066a      	lsls	r2, r5, #25
 8011130:	d5fb      	bpl.n	801112a <_printf_i+0x192>
 8011132:	8019      	strh	r1, [r3, #0]
 8011134:	2300      	movs	r3, #0
 8011136:	6123      	str	r3, [r4, #16]
 8011138:	4665      	mov	r5, ip
 801113a:	e7b9      	b.n	80110b0 <_printf_i+0x118>
 801113c:	6813      	ldr	r3, [r2, #0]
 801113e:	1d19      	adds	r1, r3, #4
 8011140:	6011      	str	r1, [r2, #0]
 8011142:	681d      	ldr	r5, [r3, #0]
 8011144:	6862      	ldr	r2, [r4, #4]
 8011146:	2100      	movs	r1, #0
 8011148:	4628      	mov	r0, r5
 801114a:	f7ef f859 	bl	8000200 <memchr>
 801114e:	b108      	cbz	r0, 8011154 <_printf_i+0x1bc>
 8011150:	1b40      	subs	r0, r0, r5
 8011152:	6060      	str	r0, [r4, #4]
 8011154:	6863      	ldr	r3, [r4, #4]
 8011156:	6123      	str	r3, [r4, #16]
 8011158:	2300      	movs	r3, #0
 801115a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801115e:	e7a7      	b.n	80110b0 <_printf_i+0x118>
 8011160:	6923      	ldr	r3, [r4, #16]
 8011162:	462a      	mov	r2, r5
 8011164:	4639      	mov	r1, r7
 8011166:	4630      	mov	r0, r6
 8011168:	47c0      	blx	r8
 801116a:	3001      	adds	r0, #1
 801116c:	d0aa      	beq.n	80110c4 <_printf_i+0x12c>
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	079b      	lsls	r3, r3, #30
 8011172:	d413      	bmi.n	801119c <_printf_i+0x204>
 8011174:	68e0      	ldr	r0, [r4, #12]
 8011176:	9b03      	ldr	r3, [sp, #12]
 8011178:	4298      	cmp	r0, r3
 801117a:	bfb8      	it	lt
 801117c:	4618      	movlt	r0, r3
 801117e:	e7a3      	b.n	80110c8 <_printf_i+0x130>
 8011180:	2301      	movs	r3, #1
 8011182:	464a      	mov	r2, r9
 8011184:	4639      	mov	r1, r7
 8011186:	4630      	mov	r0, r6
 8011188:	47c0      	blx	r8
 801118a:	3001      	adds	r0, #1
 801118c:	d09a      	beq.n	80110c4 <_printf_i+0x12c>
 801118e:	3501      	adds	r5, #1
 8011190:	68e3      	ldr	r3, [r4, #12]
 8011192:	9a03      	ldr	r2, [sp, #12]
 8011194:	1a9b      	subs	r3, r3, r2
 8011196:	42ab      	cmp	r3, r5
 8011198:	dcf2      	bgt.n	8011180 <_printf_i+0x1e8>
 801119a:	e7eb      	b.n	8011174 <_printf_i+0x1dc>
 801119c:	2500      	movs	r5, #0
 801119e:	f104 0919 	add.w	r9, r4, #25
 80111a2:	e7f5      	b.n	8011190 <_printf_i+0x1f8>
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1ac      	bne.n	8011102 <_printf_i+0x16a>
 80111a8:	7803      	ldrb	r3, [r0, #0]
 80111aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111b2:	e76c      	b.n	801108e <_printf_i+0xf6>
 80111b4:	08012929 	.word	0x08012929
 80111b8:	0801293a 	.word	0x0801293a

080111bc <memmove>:
 80111bc:	4288      	cmp	r0, r1
 80111be:	b510      	push	{r4, lr}
 80111c0:	eb01 0302 	add.w	r3, r1, r2
 80111c4:	d807      	bhi.n	80111d6 <memmove+0x1a>
 80111c6:	1e42      	subs	r2, r0, #1
 80111c8:	4299      	cmp	r1, r3
 80111ca:	d00a      	beq.n	80111e2 <memmove+0x26>
 80111cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80111d4:	e7f8      	b.n	80111c8 <memmove+0xc>
 80111d6:	4283      	cmp	r3, r0
 80111d8:	d9f5      	bls.n	80111c6 <memmove+0xa>
 80111da:	1881      	adds	r1, r0, r2
 80111dc:	1ad2      	subs	r2, r2, r3
 80111de:	42d3      	cmn	r3, r2
 80111e0:	d100      	bne.n	80111e4 <memmove+0x28>
 80111e2:	bd10      	pop	{r4, pc}
 80111e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80111ec:	e7f7      	b.n	80111de <memmove+0x22>

080111ee <_realloc_r>:
 80111ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111f0:	4607      	mov	r7, r0
 80111f2:	4614      	mov	r4, r2
 80111f4:	460e      	mov	r6, r1
 80111f6:	b921      	cbnz	r1, 8011202 <_realloc_r+0x14>
 80111f8:	4611      	mov	r1, r2
 80111fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80111fe:	f7ff bbf7 	b.w	80109f0 <_malloc_r>
 8011202:	b922      	cbnz	r2, 801120e <_realloc_r+0x20>
 8011204:	f7ff fba6 	bl	8010954 <_free_r>
 8011208:	4625      	mov	r5, r4
 801120a:	4628      	mov	r0, r5
 801120c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801120e:	f000 f814 	bl	801123a <_malloc_usable_size_r>
 8011212:	42a0      	cmp	r0, r4
 8011214:	d20f      	bcs.n	8011236 <_realloc_r+0x48>
 8011216:	4621      	mov	r1, r4
 8011218:	4638      	mov	r0, r7
 801121a:	f7ff fbe9 	bl	80109f0 <_malloc_r>
 801121e:	4605      	mov	r5, r0
 8011220:	2800      	cmp	r0, #0
 8011222:	d0f2      	beq.n	801120a <_realloc_r+0x1c>
 8011224:	4631      	mov	r1, r6
 8011226:	4622      	mov	r2, r4
 8011228:	f7ff fb81 	bl	801092e <memcpy>
 801122c:	4631      	mov	r1, r6
 801122e:	4638      	mov	r0, r7
 8011230:	f7ff fb90 	bl	8010954 <_free_r>
 8011234:	e7e9      	b.n	801120a <_realloc_r+0x1c>
 8011236:	4635      	mov	r5, r6
 8011238:	e7e7      	b.n	801120a <_realloc_r+0x1c>

0801123a <_malloc_usable_size_r>:
 801123a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801123e:	1f18      	subs	r0, r3, #4
 8011240:	2b00      	cmp	r3, #0
 8011242:	bfbc      	itt	lt
 8011244:	580b      	ldrlt	r3, [r1, r0]
 8011246:	18c0      	addlt	r0, r0, r3
 8011248:	4770      	bx	lr
	...

0801124c <_init>:
 801124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124e:	bf00      	nop
 8011250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011252:	bc08      	pop	{r3}
 8011254:	469e      	mov	lr, r3
 8011256:	4770      	bx	lr

08011258 <_fini>:
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	bf00      	nop
 801125c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801125e:	bc08      	pop	{r3}
 8011260:	469e      	mov	lr, r3
 8011262:	4770      	bx	lr
